{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Directed Search","n":0.707},"1":{"v":"\nGiven a digraph and source `s`, is there a directed path from `s` to `v`?\n\nGiven a digraph and a set of source vertices, is there a directed path from any vertex in the set to `v`?\n\n## Search\n\n```java\npublic class DirectedDFS {\n    private boolean[] marked;\n\n    /**\n     * Computes the vertices in a digraph reachable from the source vertex `s`.\n     * @param G the digraph\n     * @param s the source vertex\n     */\n    public DirectedDFS(Digraph G, int s) {\n        marked = new boolean[G.V()];\n        dfs(G, s);\n    }\n\n    /**\n     * Computes the vertices in a digraph reachable from the source vertex `s`.\n     * @param G the digraph\n     * @param sources the source vertices\n     */\n    public DirectedDFS(Digraph G, Iterable<Integer> sources) {\n        marked = new boolean[G.V()];\n        for (int s : sources)\n            if (!marked[s]) dfs(G, s);\n    }\n\n    private void dfs(Digraph G, int v) {\n        marked[v] = true;\n        for (int w : G.adj(v))\n            if (!marked[w]) dfs(G, w);\n    }\n\n    /**\n     * Is there a directed path from the source vertex {@code s} to vertex {@code v}?\n     * @param v the vertex\n     * @return {@code true} if there is a directed path, {@code false} otherwise\n     */\n    public boolean marked(int v) {\n        return marked[v];\n    }\n}\n```\n\n## Multiple-source reachability\n\n![](/assets/images/2022-04-20-10-55-58.png)\n\n- Directed search is often used in garbage collection\n    - However this does require searching through *every* reference, so it is quite slow and not widely used in modern languages\n    - Many modern languages with garbage collection use [[ser222.reference-counting]], which doesn't handle edge-cases as well, but is significantly faster\n- The idea is that all objects that are on the stack are listed out, then all objects that are reachable from the stack are listed out\n    - Remaining objects can be safely garbage collected","n":0.06}}},{"i":2,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n## Personal Notes\n\n- [[typescript]]\n- [[luau]]\n\n## Spring 2022\n\n- [[SER 222 - Data Structures & Algorithms|ser222]]\n- [[SER 216 - \"Software Enterprise\" aka Intro to Software Design|ser216]]\n- [[MAT 266 - Calc For Engineers II|mat266]]","n":0.18}}},{"i":3,"$":{"0":{"v":"TypeScript","n":1}}},{"i":4,"$":{"0":{"v":"SER-222","n":1},"1":{"v":"Design and Analysis of Data Structures and Algorithms\n\n[Syllabus](https://github.com/jheinem1/notes/tree/main/vault/assets/ser222_22sc_syllabus.pdf)\n\n| Instructor       | Ruben AcuÃ±a                                                                                                                                                                                 |\n|------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Office Hours** | [Online](https://zoom.us/my/acuna) Mon.-Wed. 3:30-4:45 PM, by appt. only. (Make an appt. at least 18 hours in advance [here](https://calendly.com/racuna1)), but can also contact in Slack. |\n| **SI Leader**    | Sai Nishanth Vaka                                                                                                                                                                           |\n## Course Overview\n- [[Data structures|ser222.data-structure]] and related [[algorithms|ser222.algorithms]]\n- Sorting and searching\n- Program development, documentation, and testing\n- [Gradescope](https://www.gradescope.com/courses/350795) will be used for unit tests\n## Outcomes\n- Big-O analyses of algorithms\n- Gaining experience in OOP\n- Judging the appropriateness of data structures (e.g. sequential vs. linked implementation)\n- Learning specification and application of data structures such as arrays, stacks, queues, strings, sets, sequential lists, binary search trees, and hashed storage\n## Modules\n### Module 1 - Data Abstraction\n- [Slides (Optional review)](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-01-01-slides-recursion.pdf)\n- [Video 1 (Optional review)](https://youtu.be/N6Z58aV55AQ)\n- [Video 2 (Optional review)](https://youtu.be/BFUEvrUFQAc)\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-01-02-slides-dataabstraction.pdf)\n- [[Notes|ser222.data-abstraction]]\n### Module 2 - Stacks, Lists, and Generics\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-01-03-slides-stackslistsgenerics.pdf)\n- [[Notes - Stack|ser222.stack]]\n- [[Notes - LinkedList|ser222.linked-list]]\n- [[Notes - Array|ser222.array]]\n### Module 3 - Analysis of Algorithms\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-01-04-slides-analysisofalgorithms.pdf)\n- [[Notes|ser222.algorithms]]\n### Module 4 - Analysis, Design, and Justification\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-adj-01-slides-introadj.pdf)\n- [[Notes|ser222.analysis-design-justification]]\n### Exam 1\n### Module 5 - Elementary Sorts\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-02-01-slides-elementarysorts.pdf)\n- [[Notes|ser222.sorting]]\n### Module 6 - Merge Sort\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-02-02-slides-mergesort.pdf)\n- [[Notes|ser222.sorting.merge-sort]]\n### Module 7 - Priority Queues\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-02-04-slides-pq.pdf)\n- [[Notes|ser222.sorting.priority-queue]]\n### Module 8 - ADJ: Algorithms\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-adj-02-slides-introadj.pdf)\n- [[Notes|ser222.algorithms.adj]]\n### Exam 2\n### Module 9 - Symbol Tables & Binary Search Trees\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-03-01-02-stbst.pdf)\n- [[Notes - Symbol Tables|ser222.symbol-table]]\n- [[Notes - Binary Search Trees|ser222.binary-search-tree]]\n### Module 10 - Hash Tables\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-03-04-ht.pdf)\n- [[Notes - Hash Tables|ser222.hash-table]]\n- [[Notes - Linear Probing|ser222.hash-table.linear-probing]]\n### Module 11 - Undirected Graphs\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-04-01-undirectedgraphs.pdf)\n- [[Notes|ser222.undirected-graphs]]\n\n### Module 12 - Directed Graphs\n\n- Part 1 - Directed Graphs\n    - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/ser-222-04-02-directedgraphs.pdf)\n    - [[Notes - Directed Graphs|ser222.directed-graphs]]\n- Part 2 - Weighted Graphs\n    - [Slides](assets/ser-222-04-04-shortestpaths.pdf)\n    - [[Notes - Weighted Graphs|ser222.weighted-graphs]]\n\n### Exam 3\n","n":0.061}}},{"i":5,"$":{"0":{"v":"Weighted Graphs","n":0.707},"1":{"v":"\nWeighted graphs assign a weight to each edge rather than just a boolean value. This takes up more space, but allows for more realistic graphs.\n\n## Edges with attributes\n\n- We will create a simple class to hold the attributes of each edge\n\n```java\npublic class DirectedEdge {\n    private final int v;\n    private final int w;\n    private final double weight;\n\n    public DirectedEdge(int v, int w, double weight) {\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n\n    public double weight() {\n        return weight;\n    }\n\n    public int from() {\n        return v;\n    }\n\n    public int to() {\n        return w;\n    }\n\n    public String toString() {\n        return String.format(\"%d->%d %.2f\", v, w, weight);\n    }\n}\n```\n\n## Revisiting directed graph ADT\n\n- There are some small modifications to the [[Directed Graph|ser222.directed-graphs]] that we will make to make it work with weighted edges\n\n```java\npublic interface EdgeWeightedGraph {\n    int V(); // number of vertices\n    int E(); // number of edges\n    void addEdge(DirectedEdge e); // add edge v->w\n    Iterable<DirectedEdge> adj(int v); // vertices connected to v from edges v->x\n    Iterable<DirectedEdge> edges(); // all edges\n    String toString(); // string representation of graph\n}\n```\n\n## Shortest path\n\n- A path between two nodes is the shortest if there is no other path with a smaller weight\n\n### Relaxation\n\n- Pick a node\n- If it provides a shorter way to reach its neighbors, then update the neighbors\n\n```java\nprivate void relax(EdgeWeightedDigraph G, int v) {\n    for (DirectedEdge e : G.adj(v)) {\n        int w = e.to();\n        if (distTo[w] > distTo[v] + e.weight()) {\n            distTo[w] = distTo[v] + e.weight();\n            edgeTo[w] = e;\n        }\n    }\n}\n```\n\n```mermaid\nflowchart LR\n    0 -->|1| 1\n    0 -->|3| 2\n    1 -->|2| 3\n    3 -->|1| 4\n    2 -->|4| 4\n    1 -->|1| 2\n```\n\nExample of situation where relaxing would be needed to find the shortest path.\n\n### Dijkstra's algorithm\n\n- We need to relax each node in a graph\n    - The issue is that we need them to relax them in an order that gives us the shortest path\n- Idea:\n    - Maintain a list of nodes that we have not yet relaxed\n    - Pick out the node with the smallest distance\n    - Relax it\n    - Remove it from the list\n    - Repeat until all nodes have been relaxed\n\n```java\nprivate void dijikstra(EdgeWeightedDigraph G, int s) {\n    distTo = new double[G.V()];\n    edgeTo = new DirectedEdge[G.V()];\n    for (int v = 0; v < G.V(); v++) {\n        distTo[v] = Double.POSITIVE_INFINITY;\n    }\n    distTo[s] = 0.0;\n    pq = new IndexMinPQ<>(G.V());\n    pq.insert(s, distTo[s]);\n    while (!pq.isEmpty()) {\n        int v = pq.delMin();\n        for (DirectedEdge e : G.adj(v)) {\n            int w = e.to();\n            if (pq.contains(w) && distTo[w] > distTo[v] + e.weight()) {\n                distTo[w] = distTo[v] + e.weight();\n                edgeTo[w] = e;\n                if (pq.contains(w)) pq.decreaseKey(w, distTo[w]);\n                else pq.insert(w, distTo[w]);\n            }\n        }\n    }\n}\n```","n":0.048}}},{"i":6,"$":{"0":{"v":"Undirected Graphs","n":0.707},"1":{"v":"\n## Terminology\n\n- Graphs\n  - [[Directed|ser222.directed-graphs]] vs [[undirected|ser222.undirected-graphs]]\n  - Vertices (angular points, adjacent)\n  - Edges (lines, incident)\n- Self-looping nodes\n  - Nodes that are connected in such a way that a \"loop\" exists when the node is traversed\n- Parallel edges\n  - Edges that are incident to the same node\n\n## Basic idea\n\n- Graphs are similar to linked lists and trees, but they have no defined order\n\n```mermaid\nflowchart LR\n    A <--> B\n    B <--> C\n    C <--> A\n```\n\n## Graph API\n\n```mermaid\nclassDiagram\n    class Graph {\n        Graph(int V)\n        Graph(In in)\n        V() int\n        E() int\n        addEdge(int v, int w)\n        adj(int v) Iterable\n        toString() String\n    }\n```\n\n### Compute the degree of a vertex\n\n```java\npublic int degree(Graph g, int v) {\n    int degree = 0;\n    for (int w : g.adj(v))\n        degree++;\n    return degree;\n}\n```\n\n### Count number of self-loops\n\n```java\npublic int numberOfSelfLoops(Graph g) {\n    int count = 0;\n    for (int v = 0; v < g.V(); v++)\n        for (int w : g.adj(v))\n            if (v == w)\n                count++;\n    return count / 2;\n}\n```\n\n## Implementing the graph ADT\n\n- Ideally we want\n  - Low space usage: linear\n  - Fast to add edges: constant\n  - Fast to find edge on vertex: linear\n- We also want to support\n  - Self-loops\n  - Parallel edges\n- Possible implementations\n  - Adjacency matrix\n  - Adjacency list\n\n### Adjacency matrix\n\nFor a graph of $V$ vertices, make a $V$ by $V$ matrix, where each index corresponds directly to an edge\n\n```mermaid\nflowchart LR\n    0 --- 1\n    1 --- 2\n    1 --- 4\n    2 --- 4\n    1 --- 3\n    4 --- 3\n```\n\n|     | 0   | 1   | 2   | 3   | 4   |\n| --- | --- | --- | --- | --- | --- |\n| 0   |     | T   |     |     |     |\n| 1   | T   |     | T   | T   | T   |\n| 2   |     | T   |     |     | T   |\n| 3   |     | T   |     |     | T   |\n| 4   |     | T   | T   | T   |     |\n\n- Requires $V^2$ space\n- Supports self-loops\n- Supports parallel edges\n\n### Adjacency list\n\nFor a graph of $V$ vertices, mane an array of $V$ linked lists, where each index corresponds to a list of vertices that are connected to that index.\n\n```mermaid\nflowchart LR\n    0 --- 1\n    1 --- 2\n    1 --- 4\n    2 --- 4\n    1 --- 3\n    4 --- 3\n```\n\n![](/assets/images/2022-04-13-10-45-56.png)\n\n- Requires $V+E$ space\n- Supports self-loops\n- Supports parallel edges\n- Difficult to check if nodes are connected in constant time\n- Uses significantly less space than a matrix\n\n## Searching\n\n- Given an undirected graph, are two vertices connected?\n\n```mermaid\nclassDiagram\n    class Search {\n        Search(Graph G, int s)\n        marked(int v) boolean\n        count() int\n    }\n```\n\n- This API is a little overboard for solving the problem, but it makes for a better UML diagram\n\n```mermaid\nflowchart LR\n    0 --- 1\n    2\n    1 --- 3\n    3 --- 4\n    1 --- 4\n```\n\n```java\nvar search = new Search(G, s);\nSystem.out.println(search.count()); // 3\nSystem.out.println(search.marked(4)); // true\nSystem.out.println(search.marked(2)); // false\n```\n\n- In other languages, this would probably be more easily implemented as a function\n  - Or, `Graph` could implement the `Search` interface\n\n### Depth-first search\n\n1. Start at some node\n2. Mark it as visited\n3. Recursively visit each of its neighbors if they are not marked\n\n```java\nprivate void dfs(Graph G, int v) {\n    marked[v] = true;\n    count++;\n    for (int w : G.adj(v))\n        if (!marked[w])\n            dfs(G, w);\n}\n```\n\n### Implementation\n\n```java\npublic class DepthFirstSearch implements Search {\n    private boolean[] marked;\n    private int count;\n\n    public DepthFirstSearch(Graph G, int s) {\n        marked = new boolean[G.V()];\n        dfs(G, s);\n    }\n\n    private void dfs(Graph G, int v) { ... }\n\n    public boolean marked(int w) {\n        return marked[w];\n    }\n\n    public int count() {\n        return count;\n    }\n}\n```\n\n## Pathing\n\n- Given an undirected graph, are two vertices connected?\n\n```mermaid\nclassDiagram\n    class Paths {\n        Paths(Graph G, int s)\n        hasPathTo(int v) boolean\n        pathTo(int v) Iterable\n    }\n```\n\n- DFS can easily be extended to find all paths\n  - However, it may not be the ideal solution\n  - DFS may find _a_ path, but not necessarily the shortest\n\n```mermaid\nflowchart LR\n    0 --- 1\n    1 --- 3\n    3 --- 4\n    1 --- 4\n    2\n```\n\n- When used on the above nodes, DFS might find the path `0 -> 1 -> 3 -> 4`\n  - This is **not** the shortest path\n- BFS, although slower, would observe _all_ possible paths, and would always find the shortest path; `0 -> 1 -> 4`\n\n```java\nvar paths = new Paths(G, s);\nSystem.out.println(paths.hasPathTo(2)); // false\nSystem.out.println(paths.hasPathTo(4)); // true\nfor (var v : paths.pathTo(4))\n    System.out.println(v); // 0, 1, 4 (DFS could fail to find this)\n```\n\n### Using DFS\n\n- New variable is `edgeTo\n  - Gets updated for each call in `dfs`\n\n```java\nprivate void dfs(Graph G, int v) {\n    marked[v] = true;\n    for (int w : G.adj(v)) {\n        if (!marked[w]) {\n            edgeTo[w] = v;\n            dfs(G, w);\n        }\n    }\n}\n```\n\n- This is **not** the shortest path!\n\n### Breadth-first search\n\n1. Start at some node\n2. Mark it as visited\n3. Add its neighbors to a queue if they are not marked\n4. Remove the first node from the queue and mark it as visited\n5. Add its neighbors to the queue if they are not marked\n6. Repeat step 4 until the queue is empty\n\n```java\nprivate void bfs(Graph G, int s) {\n    Queue<Integer> queue = new Queue<>();\n    marked[s] = true;\n    queue.add(s);\n    while (!queue.isEmpty()) {\n        int v = queue.remove();\n        for (int w : G.adj(v)) {\n            if (!marked[w]) {\n                edgeTo[w] = v;\n                marked[w] = true;\n                queue.add(w);\n            }\n        }\n    }\n}\n```\n\n### Implementation\n\n```java\npublic class BreadthFirstPaths implements Paths {\n    private boolean[] marked;\n    private int[] edgeTo;\n    private int s;\n\n    public BreadthFirstPaths(Graph G, int s) {\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        this.s = s;\n        bfs(G, s);\n    }\n\n    private void bfs(Graph G, int v) { ... }\n\n    public boolean hasPathTo(int v) {\n        return marked[v];\n    }\n\n    public Iterable<Integer> pathTo(int v) {\n        if (!hasPathTo(v))\n            return null;\n        Stack<Integer> path = new Stack<>();\n        for (int x = v; x != s; x = edgeTo[x])\n            path.push(x);\n        path.push(s);\n        return path;\n    }\n}\n```\n\n### Example\n\n```mermaid\nflowchart LR\n    1 --- 4\n    6 --- 1\n    4 --- 6\n    5 --- 3\n    0 --- 2\n    2 --- 3\n    5 --- 6\n    0 --- 5\n```\n\n#### Start:\n\n- `M` represents an array of marked vertices\n- `Q` represents the queue of vertices to visit\n- `V` represents the current vertex\n- `M[4] = T`\n- `Q = [4]`\n\n#### Loop 1:\n\n- `V = 4`\n- `ET[1] = 4`\n- `M[1] = T`\n- `ET[6] = 4`\n- `M[6] = T`\n- `Q = [6, 1]`\n\n#### Loop 2:\n\n- `V = 1`\n- `Q = [6]`\n\n#### Loop 3:\n\n- `V = 6`\n- `ET[5] = 6`\n- `M[5] = T`\n- `Q = [5]`\n\n#### Loop 4:\n\n- `V = 5`\n- `ET[0] = 5`\n- `M[0] = T`\n- `ET[3] = 5`\n- `M[3] = T`\n- `Q = [3, 0]`\n\n#### Loop 5:\n\n- `V = 0`\n- `ET[2] = 5`\n- `M[2] = T`\n- `Q = [2, 3]`\n\n#### Loop 6:\n\n- `V = 3`\n- `Q = [2]`\n\n#### Loop 7:\n\n- `V = 2`\n- `Q = []`\n\n### BFS vs DFS\n\n- Both algorithms solve the same problem\n- DFS extends the current path using the newest node\n- BFS looks at the oldest node first\n- BFS is safer for graphs with an unknown or potentially near-infinite number of nodes\n- DFS is better for traversing small graphs with a known number of nodes\n\n## Theoretic applications\n\n### Connected components\n\n- A connected component is a set of a graph where every pair of vertices are connected by some path\n\n```java\npublic interface ConnectedComponent {\n    boolean connected(int v, int w);\n    int count();\n    int id(int v);\n}\n```\n\n- This is really just DFS with a loop to get all connected components\n\n### Detecting cycles\n\n- A cycle is a path where the first and last nodes are the same\n- The `marked` array in both DFS and BFS can be used to detect cycles\n\n### k-Coloring\n\n- Can the vertices of a graph be colored with `k` different colors in a way that no adjacent nodes have the same color?\n- All you need to do is label each node as the graph is traversed, alternating color (unless you have a cycle)\n","n":0.028}}},{"i":7,"$":{"0":{"v":"Symbol Table (Map)","n":0.577},"1":{"v":"\n## Extending arrays\n\n- In an array, an index corresponds to some value\n- It would be useful to extend this idea\n    - Mapping any type of key to values\n- This is a symbol table\n    -  Insert: `put(K, V)`\n        - Associates a key with a value\n    - Search: `get(K)`\n        - Returns the value associated with the key\n        - If no value is associated with the key, returns `null`\n- Symbol tables are often implemented as **Dictionaries**, **Hash Tables**, or **Maps**\n\n## API\n\n```java\npublic interface SymbolTable<K, V> {\n    /**\n     * Put key-value pair into the symbol table.\n     * @param key the key\n     * @param val the value\n     * @return the previous value associated with key, or {@code null} if there was no mapping for key.\n    */\n    void put(K key, V value);\n    /**\n     * Get the value associated with the given key.\n     * @param key the key\n     * @return the value associated with the given key if present, or {@code null} if no value is present.\n    */\n    V get(K key);\n    /**\n     * Remove the key (and its associated value) from the symbol table.\n     * @param key the key\n     * @return the value associated with the given key if present, or {@code null} if no value is present.\n    */\n    void delete(K key);\n    /**\n     * Does the symbol table contain the given key?\n     * @return {@code true} if the symbol table is empty, {@code false} otherwise\n    */\n    boolean contains(K key);\n    /**\n     * Is the symbol table empty?\n     * @return {@code true} if the symbol table is empty, {@code false} otherwise\n    */\n    boolean isEmpty();\n    /**\n     * Return the number of key-value mappings in the symbol table.\n     * @return the number of key-value mappings in the symbol table\n    */\n    int size();\n    /**\n     * Return all keys in the symbol table as an {@code Iterable}.\n     * To iterate over all of the keys in the symbol table named {@code st},\n     * use the foreach notation: {@code for (Key key : st.keys())}.\n     * @return all keys in the symbol table as an {@code Iterable}\n    */\n    Iterable<K> keys();\n}\n```\n\n- A key *cannot* refer to multiple values withing\n\n## Applications in compilers\n\n- As a standard part of most compilers, a symbol table of variables is built\n- The compiler indexes each variable in a method and uses it as a key to store the assigned value\n\n```java\nvoid compute_z() {\n    int x = 2;\n    int y = x + 5;\n    int z = (y + x) * 2;\n    System.out.println(z);\n}\n```\n\nVariable | Value\n---------|------------------\nx        | Constant: 2\ny        | Expr: x + 5\nz        | Expr: (y + x) * 2\n\n## Ordered API\n\nOrdered symbol tables are a special case of symbol tables that sort keys.\n\n```java\npublic interface OrderedSymbolTable<Key extends Comparable<Key>, Value> {\n    void put(Key key, Value, value);\n    Value get(Key key);\n    void delete(Key key);\n    boolean contains(Key key);\n    boolean isEmpty();\n    int size();\n    Key min();\n    Key max();\n    Key floor(Key key);\n    Key ceiling(Key key);\n    int rank(Key key);\n    Key select(int k);\n    void deleteMin();\n    void deleteMax();\n    int size(Key lo, Key hi);\n    Iterable<Key> keys(Key lo, Key hi);\n    Iterable<Key> keys();\n}\n```\n\n## Implementation with a binary search tree\n\nWe can use a [[ser222.binary-search-tree]] to implement an ordered symbol table.\n\nFor the purposes of demonstrating this implementation, we will use a simple `Node` class for the binary search tree.\n\n```java\ninterface Node<K, V> {\n    K key;\n    V value;\n    Node<K, V> left;\n    Node<K, V> right;\n}\n```\n\n### Get value implementation\n\n- Since the symbol table is ordered, we can take advantage of the $O(log n)$ time complexity of searching for a key\n- We can start by comparing the key to the root node of the tree\n    - If the key is less than the root node, we can recursively search the left subtree\n    - If the key is greater than the root node, we can recursively search the right subtree\n\n```java\npublic V get(K key) {\n    Node<K, V> x = root;\n    while (x != null) {\n        int cmp = key.compareTo(x.key);\n        if (cmp < 0) x = x.left;\n        else if (cmp > 0) x = x.right;\n        else return x.value;\n    }\n    return null;\n}\n```\n\n### Put value implementation\n\n- To insert a new key into the symbol table, we can start by comparing the key to the root node of the tree\n    - If the key is less than the root node, we can recursively search the left subtree\n    - If the key is greater than the root node, we can recursively search the right subtree\n    - If the key is equal to the root node, we can update the value\n\n```java\npublic void put(K key, V value) {\n    root = put(root, key, value);\n}\n\nprivate Node put(Node x, K key, V value) {\n    if (x == null) return new Node<K, V>(key, value, null, null);\n    int cmp = key.compareTo(x.key);\n    if (cmp < 0) x.left = put(x.left, key, value);\n    else if (cmp > 0) x.right = put(x.right, key, value);\n    else x.value = value;\n    return x;\n}\n```\n\n### Min value implementation\n\n- Because the binary search tree is ordered, we can use the leftmost node as the minimum value\n\n```java\npublic K min() {\n    return min(root).key;\n}\n\nprivate Node min(Node x) {\n    if (x.left == null) return x;\n    return min(x.left);\n}\n```\n\n### DeleteMin implementation\n\n- This is almost identical to the delete implementation, except that we need to update the root node\n\n```java\npublic void deleteMin() {\n    root = deleteMin(root);\n}\n\nprivate Node deleteMin(Node x) {\n    if (x.left == null)\n        if (x.right != null) return x.right;\n        else return null;\n    x.left = deleteMin(x.left);\n    return x;\n}\n```\n\n### Delete implementation\n\n- This is much more complicated, as there are three different cases that must be handled\n    - The node to be deleted has no children\n    - The node to be deleted has one child\n    - The node to be deleted has two children\n\n```java\npublic void delete(K key) {\n    root = delete(root, key);\n}\n\nprivate Node delete(Node x, K key) {\n    if (x == null) return null;\n    int cmp = key.compareTo(x.key);\n    if (cmp < 0) x.left = delete(x.left, key);\n    else if (cmp > 0) x.right = delete(x.right, key);\n    else {\n        if (x.right == null) return x.left;\n        if (x.left == null) return x.right;\n        Node t = x;\n        x = min(t.right);\n        x.right = deleteMin(t.right);\n        x.left = t.left;\n    }\n    return x;\n}\n```\n\n### Keys iterator implementation\n\n```java\npublic Iterable<Key> keys(K lo, K hi) {\n    Queue<Key> queue = new Queue<Key>();\n    keys(root, queue, lo, hi);\n    return queue;\n}\n\nprivate void keys(Node x, Queue<Key> queue, K lo, K hi) {\n    if (x == null) return;\n    int cmplo = lo.compareTo(x.key);\n    int cmphi = hi.compareTo(x.key);\n    if (cmplo < 0) keys(x.left, queue, lo, hi);\n    if (cmplo <= 0 && cmphi >= 0) queue.enqueue(x.key);\n    if (cmphi > 0) keys(x.right, queue, lo, hi);\n}\n```\n\n### Performance\n\nAlgorithm                                 | Average Search | Average Insert | Support ordered operations?\n------------------------------------------|----------------|----------------|----------------------------\nSequential search (unordered linked list) | $\\frac{n}{2}$  | $n$            | No\nBinary search (ordered array)             | $\\log n$       | $n$            | Yes\nBinary search (binary search tree)        | $1.39\\log n$   | $1.39\\log n$   | Yes","n":0.03}}},{"i":8,"$":{"0":{"v":"Stack","n":1},"1":{"v":"\nA data structure that can have elements added/removed in `O(1)`. This is generally implemented via a [[ser222.linked-list]].\n\n```Java\npublic interface Stack<T> {\n    /** Pushes a new item to the top of the stack */\n    void push(T item);\n    /** Removes the topmost item from the stack and returns it */\n    T pop();\n    boolean isEmpty();\n    int size();\n}\n```\n## Linked-Stack\nIf implemented with an [[ser222.array]], the `push()` method can be `O(n)`, as the array needs to be occasionally resized. If implemented through a [[ser222.linked-list]], all methods are `O(1)`.\n```mermaid\nflowchart LR\n    n0[Top\\n4] --> n1[3]\n    n1 --> n2[2]\n    n2 --> n3[1]\n    n3 --> n4[Bottom\\n0]\n```\nTo push to the stack, a new `Top` node is created, setting the linked list's reference to the new `Top` and that node's `next` to the previous `Top` (`4` in this example)\n```mermaid\nflowchart LR\n    n0[Top\\n5] --> n1[OldTop\\n4]\n    n1 --> n2[...]\n```\n```Java\n...\npublic void push(T element) {\n    var newTop = new Node<T>(element);\n    newTop.next = top; // this may also be handled by a setter\n    top = newTop;\n}\n...\n```\nTo remove an element (in Java), you have to set the current head to the top's `next` property and let the garbage collector do the rest. Although `OldTop` may still reference the `NewTop`, this no longer matters as there is no longer a way to access `OldTop`.\n```mermaid\nflowchart LR\n    n0[OldTop] --> n1[NewTop\\n3] \n    style n0 stroke:#FFF000\n    style n1 stroke:#00FF00\n    n1--> n2[2]\n    n2 --> n3[...]\n```\n```Java\n...\npublic T pop() {\n    var oldTop = top;\n    top = top.next; // this may also be handled by a getter\n    return oldTop.value; // this may also be handled by a getter\n}\n...\n```","n":0.064}}},{"i":9,"$":{"0":{"v":"Sorting","n":1},"1":{"v":"---\n## Foundations\n### Applications\n- Sorting is useful for...\n    - Ordering string alphanumerically\n    - Ordering objects on a screen\n    - Ordering executing processes\n- Sorting provides...\n    - Structure\n    - A decomposition of a list of values\n### How data is sorted\n- Data may be simple numbers or complex strings\n- Data is always sorted by a *key*- some subset of data that is sufficient to define an order\n### Approaches\n- There are many algorithms to sort: [[insertion sort|ser222.sorting.insertion-sort]], [[selection sort|ser222.sorting.selection-sort]], [[merge sort|ser222.sorting.merge-sort]], [[quick sort|ser222.sorting.quick-sort]], [[shell sort|ser222.sorting.shell-sort]], [[radix sort|ser222.sorting.radix-sort]], [[counting sort|ser222.sorting.counting-sort]], [[bogo sort|ser222.sorting.bogo-sort]] and several dozen more.\n- Sorting is not only a common problem but a classic area of algorithm analysis\n    - It is easy to understand and can be approached in many ways\n- Some of these make different assumptions\n    - [[Radix sort|ser222.sorting.radix-sort]] requires integers\n- Many of these algorithms behave fundamentally different\n    - This leads to differences in performance in either worst case ($O(n^2)$ vs $O(n\\log{n})$) or best case ($\\Omega(n^2)$ vs $\\Omega(n)$)\n### Sorted data\n- A list is sorted if all elements are in order: $\\forall{n},a_n<a_{n+1}$, where order is computed from a key\n- A list is unsorted if an element is out of order: $\\exists{n}\\text{ }s.t.a_{n+1}<a_n$\n- A metric: *inversions*\n    - \"An inversion is a pair of entries that are out of order in the array\"\n    - `[3, 1, 8, 2]` has 3 inversions: `3-1`, `3-2`, `8-2`\n---\n## Java context\nAlmost all sorting methods implement these methods:\n(**NOTE**: `-ea` to enable assertions)\n```java\npublic abstract class Sort {\n    public static void Sort(Comparable[] array)\n    \n    private static boolean less(Comparable v, Comparable w) {\n        return v.compareTo(w) < 0;\n    }\n    \n    private static void exch(Comparable[] array, int i, int j) {\n        Comparable t = array[i];\n        array[i] = array[j];\n        array[j] = t;\n    }\n    \n    private static void show(Comparable[] array) {\n        for (int i = 0; i < array.length; i++)\n            System.out.print(array[i] + \" \");\n        System.out.println();\n    }\n    \n    public static boolean isSorted(Comparable[] array) {\n        for (int i = 1; i < array.length; i++)\n            if (less(array[i], array[i - 1]))\n                return false;\n        return true;\n    }\n```\n- Helper methods providing common functionality\n    - `less`\n    - `exch`\n- Testing methods\n    - `isSorted`\n    - `show`\n- Using [[ser222.sorting.comparable]] to be as generic as possible\n\n## Sorting lower bound\n\n### Decision trees\n\n- We can represent the decision process that finds a sorted number of elements with a binary tree of comparisons\n\n![](/assets/images/2022-02-28-11-25-03.png)\n\n- Using this decision tree, we can determine that any sorting algorithm needs at least $\\Omega(n\\log{n})$ comparisons","n":0.051}}},{"i":10,"$":{"0":{"v":"Shell Sort","n":0.707},"1":{"v":"Unlike [[ser222.sorting.selection-sort]], Shell Sort has the possibility of $\\Omega(n)$ sorting in some cases. It can also have a better average sort time\n\nAlthough this sort was widely used, this is by-and-large replaced with [[sorting.quick-sort]].\n\n## Steps\n1. Perform an [[ser222.sorting.insertion-sort]] starting at the ends of the array, and gradually shrink the internal until it is `1` (i.e., converges to normal insertion sort)\n## Implementation\n```java\npublic static void sort(Comparable[] array) {\n    int n = a.length;\n    int h = 1;\n    while (h < N / 3) {\n        for (int i = h; i < n; i++)\n            for (int j = i; j >= h && less(a[j],a[j - h]); j -= h)\n                exch(a, j, j - h);\n        h = h / 3;\n    }\n}\n```\n## Big-Oh\n### Worst-case-scenario\n$$\nO(n^{\\frac32})\n$$\n### Best-case-scenario\n$$\n\\Omega(n\\log{n})\n$$","n":0.092}}},{"i":11,"$":{"0":{"v":"Selection Sort","n":0.707},"1":{"v":"\nFinds the smallest element in the data, swaps it for the position `i`, then repeats for all elements in the list.\n\nThis forms a region in the front of the list that is fully sorted\n\n![](/assets/images/2022-02-16-11-33-57.png)\n\nSelection sort performs best with random inputs, and is less efficient with partially sorted inputs.\n\n## Steps\n1. Find the smallest element in the data, starting at position `i`\n2. Swap it with the position `i`\n3. Repeat for all of `n` (elements in the list)\n\n## Implementation\n(assuming `less` and `exh` defined)\n```java\npublic static void selectionSort(Comparable[] array) {\n    for (int i = 0; i < array.length; i++) {\n        // exchange array[i] with the smallest entry in array[i + 1...array.length]\n        int min = i;\n        for (int j = i + 1; j < array.length; j++)\n            if (less(array[j], array[min]))\n                min = j;\n        exch(array, i, min);\n    }\n}\n```\n## Big-Oh\n### Worst-case-scenario\n$$\nO(n^2)\n$$\n### Best-case-screnario\n$$\n\\Omega(n)\n$$","n":0.086}}},{"i":12,"$":{"0":{"v":"Radix Sort","n":0.707},"1":{"v":"\nSorting algorithm that requires integers. Also known as Bucket Sort or Digital sort.\n\n## Big-Oh","n":0.267}}},{"i":13,"$":{"0":{"v":"Priority Queue","n":0.707},"1":{"v":"\n- Until now, we have been concerned with the idea of transforming an entire collection of elements into a sorted order\n- However, we don't always need all the information that a sort finds\n- Sometimes we are only interested in finding the smallest or largest element in a collection\n- The priority queue is a data structure that allows us to do this in $O(n\\log{n})$ time\n\n## Sample problem\n\n- Imagine a very large list of data elements, and we want to know what the `M` largest elements are\n- Since the list is very large, we don't want to sort the entire list\n- We could also try comparing each element to the elements already seen, but this gives us a $O(Mn)$ algorithm\n\n## Key concepts\n\n- The basic idea of a priority queue is to provide two methods:\n    - `insert`: add an element to the queue\n    - `delMax`: remove the element with the highest priority\n\n## Implementation- laziness vs eagerness\n\n- In the context of sorting, we can think about implementing a priority queue in either **insert** or **delete**\n    - We could be *lazy*, and only find the maximum of the data for each **delete**\n        - In a lazy implementation, `insert` is $O(1)$ and `delMax` is $O(n)$\n    - We could be *eager*, and maintain a sorted list of the data for each **insert**\n        - In an eager implementation, `insert` is $O(n)$ and `delMax` is $O(1)$\n    - The disadvantage of both of these is they still run in $O(n)$ time\n\n## API\n\n```java\npublic interface MaxPQ<Key extends Comparable<Key>> {\n    /** create a priority queue */\n    MaxPQ();\n    /** create a priority queue of initial size {@code max} */\n    MaxPQ(int max);\n    /** create a priority queue from the keys in {@code a[]} */\n    MaxPQ(Key[] a);\n    /** insert a key into the priorty queue */\n    void insert(Key x);\n    /** return the largest key on the priority queue */\n    Key max();\n    /** delete and return the largest key on the priority queue */\n    Key delMax();\n    /** returns {@code true} if the priority queue is empty */\n    boolean isEmpty();\n    /** returns the number of keys on the priority queue */\n    int size();\n}\n```\n\n## API sample client\n\n```java\npublic class TopM {\n    public static void main(String[] args) {\n        // print the top 'M' lines in the input stream\n        int M = Integer.parseInt(args[0]);\n        MinPQ<Transaction> pq = new MinPQ<Transaction>();\n        while (StdIn.hasNextLine()) {\n            // create an entry from the next line and put on the PQ\n            pq.insert(new Transaction(StdIn.readLine()));\n            if (pq.size() > M) {\n                // remove the smallest item from the PQ\n                pq.delMin();\n            }\n        }\n        Stack<Transaction> stack = new Stack<Transaction>();\n        while (!pq.isEmpty())\n            stack.push(pq.delMin());\n        for (Transaction t : stack)\n            StdOut.println(t);\n    }\n}\n```\n\n## Heap implementation\n\n- The ideal implementation of a priority queue is a [[ser222.heap]]\n    - This enables $O(n\\log{n})$ time for `insert` and `delMax`\n- Although a priority queue is structured as an array, it can be represented as a binary tree\n    - ![](/assets/images/2022-03-02-11-31-13.png)\n    - For some node $k$:\n        - $p=\\lfloor\\frac{k}{2}\\rfloor$ is the parent of $k$\n        - $cl=2k$ is the left child of $k$\n        - $cr=2k+1$ is the right child of $k$\n- We can use [[Sink|ser222.heap#Sink]] and [[Swim|ser222.heap#Swim]] to implement `insert` and `delMax`\n\n```java\npublic void insert(Key v) {\n    pq[++N] = v;\n    swim(N);\n}\n```\n\n```java\npublic Key delMax() {\n    Key max = pq[1];\n    exch(1, N--);\n    pq[N + 1] = null;\n    sink(1);\n    return max;\n}\n```\n\n- This makes the final code look something like [[this|ser222.sorting.priority-queue.final-code]]\n\n## Heap sorts\n\n- The simplest way to sort an array with a priority queue is to insert all the elements ($n\\log{n}$), and then list them out ($n\\log{n}$)\n- The other way is to do it in place, treating the array as a priority queue, and fixing tree issues one layer at a time\n    - Then, taking out the largest elements and putting them in the final position\n\n```java\npublic void sort(Comparable[] a) {\n    int N = a.length;\n    for (int k = N / 2; k >= 1; k--)\n        sink(a, k, N);\n        while (N > 1) {\n            exch(a, 1, N--);\n            sink(a, 1, N);\n        }\n}\n```","n":0.04}}},{"i":14,"$":{"0":{"v":"Final Code","n":0.707},"1":{"v":"\n```java\npublic class MaxPQ<Key extends Comparable<Key>> {\n    private Key[] pq;\n    private int N = 0;\n\n    public MaxPQ(int max) {\n        pq = (Key[]) new Comparable[max + 1];\n    }\n\n    public boolean isEmpty() {\n        return N == 0;\n    }\n\n    public int size() {\n        return N;\n    }\n\n    public void insert(Key v) {\n        pq[++N] = v;\n        swim(N);\n    }\n\n    public Key delMax() {\n        Key max = pq[1];\n        exch(1, N--);\n        pq[N + 1] = null;\n        sink(1);\n        return max;\n    }\n\n    private void swim(int k) {\n        while (k > 1 && less(k / 2, k)) {\n            exch(k, k / 2);\n            k = k / 2;\n        }\n    }\n\n    private void sink(int k) {\n        while (2 * k <= N) {\n            int j = 2 * k;\n            if (j < N && less(j, j + 1)) j++;\n            if (!less(k, j)) break;\n            exch(k, j);\n            k = j;\n        }\n    }\n\n    private boolean less(int i, int j) {\n        return pq[i].compareTo(pq[j]) < 0;\n    }\n\n    private void exch(int i, int j) {\n        Key t = pq[i];\n        pq[i] = pq[j];\n        pq[j] = t;\n    }\n}\n```","n":0.078}}},{"i":15,"$":{"0":{"v":"Merge Sort","n":0.707},"1":{"v":"\n## The algorithm\n\n- Realistically, you would not use algorithms like [[ser222.sorting.selection-sort]] or other $O(n^2)$\n- [[ser222.sorting.insertion-sort]] still has some benefits, but is not widely used\n\n### Divide-and-conquer algorithms\n\n- In a divide-and-conquer, an algorithm is designed to divide a problem into a set of sub-problems, repeating until a trivial problem emerges, and then combine the results of the sub-problems to give a solution to the original problem\n- This often gives an algorithm's complexity $\\log{n}$- this represents the performing a reduction on the input size\n\n## The concept\n\n- Take an array, then split it into halves\n- Sort each of the halves (using recursion (though you don't have to))\n- Combine the sorted halves to form a sorted whole\n\n![](/assets/images/2022-02-23-10-47-37.png)\n\n## Implementation\n\n```java\npublic static void mergeSort(Comparable[] array) {\n    Comparable[] aux = new comparable[array.length];\n    sort(a, aux, 0, a.length - 1);\n\n    assert isSorted(a);\n}\n\nprivate static void mergeSort(Comparable[] array, Comparable[] aux, int lo, int hi) {\n    if (hi <= lo)\n        return;\n    \n    int mid = lo + (hi - lo) / 2;\n    \n    sort(a, aux, lo, mid);\n    sort(a, aux, mid + 1, hi);\n    merge(a, aux, lo, mid, hi);\n}\n\npublic static void merge(Comparable[] array, Comparable[] aux, int lo, int mid, int hi) {\n    assert isSorted(array, lo, mid);\n    assert isSorted(array, mid + 1, hi);\n\n    // pointer for 'array'\n    int i = lo;\n    // pointer for 'aux'\n    int j = mid + 1;\n\n    // copy both sections of 'array' to 'aux'\n    for (int k = lo; k <= hi; k++)\n        aux[k] = array[k];\n    \n    // combine & sort the two sections\n    /*\n       if (section1[i] < section2[j]) {\n           combined.push(section2[j])\n           j++\n       } else {\n           combined.push(section1[i])\n           i++\n       }\n       (rest of checks to ensure 'i' and 'j' are\n       within the bounds of the arrays)\n    */\n    for (int k = lo; k <= hi; k++) {\n        if (i > mid)\n            array[k] = aux[j++];\n        else if (j > hi)\n            array[k] = aux[i++];\n        else if (less(aux[j], aux[i]))\n            array[k] = aux[j++];\n        else\n            array[k] = aux[i++];\n    }\n\n    assert isSorted(a, lo, hi);\n}\n```\n\n## Compared to [[ser222.sorting.insertion-sort]]\n\n(measurements are not representative of real-world performance, just to provide a sense of scale, insertion sort in particular isn't nearly that bad on modern hardware)\n\n### Insertion sort\n\n| computer | thousand | million   | billion   |\n| -------- | -------- | --------- | --------- |\n| home     | instant  | 2.8 hours | 317 years |\n| super    | instant  | 1 second  | 1 week    |\n\n### Merge sort\n\n| computer | thousand | million  | billion |\n| -------- | -------- | -------- | ------- |\n| home     | instant  | 1 second | 18 min  |\n| super    | instant  | instant  | instant |\n\n## Proving claim\n\n> \"Top-down mergesort uses between $\\frac12n\\log(n)$ and $n\\log{n}$ compares to sort any array of length $N$\"\n\n- Proof via direct construction:\n    - Let $C(n)$ represent the number of comparisons for an input of $n$ elements\n\n### Proof formulation\n\n- Write recurrence for $C(n)$\n    - $C(0)=0$ (loop in merge doesn't run)\n    - $C(1)=0$ (2nd branch only in merge)\n    - Our recurrence is then\n\n$$\nC(n) = \\begin{cases}\n    0 &\\text{if }n=0\\text{ or }n=1 \\\\\n    C(|\\frac{n}{2}|)+C(|\\frac{n}{2}|)+n\n\\end{cases}\n$$\n\n- Let $n$ look like a power of two\n    - Since $n=2^k$ and $\\log{n}=k$...\n\n$$\nC(n)=n\\log{n}\n$$\n\n## Conclusion\n\nUsing [[ser222.sorting#Decision-trees]], we can prove that merge sort is an asymptotically optimal algorithm for sorting. As long as compares are the optimal way to sort, one cannot build any computer or write any algorithm to do general sorting in less than $n\\log{n}$ time.","n":0.043}}},{"i":16,"$":{"0":{"v":"Insertion Sort","n":0.707},"1":{"v":"\nInsertion Sort works by creating a sorted, but not final section up to the position `j` in an array. Unlike [[ser222.sorting.selection-sort]], Insertion Sort has a best-case-scenario of $\\Omega(n)$ sorting time.\n\n![](/assets/images/2022-02-16-11-45-04.png)\n\nInsertion sort performs best with partially sorted inputs, and worst with reversed inputs.\n\nOne of the \"benefits\" of insertion sort is that the sorted region is always 1 or greater elements- even before the algorithm starts.1\n## Steps\n1. Pick some element at position `j`\n2. Insert the element into the sorted position in the sorted region\n3. Repeat for all elements in the list\n\n## Implementation\n```java\npublic static void sort(Comparable[] array) {\n    for (int i = 1; i < array.length; i++)\n        for (int j = i; j > 0 && less(array[j], array[j-1]); j--)\n            exch(array, j, j - 1);\n}\n```\n## Big-Oh\nWorst-case-scenario:\n$$\nO(N^2)\n$$\nBest-case-scenario:\n$$\n\\Omega(n)\n$$","n":0.091}}},{"i":17,"$":{"0":{"v":"Counting Sort","n":0.707}}},{"i":18,"$":{"0":{"v":"Comparable","n":1},"1":{"v":"\n- Normally, numbers are compared using `<`, `>`, and `==`\n    - However, we need to extend this to objects\n- Java supports a `Comparable` interface which defines a method called `compareTo`\n    - `compareTo` returns\n        - `-1` if `v` is less than `w` in `compareTo(v, w)`\n        - `0` if `v` is equal to `w` in `compareTo(v, w)`\n        - `1` if `v` is greater than `w` in `compareTo(v, w)`\n- Should throw exception if wrong types used\n    - May also throw error if `null` passed as argument\n\n```java\npublic class Date implements Comparable<Date> { \n    private final int month, day, year;\n    public Date(int m, int d, int y) {\n        month = m;\n        day = d;\n        year = y;\n    }\n    @Override\n    public int compareTo(Date that) {\n        if (that.getClass() != this.getClass())\n            throw new ClassCastException();\n        if (this.year < that.year)\n            return -1;\n        if (this.year > that.year)\n            return 1;\n        if (this.month < that.month)\n            return -1;\n        if (this.month > that.month)\n            return 1;\n        if (this.day < that.day)\n            return -1;\n        if (this.day > that.day)\n            return 1;\n        return 0;\n    }\n}\n```","n":0.078}}},{"i":19,"$":{"0":{"v":"Bogo Sort","n":0.707},"1":{"v":"\nA sorting algorithm that works by randomizing the input until a sorted result is received. This has the distinct \"advantage\" of not needing to compare individual elements, just determine whether the elements are sorted.\n## Big-Oh\n$O(!n)$","n":0.169}}},{"i":20,"$":{"0":{"v":"Reference Counting","n":0.707},"1":{"v":"\nA garbage collection method that involves storing the number of references to each object.\n\nEvery time a reference to an object is dumped from the stack, the reference count is decremented. When the reference count reaches zero, the object can be safely garbage collected.\n\nLikewise, when a reference to an object is loaded into the stack, the reference count is incremented.\n\nThis is a much more performant alternative to [[ser222.directed-graphs.problems.directed-search]], but does not handle objects linked to each other outside the stack, which has to be handled separately in languages where this situation can occur.","n":0.104}}},{"i":21,"$":{"0":{"v":"Recursion","n":1},"1":{"v":"\nA method of solving a problem where the solution depends on solutions to smaller instances of the same problem.\n\n4 Steps:\n1. Identify size `n` problem\n2. Identify terminating step<s\\>\n3. Solve size `m` problem (`m < n`)\n\n```TypeScript\nfunction factorial(n: number) {\n    if (n == 0)\n        return 1;\n    else\n        return factorial(n - 1) * n;\n}\n\nconsole.log(factorial(5)); // 120\n```","n":0.139}}},{"i":22,"$":{"0":{"v":"Performance Evaluation","n":0.707},"1":{"v":"\n```Java\n...\n    public boolean isEmpty() { // [1]\n        return n == 0;\n    }\n    public Item pop() { // [2]\n        if (isEmpty())\n            throw new ...\n        return data[--n];\n    }\n    public void push(Item item) { // [3]\n        if (data.length == n)\n            resize(); // doubles the size of the array\n        data[n++] = item;\n    }\n    private void resize() {\n        data = Arrays.copyOf(data, data.length * 2);\n    }\n...\n```\n1. What is the Big-Oh of `isEmpty()`?\n    - `O(1)`\n2. What is the Big-Oh of `pop()`?\n    - `O(1)`\n3. What is the Big-Oh of `push()`?\n    - `O(n)`, because the worst case involve array resizing (which performs a deep copy of the array)\n\nWhat if we wanted to implement a `push()` and `pop()` that are both `O(1)`? We need a new data structure such as a [[ser222.linked-list]].","n":0.091}}},{"i":23,"$":{"0":{"v":"Node","n":1},"1":{"v":"Nodes are simple data structures that store the next node in a [[ser222.linked-list]] and some values. There are a variety of node types...\n\n## Minimalistic\n```Java\nclass Node<T> {\n    Item element;\n    Node next;\n}\n```\nThis is generally considered to be ideal as generics are more flexible.\n## OOP\n```Java\nclass Node {\n    Node next;\n}\n\nclass PersonNode extends Node {\n    String name;\n    int phone[30];\n    String email;\n}\n```\n## Monolithic\n```Java\nclass PersonNode {\n    Node next;\n    String name;\n    int phone[30];\n    String email;\n}\n```","n":0.122}}},{"i":24,"$":{"0":{"v":"Linked List","n":0.707},"1":{"v":"\nAn array made up of [[nodes|ser222.node]] that store a value and the next element. This can easily be expanded upon but comes at a cost of access times.\n```Java\nvar list = new LinkedList<int>();\nlist.add(13); // O(1)\nlist.getSize(); // O(n) unless size is cached\nlist.remove(0); // O(1)\nlist.add(12);\nlist.get(0); // O(n)\n```\n## Structure\n```mermaid\nflowchart LR\nn0[Node] --> n1[Node]\nn1 --> n2[Node]\n```\nLinked Lists are made up of \"links\" of [[nodes|ser222.node]] that point to each-other. This makes access times `O(n)`, as a Linked List will only store the head of the list.\n```Java\ninterface LinkedList<T> extends Collection<T> {\n    Node<T> head;\n    void addFirst(T element);\n    void addLast(T element);\n    T removeFirst(T element);\n    T removeLast(T element);\n    T getFirst(T element);\n    T getLast(T element);\n}\n```\nThe [[Double-Linked List|ser222.double-linked-list]] uses [[nodes|ser222.node]] that reference both the `next` and `previous` [[nodes|ser222.node]] and have faster access times `O(1)` for the first elements of the list.\n\n## Resizing\nAs mentioned before, Linked Lists have the advantage of `O(1)` resizing, making them ideal for use in [[stacks|ser222.stack]].","n":0.083}}},{"i":25,"$":{"0":{"v":"Java (abridged)","n":0.707},"1":{"v":"\nJava is a class-based, OO (Object-Oriented) language.\n\n## Classes\nEverything in Java is wrapped by a class...\n```Java\npublic class App {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n...including the code necescarry for a \"Hello World!\" print to console.\n\nThere can only be one public class for file (public means the class is exported and can be imported by other files), but there can be as many private classes in a file as necessary.\n```Java\npublic class App { ... }\n\nclass Other { ... }\nclass Another { ... }\n```\nFields and methods can be either public or private and either static or non-static.\n\nPublic fields are accessible from outside the class/object\n```Java\nvar myObject = new ClassName();\nmyObject.method();\nSystem.out.println(myObject.field);\n```\n, whereas private fields are only accessible from within the object;\n```Java\nclass ClassName {\n    private int field;\n    public ClassName(int field) {\n        this.field = field;\n    }\n}\n```\nSimilarly (but also very differently), static fields an methods are only accessible on the base class and not any objects and vice-versa for non-static fields and methods.\n## Variables\nVariables are declared and initialized with the syntax `Type varName = new Type(...);`, assuming the variable is being initialized as an object.\n## References\nThere are no pointer types in Java, however all objects are stored as references. This means otherwise identical objects cannot be compared without specific methods or overloads to do so.\n```Java\nString string0 = \"Hello World!\";\nString string1 = \"Hello World!\";\nSystem.out.println(string0 == string1); // false\n```\n(Unlike other languages, strings are considered objects in Java)","n":0.066}}},{"i":26,"$":{"0":{"v":"Object","n":1},"1":{"v":"\nAll objects in Java are subclasses of the `Object` class and inherit methods and fields such as...\n```Java\n// Checks for equality between objects\n// Must account for 'null'\n// Must check class type\npublic boolean equals(Object obj)\n```\n```Java\n// String representation of an object\npublic String toString()\n```\n```Java\n// Returns (generally unique) number representing the object\n// Generally used to compare the object's internal state\npublic int hashCode()\n```\n```Java\n// Returns a deep copy of the object\nprotected Object clone() throws CloneNotSupportedException\n```","n":0.121}}},{"i":27,"$":{"0":{"v":"Interface","n":1},"1":{"v":"\nA list of methods that an implementing class must define.\n\n```Java\npublic interface Foo {\n    int Bar;\n    Foo FooBar(int Bar);\n}\n","n":0.236}}},{"i":28,"$":{"0":{"v":"Iterator","n":1},"1":{"v":"\nPresents elements from a collection one at a time while hiding how elements are concretely stored.\n## Interface\n```Java\npublic interface Iterator<T> {\n    boolean hasNext(); // true if other element\n    T next();          // returns next element\n    void remove();     // removes current element\n}\n```\nIterators inherently are mutable.\n\n## Implementation\nSuppose we wanted to support...\n```Java\nfor (var i : someStack)\n    System.out.printf(\"element: %d\\n\", i);\n\nIterator iter = someStack.iterator();\nwhile (!someStack.isEmpty())\n    someStack.pop();\nwhile (iter.hasNext())\n    System.out.printf(\"element: %d\\n\", iter.next());\n```\nWe would have to implement the [[Iterator interface|ser222.iterator#interface]].\n```Java\npublic class Stack<T> implements Iterable<T> {\n    ...\n    private Iterable<T> iterator() {\n        return new ReverseArrayIterator();\n    }\n    private class ReverseArrayIterator implements Iterator<T> {\n        private int i = n;\n        public boolean hasNext() { return i > 0; }\n        public Item next() { return data[--i]; } // [1]\n        public void remove() {} // [2]\n    }\n}\n```\n1. Is this valid?\n    - Assuming `data` is an array, this would be invalid as `data[-1]` could either throw an error or return an unknown value depending on the language.\n2. Why is this blank?\n    - Removing data from a fixed-length array is not possible. At most, the index could be set to `null` assuming it was an object array (stored only pointers).","n":0.074}}},{"i":29,"$":{"0":{"v":"Immutability","n":1},"1":{"v":"\nImmutability is an OO concept where the internal state of objects cannot change after instantiation (all fields are final). Performing any operations on the object will simply return a new object that reflects the changes.\n\n## Pros:\n- Reduces undefined behavior in programs\n- Eliminates the possibility of accidentally modifying objects being used somewhere else\n## Cons:\n- Can significantly increase memory usage\n- Comes at a performance cost in heavy tasks as the garbage collector may have to work harder\n\n```TypeScript\nclass Number {\n    constructor(public n: number) {}\n    add(n: Number) {\n        return new Number(this.n + n.n)\n    }\n}\n```","n":0.105}}},{"i":30,"$":{"0":{"v":"Heap","n":1},"1":{"v":"\n- A heap is a data structure that is a complete [[ser222.binary-tree]]\n- A binary tree is *heap-ordered* if each node is larger than or equal to the keys in its left and right subtrees\n- This means the largest element is always at the root of the tree in a max heap\n    - This can be reversed for a min heap\n\n**This assumes that the heap is a max heap.**\n\n## Array mapping\n\n- Although the tree could be represented as a linked structure, we can use an array to represent the tree\n    - This makes it easier to implement the heap operations\n- A complete binary tree is one where every level is full except for the last level\n- This will make accessing other nodes fast\n\n## Heap operations\n\n### Swim\n\n- Suppose we insert a new element `k` into the heap\n    - This element could be larger than its parent\n- We need to \"swim\" the element up to its correct position\n\n```java\nprivate void swim(int k) {\n    while (k > 1 && less(k / 2, k)) {\n        exch(k, k / 2);\n        k = k / 2;\n    }\n}\n```\n\n### Sink\n\n- Suppose we insert a new element 'k' into the heap\n    - This element could be smaller than its children\n- We need to \"sink\" the element down to its correct position\n\n```java\nprivate void sink(int k) {\n    while (2 * k <= N) {\n        int j = 2 * k;\n        if (j < N && less(j, j + 1)) j++;\n        if (!less(k, j)) break;\n        exch(k, j);\n        k = j;\n    }\n}\n```","n":0.064}}},{"i":31,"$":{"0":{"v":"Hash Table","n":0.707},"1":{"v":"\n- Previously, symbol tables implemented as binary search trees\n- These binary search trees had $O(\\log n)$ lookups\n- Instead of mapping a binary tree to an array, we can use a *hash table* to map a key to an array index directly\n    - Hash tables work by passing a key to a **hash function** that maps the key to an array index\n\n## Hash functions\n\n- Say we want to store a key in an array with $M$ indices\n    - There will be $n$ elements in the array\n- The hash should encode the identity of a key\n- We need to produce hashes in the range $[0, M-1]$ that are uniformily distributed\n- There is a time and space tradeoff\n    - If $M$ is larger, then we use more space but get $O(1)$ lookups\n    - If $n$ is larger, then we use less space but get $O(n)$ lookups\n\n## Hashing values\n\n- If `k` is a positive integer within the bounds, it can simply be hashed as itself\n    - Otherwise, a modulo operation can be used, e.g. `k % M`\n- If `k` is a floating point number, it can be hashed as `round(k * M)`\n- If `k` is a string, it can be hashed by adding the ASCII values of each character in the string\n    - This is a very simple hash function, and is only effective for small strings\n- If `k` is some other type, it can be hashed by mixing up a combination of the memory address, type, and other characteristics of `k`\n    - In Java, this can be provided by the `Object.hashCode()` method\n\n## Requirements for a good hash functions\n\n- Hash functions should produce values that are...\n    - Consistent\n    - Efficient to compute (no more than $O(n)$)\n    - Uniformly distributed\n\n## Separate chaining\n\n- Hash functions should rarely produce collisions, but if they do, there are many ways to resolve them\n- The most common way to resolve collisions is called **chaining**\n    - Chaining is a technique where multiple values can be stored at an array index\n    - Some kind of linked list or tree structure is used to store the values and original keys\n    - When attempting to access a value with collision, the collection is traversed (generally via [[ser222.hash-table.linear-probing]]) until the key is found\n    - If using linked lists, the first value will retain $O(1)$ lookups, making it ideal for most cases\n    - ![](/assets/images/2022-04-04-10-55-37.png)\n\n## Chaining implementation\n\n- Hash\n    - Mask out the sign bit\n    - Apply a module operation to the result\n    - ```python\n    def hash(key: int, m: int) -> int:\n        return abs(key) % (m - 1) # can also be done using '(key & 0x7fffffff) % (m - 1)'\n    ```\n- Get\n    - Gets an element to the collection by hashing the key\n    - ```python\n    def get(key: int, array: List[Any]) -> Any:\n        values = array[hash(key, len(array))]\n        values.get(key)\n    ``` \n- Put\n    - Similar to get, but instead of returning the value, the value is added to the collection\n    - ```python\n    def put(key: int, array: List[Any]) -> None:\n        values = array[hash(key, len(array))]\n        values.put(key, value)\n    ```\n\n## Performance\n\n- Hash tables should have a performance of\n    - $~N/2M$ search operations\n    - $~N/M$ insert operations\n- Hash tables can have $\\Omega(1)$ search and inserts assuming no collisions","n":0.044}}},{"i":32,"$":{"0":{"v":"Linear Probing","n":0.707},"1":{"v":"\n- Suppose there was an array of size `M`, where `M` is at least as big as `n`\n- At each position, there is a key-value pair\n- When inserting or searching an element, a hash function is used to map the key to an array index\n- If that index is empty, use it, otherwise, keep looking for an empty index\n- Essentially, instead of storing the key-value pairs in linked lists, we directly store all key-value pairs in the array\n    - This works best for ordered data, but can be used for unordered data as well\n- The main cost of linear probing is that inserts are $O(n)$ due to the need to resize the array when it is full rather than relying on the $O(1)$ inserts of linked lists","n":0.089}}},{"i":33,"$":{"0":{"v":"Empirical Analysis","n":0.707},"1":{"v":"## In a nutshell\n```Java\nint pool = new int[n];\nfor (int i = 0; i < pool.length; i++)\n    pool[i] = random.nextInt(100);\n```\nRun on 10 elements: 20 sec.\n\nRun on 20 elements: 40 sec.\n\n$$\nf(n)\\approxeq2n\n$$\nProvides an approximate solution that's good enough for analyzing\n^main\n## Empirical process\n1. Benchmark the runtime of the application\n2. Construct a mathematical model (e.g. regression)\n3. Use the model to predict results\n4. Validate model against results\n```mermaid\nflowchart TD\n    Benchmark\n    Benchmark --> Model\n    Model --> Predict\n    Predict --> Validate{Validate}\n    Benchmark --> Benchmark\n    Validate --> Benchmark\n```\n## Benchmarking example\nThe threesum problem\n```Java\n//Sedgewick and Wayne\npublic static int threeSum(int[] a) {\n    int N = a.length;\n    int count = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = i+1; j < N; j++) \n            for (int k = j+1; k < N; k++)\n                if (a[i] + a[j] + a[k] == 0)  \n                    count++;\n    return count;\n}\n```\n(A brute force technique to check for triples that sum to zero in an input list)\n- Looks like $O(n^3)$ because of the 3 for-loops\n- Stopwatch is a simple way to benchmark in Java\n    - ```Java\n      int[] a = {23, 32, 5, 103, 12, 10, ...};\n      Stopwatch stopwatch = new Stopwatch();\n      System.out.println(ThreeSum.count(a));\n      double time = stopwatch.elapsedTime();\n      System.out.println(\"elapsed \" + time);\n      ```\n- To benchmark, run the program multiple times, use the correct input sizes, and aggregate results to create a growth function\n- ![](/assets/images/2022-01-31-10-40-46.png)\n## Is an empirical growth function good enough?\n- It is useful as it can be performed without access to source code\n- Results are limited to only a specific context\n- Performance may not be repeatable on the same system\n","n":0.063}}},{"i":34,"$":{"0":{"v":"Directed Graphs","n":0.707},"1":{"v":"\n- Essentially [[ser222.undirected-graphs]], but with edges that have a clearly defined direction\n    - ![](/assets/images/2022-04-20-10-35-02.png)\n- Interestingly, these can be used for things like crafting recipes in games, where materials have to exist in a certain order relative to each other\n    - ![](/assets/images/2022-04-20-11-19-37.png)\n\n## Terminology\n\n- `V` is a **Direct Predecessor** of `W` if there is a path/edge from `V` to `W`\n- `V` is a **Direct Successor** of `W` if there is a path/edge from `W` to `V`\n- `V` is a **Predecessor** of `W` if `V` is a direct predecessor of `W` or a predecessor of a direct predecessor of `W`\n- `V` is a **Successor** of `W` if `V` is a direct successor of `W` or a successor of a direct successor of `W`\n\n## Directed graph ADT\n\n```java\npublic interface Diagraph {\n    int V(); // number of vertices\n    int E(); // number of edges\n    void addEdge(int v, int w); // add edge v->w\n    Iterable<Integer> adj(int v); // vertices connected to v from edges v->x\n    Digraph reverse(); // reverse of digraph\n    String toString(); // string representation of digraph\n}\n```\n\n## Implementation\n\n```java\npublic class DigraphImplementation implements Digraph {\n    private final int V;\n    private int E;\n    private LinkedList<Integer>[] adj;\n\n    /**\n     * Initializes an empty digraph with `V` vertices.\n     * @param V the number of vertices\n     */\n    public Digraph(int V) {\n        this.V = V;\n        this.E = 0;\n        adj = (LinkedList<Integer>[]) new LinkedList[V];\n        for (int v = 0; v < V; v++)\n            adj[v] = new LinkedList<Integer>();\n    }\n\n    /**\n     * Reads a digraph from an input stream.\n     * @param in the input stream\n     */\n    public Digraph(In in) {\n        this(in.readInt());\n        int E = in.readInt();\n        for (int i = 0; i < E; i++) {\n            int v = in.readInt();\n            int w = in.readInt();\n            addEdge(v, w);\n        }\n    }\n\n    /**\n     * Returns the number of vertices in the digraph.\n     * @return the number of vertices in the digraph\n     */\n    public int V() {\n        return V;\n    }\n\n    /**\n     * Returns the number of edges in the digraph.\n     * @return the number of edges in the digraph\n     */\n    public int E() {\n        return E;\n    }\n\n    /**\n     * Adds the directed edge v->w to the digraph.\n     * @param v the tail vertex\n     * @param w the head vertex\n     */\n    public void addEdge(int v, int w) {\n        adj[v].add(w);\n        E++;\n    }\n\n    /**\n     * Returns the vertices adjacent from vertex `v` in the digraph.\n     * @param v the vertex\n     * @return the vertices adjacent from vertex `v` in the digraph\n     */\n    public Iterable<Integer> adj(int v) {\n        return adj[v];\n    }\n\n    /**\n     * Returns the reverse of the digraph.\n     * @return the reverse of the digraph\n     */\n    public Digraph reverse() {\n        Digraph r = new DigraphImplementation(V);\n        for (int v = 0; v < V; v++)\n            for (int w : adj(v))\n                r.addEdge(w, v);\n        return r;\n    }\n}\n```\n\n## Problems\n\n- [[ser222.directed-graphs.problems.directed-search]]\n- [[ser222.directed-graphs.problems.scheduling]]\n- [[ser222.directed-graphs.problems.directed-cycle]]\n\n## Sorting\n\n[[Topological Sorting|ser222.directed-graphs.topological-sort]] is a common method to produce ordered graphs.","n":0.047}}},{"i":35,"$":{"0":{"v":"Problems","n":1}}},{"i":36,"$":{"0":{"v":"Scheduling","n":1},"1":{"v":"\nGiven a graph with the vertices `a` pointing to `b`, how can we ensure that when traversing, `a` is always visited before `b`?\n\n![](/assets/images/2022-04-20-11-07-23.png)\n\n## Topological sorts\n\nTo solve this, a graph should be sorted with a [[ser222.directed-graphs.topological-sort]] before traversal.","n":0.164}}},{"i":37,"$":{"0":{"v":"Directed Cycle","n":0.707},"1":{"v":"\n[[ser222.directed-graphs.topological-sort]] is not possible of a graph is cyclic. How can we tell if a graph is cyclic?\n\n## Terminology\n\n- A **Directed Acyclic Graph** (DAG) is a graph without any cycles\n\n## Finding cycles\n\n- Cycles can be found in [[ser222.undirected-graphs]] by marking nodes, and this can be applied to directed graphs\n\n## Implementation\n\n```java\n\npublic DirectedCycle {\n    private boolean[] marked;\n    private int[] edgeTo;\n    private Stack<Integer> cycle;\n    private boolean[] onStack;\n\n    /**\n     * Initializes a new directed cycle.\n     * @param G the digraph\n     */\n    public DirectedCycle(Digraph G) {\n        onStack = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        marked = new boolean[G.V()];\n        for (int v = 0; v < G.V(); v++)\n            if (!marked[v])\n                dfs(G, v);\n    }\n\n    private void dfs(Digraph G, int v) {\n        onStack[v] = true;\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (cycle != null)\n                return;\n            else if (!marked[w]) {\n                edgeTo[w] = v;\n                dfs(G, w);\n            } else if (onStack[w]) {\n                cycle = new Stack<Integer>();\n                for (int x = v; x != w; x = edgeTo[x])\n                    cycle.push(x);\n                cycle.push(w);\n                cycle.push(v);\n            }\n        }\n        onStack[v] = false;\n    }\n\n    /**\n     * Detects whether the digraph has a directed cycle.\n     * @return {@code true} if the digraph has a directed cycle, {@code false} otherwise\n     */\n    public boolean hasCycle() {\n        return cycle != null;\n    }\n\n    /**\n     * If possible, finds the vertices on a directed cycle.\n     * @return the vertices on a directed cycle as an {@link Iterable}, or {@code null} if there is no such cycle\n     */\n    public Iterable<Integer> cycle() {\n        return cycle;\n    }\n}\n```","n":0.064}}},{"i":38,"$":{"0":{"v":"Topological Sort","n":0.707},"1":{"v":"\nAn ordered list of vertices in a graph such that all dependencies are listed before their dependent.\n\n![](/assets/images/2022-04-20-11-12-00.png)\n\nThis is **not** possible if there is a cyclic graph, which causes the [[ser222.directed-graphs.problems.directed-cycle]] problem.\n\n## Order class\n\n```java\npublic class DepthFirstOrder {\n    private boolean[] marked;\n    private Queue<Integer> pre;\n    private Stack<Integer> reversePost;\n\n    public DepthFirstOrder(Digraph G) {\n        pre = new Queue<Integer>();\n        reversePost = new Stack<Integer>();\n        marked = new boolean[G.V()];\n        for (int v = 0; v < G.V(); v++)\n            if (!marked[v]) dfs(G, v);\n    }\n\n    private void dfs(Digraph G, int v) {\n        marked[v] = true;\n        for (int w : G.adj(v))\n            if (!marked[w]) dfs(G, w);\n        pre.enqueue(v);\n        reversePost.push(v);\n    }\n\n    public Iterable<Integer> reversePost() {\n        return reversePost;\n    }\n}\n```\n\n## Post-order example\n\n```mermaid\nflowchart LR\n    1 --> 0\n    1 --> 4\n    1 --> 2\n    3 --> 0\n    3 --> 1\n    3 --> 4\n    4 --> 2\n```\n\n- `DFS(3)`\n    - `DFS(0)`\n    - `DFS(1)`\n        - `DFS(2)`\n        - `DFS(4)`\n\nPreorder: 3, 0, 1, 2, 4\n\nPostorder: 0, 2, 4, 1, 3\n\nReverse post: 3, 1, 4, 2, 0\n\n## Topological class\n\n```java\npublic Topological {\n    private Iterable<Integer> order;\n\n    public Topological(Digraph G) {\n        DirectedCycle finder = new DirectedCycle(G);\n        if (!finder.hasCycle()) {\n            DepthFirstOrder dfs = new DepthFirstOrder(G);\n            order = dfs.reversePost();\n        }\n    }\n\n    public Iterable<Integer> order() {\n        return order;\n    }\n\n    public boolean isDAG() {\n        return order == null;\n    }\n}","n":0.071}}},{"i":39,"$":{"0":{"v":"Data Structure","n":0.707},"1":{"v":"\nA way of organizing data so that it can be used effectively.\n\nE.g. arrays, maps, sets, etc.","n":0.25}}},{"i":40,"$":{"0":{"v":"Data Abstraction","n":0.707}}},{"i":41,"$":{"0":{"v":"Objects","n":1},"1":{"v":"\n## Object-Oriented Programming\n- Classes are a framework for creating objects that defines the data and behavior they contain\n- Classes are instanced to create objects\n- Objects are characterized by...\n    - State\n    - Behavior\n    - Identity\n## Reference Representation\n- When a variable is created, it will store the data that represents the number\n- In contrast, *object* variables do not contain the data representing the object, just a reference to the object\n- Hence, object values are always references\n```Java\nint value = 5;\nCounter c1 = new Counter(\"First\");\n```\n(very simplified)\n\n0x00|...\n|-|-|\n0x01|5\n0x02|0x04\n0x02|0x04\n0x03|...\n0x04|\"First\n0x05|0\n## Counter Class\n```Java\n//from Sedgewick and Wayne\npublic class Counter {\n    private final String name; // counter name\n    private int count = 0; // current value\n    public Counter(String id) {\n        name = id;\n    }\n    public void increment() {\n        count++;\n    }\n    public int tally() {\n        return count;\n    }\n    public String toString() {\n        return count + \" \" + name;\n    }\n}\n```\n## \"Common\" Methods\n- All classes in Java are a subclass of `Object`\n- `Object` contains several methods (such as toString) that can be overwridden to give a tighter integration with existing functionality\n","n":0.077}}},{"i":42,"$":{"0":{"v":"Abstract Data Types","n":0.577},"1":{"v":"## Overview\n- Abstract data type (ADT): a datatype that is represented in terms\nof operations, and whose internal representation is hidden.\n- Naturally defined by objects â but adds emphasis on abstraction.\n- A user of an ADT is meant to be isolated from its implementation\n(e.g., internal presentation). They should care only for the\nbehavior that is exposed (via an API).\n## Dynamic View\n- Rather than relying on a class/object view, ADTs can be represented in terms of operations happening over types\n    - add: Point2D â¨¯ Point2D â Point2D\n    - subtract: Point2D â¨¯ Point2D â Point2D\n    - getX: Point2D â double\n    - getDistance: Point2D â¨¯ Point2D â double\n    - equal: Point2D â¨¯ Point2D â boolean\n- ADTs have two basic operations\n    - Transformations\n    - Information exstraction\n## Usage\nSince ADTs are implemented using classes, they use all operations allowed for classes, e.g.\n- Creation `LinkedStack stack = new LinkedStack();`\n- Invocation `stack.push(5);`\n- Copy Behavior `=`\n## ADTs VS Classes\n- ADTs are differnet from classes because of abstraction\n    - An ADT does not expose internal representations\n    - Classes have no such restrictions\n    - Purely a design difference (not enforced by syntax)\n- ADTs are **not** abstract classes\n","n":0.074}}},{"i":43,"$":{"0":{"v":"Implementing ADTs","n":0.707},"1":{"v":"## [[Common Object Methods|ser222.java.object]]\n```Java\n//from Sedgewick and Wayne\n@Override\npublic boolean equals(Object o) {\n    if (o == null) return false;\n    if (o.getClass() != this.getClass())\n    return false;\nPoint2D p = (Point2D) o;\n    return this.x() == p.x() &&\n        this.y() == p.y();\n}\n@Override\npublic String toString() {\n    return \"(\" + x + \", \" + y + \")\";\n}\n```\n## [[ser222.java.interface]]\n### Benefits\n- Isolate implementation from functionality\n- Can use before implementation is complete\n- No need to expose code\n```Java\npublic interface IncrementCounter {\n    //Increments the counter by one.\n    void increment();\n    //Returns the increments since creation.\n    int tally();\n    //Returns a string representation.\n    String toString();\n}\n```\n## [[ser222.immutability]]\n- Since ADTs are implemented as objects,\nthey are stored by Java as references.\n- This means they are subject to the\nreferential issues outlined earlier.\n- A solution: a datatype is said to be\nimmutable when its state cannot change\nafter its creation.\n- Generally: make member variables final\nand do not provide mutator methods.\n- Be careful with objects (arrays!) â they\nare reference types.\n```Java\n//from Sedgewick and Wayne\npublic final class Point2D {\n    private final double x;\n    private final double y;\n    public Point2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n    public double x() {\n        return x;\n    }\n    ...\n```\n## Exceptions\n- Don't generate an ADT with a bad state\n- Throw an exception when given invalid arguments\n```Java\n//from Sedgewick and Wayne\npublic Point2D(double x, double y) {\n    if (Double.isInfinite(x) || Double.isInfinite(y))\n    throw new IllegalArgumentException(\"Coordinates must be finite\");\n    if (Double.isNaN(x) || Double.isNaN(y))\n    throw new IllegalArgumentException(\"Coordinates cannot be NaN\");\n    ...\n```","n":0.066}}},{"i":44,"$":{"0":{"v":"Examples","n":1}}},{"i":45,"$":{"0":{"v":"Transaction","n":1}}},{"i":46,"$":{"0":{"v":"Strings","n":1}}},{"i":47,"$":{"0":{"v":"Point2D","n":1},"1":{"v":"\n## App.java\n```Java\nclass App {\n    public static void main(String[] args) {\n        Point2D p1 = new Point2D(3, 5);\n        Point2D p2 = new Point2D(3, 5);\n        if(p1.equals(p2))\n        System.out.println(\"Dist is 0.\");\n        else\n        System.out.println(\"Dist is \" +\n        p1.distanceTo(p2));\n        System.out.println(p1.x());\n        System.out.println(p2.theta());\n    }\n}\n```\n## Point2D API\n```Java\n//Initializes a new point (x, y).\nPoint2D(double x, double y)\n//Returns the x-coordinate.\ndouble x()\n//Returns the y-coordinate.\ndouble y()\n//Returns the polar radius of this point.\ndouble r()\n//Returns the angle of this point in\npolar coordinates.\ndouble theta()\n//Returns the Euclidean distance between this point and that point.\ndouble distanceTo(Point2D that)\n```\n\n## Point2D Implementation\n(does not matter *how* Point2D is implemented)\n```Java\n//from Sedgewick and Wayne\npublic final class Point2D {\n    private final double x;\n    private final double y;\n    public Point2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n    public double x() {\n        return x;\n    }\n    public double y() {\n        return y;\n    }\n    public double r() {\n        return Math.sqrt(x*x + y*y);\n    }\n    public double theta() {\n        return Math.atan2(y, x);\n    }\n    public double distanceTo(Point2D that) {\n        double dx = this.x - that.x();\n        double dy = this.y - that.y();\n        return Math.sqrt(dx*dx + dy*dy);\n    }\n    @Override\n    public boolean equals(Object other) {\n        if (other == this) return true;\n        if (other == null) return false;\n        if (other.getClass() != this.getClass())\n        return false;\n        Point2D p = (Point2D) other;\n        return this.x() == p.x() &&\n        this.y() == p.y();\n    }\n    @Override\n    public String toString() {\n        return \"(\" + x + \", \" + y + \")\";\n    }\n}\n```","n":0.067}}},{"i":48,"$":{"0":{"v":"Interval2D","n":1},"1":{"v":"\n(google it)","n":0.707}}},{"i":49,"$":{"0":{"v":"Interval1D","n":1},"1":{"v":"\n(google it)","n":0.707}}},{"i":50,"$":{"0":{"v":"Date","n":1}}},{"i":51,"$":{"0":{"v":"Accumilator","n":1}}},{"i":52,"$":{"0":{"v":"Computer Algebra System","n":0.577},"1":{"v":"A computer program capable of performing symbolic algebra, e.g. [Wolfram Alpha](https://www.wolframalpha.com/).","n":0.302}}},{"i":53,"$":{"0":{"v":"Complete Binary Tree","n":0.577},"1":{"v":"\nA completed binary tree is a [[ser222.binary-tree]] where all levels are full except the last, which is filled from left to right.","n":0.213}}},{"i":54,"$":{"0":{"v":"Binary Tree","n":0.707},"1":{"v":"\n- A binary tree is a tree where each node has at most two children.\n    - ![](/assets/images/2022-03-02-11-05-30.png)\n- A binary search tree is a binary tree where each node's left child has a key that is less than the parent, and the right child has a key that is greater than the parent\n    - ![](/assets/images/2022-03-02-11-06-47.png)\n\n## Mapping to an array\n\nAssuming that the tree is complete, we can map the tree to an array by traversing the tree in a breadth-first manner and appending each node's value to the array.\n\n![](/assets/images/2022-03-15-10-20-39.png)\n\nHowever, if the tree is incomplete, we can still map the tree to an array by adding \"null\" values to the array for the missing nodes.\n\n![](/assets/images/2022-03-15-10-24-36.png)\n\nSince the tree is mapped in an array, we can access the value of a node using a numeric index.\n\nGiven a node `i` in the tree...\n\n- The value of the node at index `i` is `tree[i]`.\n- The value of the node's left child is `tree[2 * i]`.\n- The value of the node's right child is `tree[2 * i + 1]`.\n- The value of the node's parent is `tree[Math.floor(i / 2)]`.","n":0.074}}},{"i":55,"$":{"0":{"v":"Binary Search Tree","n":0.577},"1":{"v":"\n## Compared to heaps\n\n- Unlike [[binary trees|ser222.binary-tree]] and [[heaps|ser222.heap]], binary search trees *must* bee complete\n- Binary search trees are more restrictive than heaps\n\n## Concept\n\n- A [[binary tree|ser222.binary-tree]] is a tree where each node has at most two children\n- A binary *search* tree is a binary tree where each node's left child has a key that is less than the parent, and the right child has a key that is greater than the parent\n- ![](/assets/images/2022-03-23-10-48-39.png)\n\n### Recursive definition\n\n- A node is the root of a binary search tree if...\n    - The left child has a key less than the parent, and the child is the root of a binary search tree\n    - The right child has a key greater than the parent, and the child is the root of a binary search tree\n## Traversing\n\nThe three main algorithms for traversing a binary search tree are...\n\n### Pre-order traversal\n\n1. Visit the root node\n2. Traverse the left subtree\n3. Traverse the right subtree\n\n```java\npublic void preOrder(Node root) {\n    if (root == null) return;\n    System.out.println(root.key);\n    preOrder(root.left);\n    preOrder(root.right);\n}\n```\n\n### In-order traversal\n\n1. Traverse the left subtree\n2. Visit the root node\n3. Traverse the right subtree\n\n```java\npublic void inOrder(Node root) {\n    if (root == null) return;\n    inOrder(root.left);\n    System.out.println(root.key);\n    inOrder(root.right);\n}\n```\n\n### Post-order traversal\n\n1. Traverse the left subtree\n2. Traverse the right subtree\n3. Visit the root node\n\n```java\npublic void postOrder(Node root) {\n    if (root == null) return;\n    postOrder(root.left);\n    postOrder(root.right);\n    System.out.println(root.key);\n}\n```\n\n## Inserting\n\nSee the [[ser222.symbol-table]] [[get|ser222.symbol-table#Get value implementation]] and [[put|ser222.symbol-table#Put value implementation]] for more details.\n\n## Layout\n\n- Three cases for tree layout\n    - Worst case\n        - The tree is completely unbalanced\n        - $O(n)$ search time\n        - ![](/assets/images/2022-03-23-11-19-46.png)\n    - Typical case\n        - Somewhat balanced\n        - ![](/assets/images/2022-03-23-11-20-25.png)\n    - Best case\n        - Perfectly balanced, as all things should be\n        - $O(\\log n)$ search time\n        ![](/assets/images/2022-03-23-11-20-57.png)","n":0.06}}},{"i":56,"$":{"0":{"v":"Big Oh Notation","n":0.577},"1":{"v":"\nBig-Oh notation is a way of quantifying how methods scale based on the size of the data they process. For example, accessing an array is $O(1)$ whereas accessing a linked list is $O(n)$.\n^main\n\n## Common functions\n- $O(1)$\n    - Used for algorithms that always take a fixed amount of time to complete\n- $O(\\log{n})$\n    - Used for algorithms where while the amount of data increases exponentially, the time it takes to complete increases linearly (becomes more efficient with increasing `n` size)\n- $O(n)$\n    - Used for algorithms that could require iterating over all the data once\n- $O(n^2)$\n    - Used for algorithms with nested loops\n    - The exponent increases based on the number of nested loops\n        - $O(n^3)$ could mean 3 nested for loops\n    - ```TypeScript\n    for (const v0 of iterable)\n        for (const v1 of iterable)\n            ...\n    ```","n":0.087}}},{"i":57,"$":{"0":{"v":"Array","n":1},"1":{"v":"\nAn array is a (usually) fixed-length data structure that stores one type of element in order. Read/write times are always `O(1)` however resizing is `O(n)`.\n\n```Java\nvar myArray = new int[10];\nmyArray[2]; // O(1)\nmyArray[2] = 13; // O(1)\n// To resize an array...\nArrays.copyOf(myArray, myArray.length * 2); // O(n)\n```","n":0.151}}},{"i":58,"$":{"0":{"v":"Analytical Analysis","n":0.707},"1":{"v":"\n```Java\nint pool = new int[n];\nfor (int i = 0; i < pool.length; i++)\n    pool[i] = random.nextInt(100);\n```\n$$\nf(n)=1+((1)+(n+1)+(n)+(n))=3+3n\n$$\nProvides a more exact equation, but takes longer.\n^main","n":0.209}}},{"i":59,"$":{"0":{"v":"ADJ - Analysis, Design, Justification","n":0.447},"1":{"v":"\n- In courses, students are often provided educational problems with clear constraints\n  - You immediately know the desired outcome and how to judge it\n- A **real-world** problem is typically open-ended and ill-defined\n- Types of real-world problems...\n  - [[ser222.analysis-design-justification.open-ended]]\n  - [[ser222.analysis-design-justification.close-ended]]\n  - [[ser222.analysis-design-justification.design-problem]]\n    - The design problem is most common in engineering\n- Problems can be either [[ill-defined|ser222.analysis-design-justification.ill-defined]], [[well-defined|ser222.analysis-design-justification.well-defined]], or somewhere in-between.\n- In homework, we often jump straight into design\n  - Really there are two extra steps: [[analysis|ser222.analysis-design-justification.analysis]] and [[justification|ser222.analysis-design-justification.justification]]\n## Solving real-world problems\n- Basic problems\n  - \"Where do I start?\"\n  - \"What do I do next?\"\n  - \"Am I done?\"\n  - \"Any others?\"\n- Not all questions can be answered, but [[analysis|ser222.analysis-design-justification.analysis]] and [[justification|ser222.analysis-design-justification.justification]] can help greatly\n- In homework, we tend to jump to *design*\n## ADJ\n- We want to show that a problem under [[analysis (A)|ser222.analysis-design-justification.analysis]], soundly yields a [[design (D)|ser222.analysis-design-justification.design]], such that the design is an optimal solution to the problem\n- The [[justification (J)|ser222.analysis-design-justification.justification]] is a sound argument that the design is the optimal solution for the problem given the analysis\n### Soundness\n- Parts of our argument build upon each other logically\n- Answers must follow from the problem statement\n- \"`x`, because `y`\"\n### Process\n- When doing engineering, we expect to see some general flavor from process\n  - e.g. the difference between Software Engineering and Computer Science\n  - There is another aspect as well- control\n    - Are we using a process here?\n    - Why is using this process good?\n    - Why is using this process bad?\n    - What would justify the use of this process for problem-solving?\n### Definitions\n- There are almost always ambiguities - fix them!\n- Treat definitions as guideposts\n- In general, we need to find places that are under-specified, and then detail them\n  - If a problem says \"display\", we might want to specify as \"print each element in the collection exactly once in any order\"\n  - If a problem says \"efficiently\", we might want to define it as \"run in O(1) if possible\"\n### Fixing ill-defined problems\n- Three things we can think about\n  - Making **reasonable** assumptions\n  - [[ser222.analysis-design-justification.asking-questions]]\n  - [[ser222.analysis-design-justification.performing-experiments]]\n### Metrics and measurements\n- Before we attempt to do any design work, we need to know what makes a solution good\n  - A metric will be a way for us to measure different solutions to the problem\n- Ideally, we want\n  - Metrics that are useful relative to the problem statement\n  - Metrics that are reliable (and if possible can be replicated outside the system)\n  - More practically: efficient metrics","n":0.05}}},{"i":60,"$":{"0":{"v":"Well Defined","n":0.707},"1":{"v":"\nWe know what to start with, have options for what can be done, and will know the situation when we see it. The solution is *verifiable*, and with more information, a *certificate*.\n\n## Ambiguity\n- Most problems have areas that are ambiguous- both in the description and relation to the problem itself\n- This could mean\n  - Something is unknown\n  - Something is under-specified\n  - Something cannot be known\n- This causes a lot of trouble as it's difficult to determine whether a solution is valid\n## Faulty\n- The prompt is misleading, contradictory, or incorrect in some way\n","n":0.104}}},{"i":61,"$":{"0":{"v":"Performing Experiments","n":0.707},"1":{"v":"\nExperimentation is a key tool with dealing with the unknown.\n\nWe want to take the scientific approach of evidence-based discovery.\n\n- Have we learned any experimental methods in this class?\n- Are there any others you might have seen that are useful?","n":0.16}}},{"i":62,"$":{"0":{"v":"Open Ended","n":0.707},"1":{"v":"\nIn an open-ended problem an answer has no specific form that limits it.\n","n":0.277}}},{"i":63,"$":{"0":{"v":"Justification","n":1},"1":{"v":"\nArguing and supporting a proposed solution against alternatives. We often *want* to be right all the time. An argument which supports your design as being superior to other potential designs which also satisfy the analysis requirements.\n\n- Given that we have a design, we want to argue the design is\n  1. Well-founded, sound, and solved the problem\n  2. Is the optimal design for the problem\n- A justification is an easily verifiable piece of information that shows that the claim for the design is correct\n### Steps\n1. Evaluate your metrics and show that they are either optimal or hold\n2. Done!\n\n*Provided that your analysis itself is sound","n":0.099}}},{"i":64,"$":{"0":{"v":"Ill Defined","n":0.707},"1":{"v":"\nThe basic elements of the problem, actions that can be taken, or what a solution looks like may be unclear.\n","n":0.224}}},{"i":65,"$":{"0":{"v":"Design","n":1},"1":{"v":"\nA solution to the problem being solved\n\n- This should build on the results of the analysis approach to construct a solution which meets a metric\n  - Design is subjective\n- The design can look many ways\n  - For simple problems, it could just be \"array\" or \"list\"\n  - For complex problems, it can take the form of designing an explanation (later backed with an argument)\n  - In others, it will literally mean designing an algorithm","n":0.116}}},{"i":66,"$":{"0":{"v":"Design Problem","n":0.707},"1":{"v":"\nEngineers are often asked to solve design problems most often. Design problems have the flavor of picking one solution among many options, and where the \"best\" solution may not be immediately apparent and will likely have trade-offs. Some attributes of the solution are not pre-determined such as which programming language, framework, paradigm, etc. to use.\n\n","n":0.135}}},{"i":67,"$":{"0":{"v":"Close Ended","n":0.707},"1":{"v":"\nIn a close-ended problem, an answer must look a specific way and can only be achieved in a finite amount of ways. These are essentially educational problems.\n","n":0.192}}},{"i":68,"$":{"0":{"v":"Asking Questions","n":0.707},"1":{"v":"- Asking questions is a bit thing in industry\n    - Defining a problem is back-and-forth\n        - Not even the customer knows what they want\n        - It's up to your team to determine what the problem is\n    - Problems are too complex for someone to know everything about it\n    - Solutions are too varied for anybody to be able to create them at all\n    - That said, someone somewhere has the knowledge or expertise you need\n- When formulating a question to someone, help them help you\n    - Ask the appropriate person\n    - Make it specific\n    - Make it simple\n    - Make it actionable to you","n":0.098}}},{"i":69,"$":{"0":{"v":"Analysis","n":1},"1":{"v":"\nSitting down and explicitly dealing with all the muddling of the problem and its description. A translation of the original [[ill-defined problem|ser222.analysis-design-justification.ill-defined]] into concrete requirements that can be evaluated.\n\n- This is the most complicated part of AJD\n- In analysis, you should define your immediate problem and any useful corollaries\n- The answer should be in terms of the problem itself, and not biased towards a possible solution\n- It is possible that portions of your analysis will not be needed later\n## Steps\n1. Identify and address ambiguities in problem statement\n2. Generate definitions for ill-specified parts of the problem, along with useful corollaries\n3. Using the definitions to propose a more well-specified view of the problem\n4. Define metrics","n":0.094}}},{"i":70,"$":{"0":{"v":"Algorithms","n":1},"1":{"v":"\nA process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.\n\nFor example, a recipe for a pizza.\n\n## Characterizing algorithms\n### Understanding programs\n- Suppose you managed to obtain an internship at a coveted company\n- Unfortunately the company has brought in several interns but only has one position\n- As part of your work, you are asked to write an algorithm to solve a problem\n- At the end you need to present your solution and demonstrate how it is better\n    - There is no way to argue one implementation vs another!\n- We need a way to categorize the algorithms\n### Terminology\n#### P & NP\n- `NP != P`?\n- `P` represents a possible range values `n` could be and still be computed in a reasonable amount of time\n- `NP` represents a possible range of values `n` could *not* be and still be completed\n- Continues into `P SPACE`, `EXP SPACE`, etc.  \n- The highest complexity problem is the halting problem, where it's impossible to write a program to determine whether another (Turing complete) program loops infinitely\n#### Problem Size\n- `n` is typically used as a variable when dealing with problem size\n    - Could be...\n        - Size of an array (search/sorting)\n        - Value of integer (factorial)\n        - Length of a string (reverse/copying)\n#### Growth function\n- Computes the number of operations for an implementation to execute on a problem of size `n`\n- May be written as $f(n)$, $t(n)$, etc.\n    - $f(n)=1$\n        - A method that always executes one operation\n    - $f(n)=1+n$\n        - A method that performs a fixed operation and then an operation that depends on the problem size\n#### Big-Oh\n![[ser222.big-oh-notation#^main]]\n## Analysis approaches\n### Analytical approach\n![[ser222.analytical-analysis#^main]]\n### Empirical approach\n![[ser222.empirical-analysis#^main]]\n## Asymptotics\n![[ser222.algorithms.asymptotics#^main]]\n## Analytical analysis\n### Defining $F(N)$\n- We are better off thinking in terms of a specific ***cost*** metric\n- Our cost should probably measure the most \"expensive\" or \"frequent\" operation\n- ```java\n  boolean searchBinary(int target, int[] pool) {\n      int lo = 0;\n      int hi = pool.length - 1;\n      while (lo <= hi) {\n          int mid = lo + (hi - lo) / 2; // should measure here\n          if (target < pool[mid])\n              hi = mid - 1;\n          else if (target > pool[mid])\n              lo = mid + 1;\n          else\n              return true;\n      }\n      return false;\n  }\n  ```\n    - The ideal place to measure would be the `int mid`\n### Trends\n![](/assets/images/2022-02-02-10-56-45.png)\n### Analysis of Threesum\n```java\n//Sedgewick and Wayne\npublic static int threeSum(int[] a) {\n    int N = a.length;\n    int count = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = i+1; j < N; j++)\n            for (int k = j+1; k < N; k++)\n                if (a[i] + a[j] + a[k] == 0)\n                    count++;\n        return count;\n    }\n}\n```\n- For our cost model, we will count the number of comparisons with `0`\n- $\\sum^N_{i=1}{(\\sum^N_{j=i+1}{(\\sum^N_{k=j+1}{1})})}$\n- Methods\n    - Can write it out and try to find a pattern\n        - $\\sum^N_{i=1}{(\\sum^N_{j=i+1}{(\\sum^N_{k=j+1}{1})})}\\approx\\int^N_{x=1}{(\\int^N_{y=x}{(\\int^N_{z=y}{dz})}{dy})}{dx}\\approx\\frac{1}{6}N^3$\n    - Use tables of summation formulas\n    - Use a [[CAS|ser222.computer-algebra-system]] (pls just do this)\n        - ![](/assets/images/2022-02-02-11-12-48.png)\n- Sometimes the answer will be messy- it can be fair game to modify the bounds to get a more reasonable solution\n### Input dependence\n- Is it possible to write a growth function for an algorithm that isn't necessarily dictated by $n$\n```java\nboolean searchLinear(int target, int[] pool) {\n    for (int i = 0; i < pool.length; i++)\n        if (pool[i] == target)\n            return true;\n    return false;\n}\n```\n- Let's assume the inputs of size $k$ are sorted starting with the most sorted inputs\n- Although some methods lack direct dependence on input character, others are influenced\n- On a nearly sorted input, insertion sort will behave more linearly than quadratically\n## Recurrences\n- So far, we haven't looked at any methods that call themselves\n- This is where things get tricky (just kidding, not really)\n- Any algorithm written linearly can be written recursively and vice-versa\n### Induction\n![](/assets/images/2022-02-07-11-18-11.png)\n## Big-Oh Usage\n- Most of the time, [[ser222.big-oh-notation]] will be noted simply as *\"...with O(n) running time on size of array...\"*\n- Other times, documentation may implicitly state the Big-Oh of a method by stating what algorithm or data structure is used to implement something\n- Big-Oh can be used in fields outside of programming- can be seen in physics, math, etc.","n":0.039}}},{"i":71,"$":{"0":{"v":"Asymptotics","n":1},"1":{"v":"\nBounding functions allow for \"noisy\" regions to be ignored. The bounds will remain stable until some threshold is met.\n^main\n### Upper Bounds\n- [[ser222.algorithms.asymptotics.upper-bounds.big-oh]]\n- [[ser222.algorithms.asymptotics.upper-bounds.big-oh-logs]]\n### Lower Bounds\n- [[ser222.algorithms.asymptotics.lower-bounds.omega]]\n### Tight Bounds\n- Consider the functions $x^4$ and $x^4+2x$\n    - They almost exactly follow each other for large values of $n$\n- [[ser222.algorithms.asymptotics.tight-bounds.tilde]]\n- [[ser222.algorithms.asymptotics.tight-bound.theta]]\n## Ranking bounds\n- Once you have a bound, use the following hierarchy to rank terms\n    - $1<\\log{n}<n<n\\log<n^c<c^n<c^{c^n}$\n    - ![](/assets/images/2022-02-02-10-39-26.png)\n","n":0.123}}},{"i":72,"$":{"0":{"v":"Upper Bounds","n":0.707}}},{"i":73,"$":{"0":{"v":"Big Oh","n":0.707},"1":{"v":"\n- $f(n)=O(g(n))$ indicates that $f(n)$ has an upper bound\n- To find $g(n)$ for $f(n)$ in $f(n)=O(g(n))$, we take $f(n)$, eliminate all but the dominant term, and remove any constant factor from the dominant term\n","n":0.171}}},{"i":74,"$":{"0":{"v":"Big Oh Logs","n":0.577},"1":{"v":"\n- $\\log_2{n}=O(\\log_2{n})$ and $\\log_{10}{n}=O(\\log_2{n})$\n","n":0.5}}},{"i":75,"$":{"0":{"v":"Tight Bounds","n":0.707}}},{"i":76,"$":{"0":{"v":"Tilde","n":1},"1":{"v":"\n- We write $\\tilde{f(N)}$ to indicate a function that, when divided by $f(N)$, approaches $1$ as $N$ grows, and so we write $G(N)\\tilde{f(N)}$\n","n":0.209}}},{"i":77,"$":{"0":{"v":"Tight Bound","n":0.707}}},{"i":78,"$":{"0":{"v":"Theta","n":1},"1":{"v":"\n- Theta is a more common tight bound\n- We write $f(n)=\\theta(g(n))$ to indicate that $f(n)$ is an upper and lower bound represented by the same function\n","n":0.196}}},{"i":79,"$":{"0":{"v":"Lower Bounds","n":0.707}}},{"i":80,"$":{"0":{"v":"Omega","n":1},"1":{"v":"\n- The opposite of Big-Oh is Omega- a lower bound\n- We write $f(n)=\\omega(g(n))$ to indicate that $f(n)$ has a lower bound\n- Omega won't be particularly useful\n","n":0.196}}},{"i":81,"$":{"0":{"v":"ADJ for Algorithms","n":0.577},"1":{"v":"\n- The main difference in using [[ADJ|ser222.analysis-design-justification]] for algorithms is that the result of [[ADJ|ser222.analysis-design-justification]] will include pseudocode in the [[design|ser222.algorithms.adj.design]] portion.\n- Although you may not be at the step of justifying a solution, you should start thinking about [[justification|ser222.algorithms.adj.justification]]\n    - It takes a long time and will have a different \"flavor\" than previous examples\n    - In previous problems, you will probably be given a finite amount of solutions, however algorithms have an infinite number of solutions\n\n## Outline\n\n- [[Analysis|ser222.algorithms.adj.analysis]]\n- [[Design|ser222.algorithms.adj.design]]\n- [[Justification|ser222.algorithms.adj.justification]]","n":0.111}}},{"i":82,"$":{"0":{"v":"Problem Statement","n":0.707},"1":{"v":"\n> Design an efficient algorithm to update the priority of an entry inside a priority queue. Analyze the problem, design an algorithm for updating the priority queue, and justify the algorithm's optimality.\n\n## Thoughts...\n\n- How might ADJ be different for an algorithm than other examples?\n- Is this problem possible?\n- Can this problem be solved by something we know about already?\n- Are any aspects of this problem undefined?\n- What should be our first steps?\n","n":0.118}}},{"i":83,"$":{"0":{"v":"Justification","n":1},"1":{"v":"\n## Proof of termination\n\n- Shows that an algorithm always terminates\n- First step towards producing something useful\n    - Otherwise program could be infinite loop\n- Typically performed by determining a progress metric, then showing an algorithm \"moves along\" the metric\n\n### Example - Proving 'swim' terminates\n\n```python\ndef swim(self, k: int):\n    while (k > 1 and (parent := k / 2) < k)\n        exch(k, (k := parent))\n```\n\nWe can infer that the only place where the algorithm could not terminate is when the `while` loop is entered.\n\nBecause `k` is constantly being set to `parent`, the loop can terminate as the value of `parent` will eventually reach either `1`, or less than `1` since `parent` is set to `k / 2` each iteration. Additionally, since `k` and `parent` are both integers, `1 / 2` will round down to `0` rather than up to `1`.\n\n## Proof of correctness\n\n- Shows that an algorithm always performs in a certain way, or acts according to certain constraints\n- If we have proof of correctess, that assets the algorithm is correct\n    - The remaining question would be, \"is the algorithm fast enough?\"\n- Typically performed by analyzing the way the algorithm transforms data to argue the output will always have certain properties\n\n### Example - Proving 'swim' is correct\n\n```python\ndef swim(self, k: int):\n    while (k > 1 and (parent := k / 2) < k)\n        exch(k, (k := parent))\n```\n\n> Let `k` be the node that will be swim'ed. If `k` is a node already in its proper position then `less(parent(k), k)` will always be `False`, and no code will be run.\n\nFrom this, we can infer that the result is correct because we know that `parent(k)` should always be less than `k` in an ordered max heap.\n\n### Metric 1\n\nUsing the metric defined earlier...\n\n> The ability of the algorithm to process a heap-sorted array with at most one node which violates the heap rule and produce a heap-sorted array with no violations of the maximum heap rule. The array must contain a complete tree at all times.\n\n#### Case 1\n\n- Tree does not contain node with value\n- In step 1, we loop over tan element and check its contents\n- No changes are made to `N`, `keys`, or `value`, so after that step, the data will be heap-ordered\n- If there is no node to update, the algorithm will terminate\n\n#### Case 2\n\n- Tree contains node with value\n- We defer to the mechanisms for `swim` and `sink` which are already known to result in a heap-ordered array\n- Both functions will terminate if there is no work to do\n- The `if`-statements evaluate the case of being out of order with `parent` or `children,` and follows the formula as defined\n\n## Proof of efficiency\n\n- The metric we defined earlier was\n\n> M1\n> For a cost metric, we will use the number of lines run as a measure of computational time needed for particular design.\n\n- Since we are working with an algorithm, we want to show that our algorithm is at least as fast as any other\n\n### Metric 2\n\n- Per `K`, insert takes $O(\\log n)$\n    - Thus, the best we can get is $O(\\log n)$","n":0.044}}},{"i":84,"$":{"0":{"v":"Design","n":1},"1":{"v":"\n## Pseudocode\n\n- The purpose of pseudocode is to **clearly** express an algorithm\n    - There cannot be ambiguity\n- Pseudocode cannot be used to hide important details\n    - It's only fair to reference an undefined function when it does not add more ambiguity, e.g. calling `distance(x1, y1, x2, y2)` is fine, but calling `has_deviation(original_image, new_image)` is not\n\n### Examples\n\n```java\npublic void insert(Key v) { \n    pq[++N] = v;\n    swim(N);\n}\n\nprivate void swim(int k) {\n    while (k > 1 && less(k / 2, k)) {\n        exch(k, k / 2);\n        k = k / 2;\n    }\n}\n\nvoid insert(Key v) {\n    pq[++N] = v;\n    swim(N);\n}\n\nvoid swim(int k) {\n    while (k > 1 && less(k / 2, k)) {\n        exch(k, k / 2);\n        k = k / 2;\n    }\n}\n```\n\nPseudocode does not need to compile, however it is helpful to use a specific language's syntax to make it easier to read. Python is often used because it closely resembles plain English and generally produces relatively readable and concise code.\n\n## K\n\n- \"K\" stands for knowledge and is the symbol we will use to refer to the set of information which is known to be true\n    - In a class, \"K\" is typically provided as a working document\n- The purpose of \"K\" is to ensure a design is well-founded\n- \"K\" can serve as a safe place to put generic definitions\n    - \"K\" = [[Definitions|ser222.algorithms.adj.analysis#Definitions]]\n\n## Decomposition\n\nSince we have a good understanding of the [[problem|ser222.algorithms.adj.problem-statement]], we can attempt to break it into steps (and pseudocode).\n\n1. Find target key/value\n2. If needed, adjust position of target key/value\n\n```python\ndef update(value: Value, new_priority: Key):\n    idx: int | None = None\n    \n    # Step 1: Find target key/value\n    for i in range(0, n - 1):\n        if values[i] == value:\n            idx = i\n            break\n    \n    if idx == None:\n        return\n\n    # Step 2: Adjust position of target key/value\n    keys[idx] = new_priority\n    if less(keys[idx / 2], new_priority):\n        swim(idx)\n    elif less(new_priority, max(keys[2 * idx], keys[2 * idx + 1])):\n        sink(idx)\n```","n":0.056}}},{"i":85,"$":{"0":{"v":"ADJ for Algorithms: Analysis","n":0.5},"1":{"v":"\nAnalysis is the stage at which the problem is defined.\n\nFor example...\n\n- *What is meant by \"updating\" a Priority Queue?*\n- *Are any (reasonable) assumptions needed?*\n- *How is data represented?*\n\n## Problem statement\n\nFor the purposes of demonstration, we will use a sample design problem.\n\n![[ser222.algorithms.adj.problem-statement]]\n\n## Understanding the problem\n\nUnder specified aspects:\n\n- *Is this a max or min PQ?*\n    - This is a max PQ\n- *What implementation do we need to support?*\n    - Sedgewick's\n\n## Doing examples by hand\n\n![](/assets/images/2022-03-16-11-05-43.png)\n\nBefore you begin writing code, ensure you know what exactly you are trying to solve.\n\n## Definitions\n\n> Design an efficient algorithm to update the priority of an entry inside a priority queue.\n\nThere is ambiguity in this statement, so we will make assumptions about the problem.\n\n### Assumptions\n\n- The priority queue is a max priority queue\n- The specific implementation is Sedgewick's\n- The algorithm will assume that it operates over a valid PQ and produces a valid PQ\n\n### Definitions\n\n1. [[ser222.binary-tree]]\n2. [[ser222.complete-binary-tree]]\n3. [[ser222.heap]]\n4. [[Heap-ordered Array|ser222.binary-tree#Mapping to an array]]\n5. [[ser222.sorting.priority-queue]]\n\n### Pseudocode\n\n```python\nn: int # number of elements in the PQ\nkeys: [Key] # array of keys containing 'n' elements\nvalues: [Value] # array of values containing 'n' elements\n\ndef update(value: Value, new_priority: Key):\n    \"\"\"\n    Changes the priority of the node with the given value to the new priority.\n    \n    Parameters\n    ----------\n    value: Value\n        The value of the node to update\n    new_priority: Key\n        The new priority of the node\n    \"\"\"\n```\n\n## Metrics\n\n> Design an efficient algorithm to update the priority of an entry inside a priority queue.\n\nNeed to find what is important, distill it, and define it.\n\n- M1: The ability of the algorithm to process a heap sorted array with at most one node which violates the heap rule and produce a heap-sorted array with no violations of the maximum heap rule. The array must contain a complete tree at all times\n- M2: The efficiency of the algorithm. In this case, we can use the number of lines run as a measure of computational time.\n\n## Conclusion\n\nWe've...\n\n- Understood the problem\n- Created a sound technical context for the problem\n- Determined what makes a good solution","n":0.055}}},{"i":86,"$":{"0":{"v":"SER-216","n":1},"1":{"v":"\nSoftware Enterprise\n\n[Syllabus](https://github.com/jheinem1/notes/tree/main/vault/assets/ser216_syllabus.pdf)\n\n| Instructor       | Tyler Baron                                                                             |\n|------------------|-----------------------------------------------------------------------------------------|\n| **Office Hours** | 2:45-4:45 PM on Tues. or by appointment (scheduled via slack/email) @ Peralta Room 230X |\n\n## Overview\n\n- First course in Software Enterprise\n- Hybrid lecture-lab-project environment\n- Will use [[ser216.uml]]\n\n## Lectures & Slides\n\n### Module 1 - Introduction to Software Engineering\n\n- Part 1\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/M1.1.IntroductionToSoftwareEngg1.pdf)\n  - [Lecture](https://youtu.be/cWmXZ_j1ogc)\n  - [[Notes|ser216.introduction]]\n- Part 2\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/M1.2.IntroductionToSoftwareEngg2.pdf)\n  - [Lecture](https://youtu.be/geZBWiWnbSE)\n  - [[Notes|ser216.introduction]]\n\n### Module 2 - Diagrams\n\n- Part 1 - Use-Case Diagrams\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-2-1-uml-use-case-diagrams.pdf)\n  - [Lecture](https://youtu.be/Q6K04A_Sdis)\n  - [[Notes|ser216.uml.diagrams.use-case]]\n- Part 2 - Class Diagrams\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-2-2-uml-class-diagrams.pdf)\n  - [Lecture](https://youtu.be/e8h4DchH8fU)\n  - [[Notes|ser216.uml.diagrams.class]]\n- Part 3 - State Diagrams\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-2-3-uml-state-diagrams.pdf)\n  - [Lecture](https://youtu.be/ALh8Z00iAkw)\n  - [[Notes|ser216.uml.diagrams.state]]\n- Part 3 - Activity Diagrams\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-2-4-uml-activity-diagrams.pdf)\n  - [Lecture](https://youtu.be/3Fyl_6K7K2w)\n  - [[Notes|ser216.uml.diagrams.activity]]\n\n### Module 3 - Javadoc\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-5-javadoc-tutorial.pdf)\n- [Lecture](https://youtu.be/z1ojWWTc2so)\n- [[Notes|ser216.javadoc]]\n\n### Module 4 - PSP\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-3-personal-software-process.pdf)\n- [Lecture](https://youtu.be/Mug1__wafPk)\n- [[Notes|ser216.personal-software-process]]\n\n### Module 5 - SDLC\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-4-sdlc.pdf)\n- [Lecture](https://youtu.be/vDaVd-XlSyU)\n- [[Notes|ser216.software-development-lifecycle]]\n\n### Module 6 - Process Measurement\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-6-process-measurement-1.pdf)\n- [Lecture](https://youtu.be/v3d0iVzLTRA)\n- [[Notes|ser216.process-measurement]]\n\n### Module 7 - Exception Handling\n\n- Part 1\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-8-1-exception-handling-part-1.pdf)\n  - [Lecture](https://youtu.be/otKdX2pQGCs)\n  - [[Notes|ser216.exception-handling]]\n- Part 2\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-8-2-exception-handling-part-2.pdf)\n  - [Lecture](https://youtu.be/VhP8Ou2JCwQ)\n  - [[Notes|ser216.exception-handling]]\n\n### Midterm\n\n- Which [[SDLC|ser216.software-development-lifecycle]] process is most effective?\n- Basic [[javadoc|ser216.javadoc]] tags\n  - For example, writing javadoc comments for an existing class/method\n- `try`/`catch`/`finally` in [[exception-handling|ser216.exception-handling]]\n  - No need to know specific types of exceptions\n- [[ser216.midterm]]\n\n### Module 8 - Software Testing\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-7-software-testing-overview.pdf)\n- [Lecture](https://youtu.be/MRtgEJRgVqI)\n- [[Notes|ser216.software-testing]]\n\n### Module 9 - JavaFX\n\n- Part 1 - Basics\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-9-1-java-fx-part-1.pdf)\n  - [Lecture](https://youtu.be/opuj2pcX6sQ)\n  - [[Notes|ser216.javafx]]\n- Part 2 - Layouts\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-9-2-java-fx-part-2.pdf)\n  - [Lecture](/Users/jhein/Downloads/M9.2.JavaFX-Part2.pdf)\n  - [[Notes|ser216.javafx]]\n\n### Module 10 - Event-Driven Programming\n\n- Part 1 - Delegation Model and Listeners\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-9-3-event-driven-programming-part-1.pdf)\n  - [Lecture](https://youtu.be/j9kByTiuHZw)\n  - [[Notes|ser216.event-driven-programming]]\n- Part 2 - Anonymous Classes and Observable Objects\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-9-4-event-driven-programming-part-2.pdf)\n  - [Lecture](https://youtu.be/E_AQU-gz0L4)\n  - [[Notes|ser216.event-driven-programming]]\n\n### Module 11 - Multithreading & Networking\n\n- Part 1 - Multithreading\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-13-1-multithreading.pdf)\n  - [Lecture](https://youtu.be/5cfIOAnUozs)\n  - [[Notes|ser216.multithreading]]\n- Part 2 - Networking\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-13-2-network-programming.pdf)\n  - [Lecture](https://youtu.be/Y0vpsa8u44o)\n  - [[Notes|ser216.network-programming]]\n\n### Module 12 - Software Quality\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-10-software-quality.pdf)\n- [Lecture](https://youtu.be/Wc__OAGQ5iY)\n- [[Notes|ser216.software-quality]]\n\n### Module 13 - Unit Testing\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-12-unit-testing.pdf)\n- [Lecture](https://youtu.be/OxCmGmqMYDs)\n- [[Notes - Unit Testing|ser216.unit-testing]]\n- [[Notes - JUnit|ser216.junit]]\n\n### Module 14 - Code Analysis\n\n- [Video](https://player.mediaamp.io/p/U8-EDC/HOo9GXupLYen/embed/select/media/aJ97UtwXAoHF?form=html)\n\n### Module 15 - Integration, System, and Acceptance Testing\n\n- Part 1 - Integration Testing\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets\\m-14-integration-testing.pdf)\n  - [Lecture](https://youtu.be/Jvu-Oo2gHKY)\n  - [[Notes|ser216.integration-testing]]\n- Part 2 - System & Acceptance Testing\n  - [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-17-system-testing.pdf)\n  - [Lecture](https://youtu.be/0OpoavgtUWo)\n  - [[Notes|ser216.system-testing]]\n\n### Module 16\n\n- [Slides](https://github.com/jheinem1/notes/tree/main/vault/assets/m-18-1-software-test-plan.pdf)\n- [Lecture](https://youtu.be/spPsmPZxZ1c)\n- [[Notes|ser216.software-test-plan]]","n":0.054}}},{"i":87,"$":{"0":{"v":"What You See Is What You Get","n":0.378}}},{"i":88,"$":{"0":{"v":"Unit Testing","n":0.707},"1":{"v":"\n## When unit tests are written\n\n- Traditionally, after the source code is written\n- In [[ser216.software-development-lifecycle.agile-method.extreme-programming]] & [[ser216.test-driven-development]], before the source code is written\n\n## Types of unit tests\n\n- Static testing (compile-time)\n    - [[ser216.unit-testing.static-analysis]]\n    - Code review\n        - Walk-through (informal)\n        - Inspection (formal)\n    - Automated tools\n        - Check for syntax & semantic errors\n        - Check for departure from standards\n- Dynamic testing (runtime)\n    - [[ser216.unit-testing.black-box-testing]]\n    - [[ser216.unit-testing.white-box-testing]]\n\n## Heuristics\n\n1. Create tests when object design is completed\n    - Black box: test the functional model\n    - White box: test the dynamic model\n2. Develop test-cases\n    - Find effective number of test-cases\n3. Cross-check test cases to eliminate duplicates\n4. Desk-check source code\n5. Create a test harness\n    - e.g. test drivers and stubs\n6. Describe the test oracle\n    - Often the result of the first successful test\n7. Execute test cases\n8. Compare results of the test with the oracle\n    - If possible, automate","n":0.084}}},{"i":89,"$":{"0":{"v":"White-Box Testing","n":0.707},"1":{"v":"\n## Methodology\n\n- Looks into the implementation details of the system\n- Enables the developer to see what is happening inside the system\n- Provides a higher degree of insight than just the user interface\n- Allows the tester to interact with the system\n\n## Overview\n\n- Code coverage\n    - [[ser216.unit-testing.white-box-testing.statement-coverage]]\n    - [[ser216.unit-testing.white-box-testing.branch-coverage]]\n    - [[ser216.unit-testing.white-box-testing.condition-coverage]]\n    - [[ser216.unit-testing.white-box-testing.path-coverage]]","n":0.14}}},{"i":90,"$":{"0":{"v":"Statement Coverage","n":0.707},"1":{"v":"\n```python\ndef return_input(input: int, condition1: boolean, condition2: boolean, condition3: boolean):\n        x = input\n        y = 0\n        if (condition1):\n            x += 1\n        if (condition2):\n            x -= 1\n        if (condition3):\n            y = x\n        return y\n```\n\n```python\nreturn_input(x, True, True, True)\n```\n\n- 100% of statements are covered","n":0.158}}},{"i":91,"$":{"0":{"v":"Path Coverage","n":0.707},"1":{"v":"\n```python\ndef return_input(input: int, condition1: boolean, condition2: boolean, condition3: boolean):\n        x = input\n        y = 0\n        if (condition1):\n            x += 1\n        if (condition2):\n            x -= 1\n        if (condition3):\n            y = x\n        return y\n```\n\n8 separate paths:\n\n| T | T | T | `return_input(x, True, True, True)` |\n|---|---|---|---|\n| T | T | F | `return_input(x, True, True, False)` |\n| T | F | T | `return_input(x, True, False, True)` |\n| T | F | F | `return_input(x, True, False, False)` |\n| F | T | T | `return_input(x, False, True, True)` |\n| F | T | F | `return_input(x, False, True, False)` |\n| F | F | T | `return_input(x, False, False, True)` |\n| F | F | F | `return_input(x, False, False, False)` |\n","n":0.091}}},{"i":92,"$":{"0":{"v":"Branch Coverage","n":0.707},"1":{"v":"\n```python\ndef return_input(input: int, condition1: boolean, condition2: boolean, condition3: boolean):\n        x = input\n        y = 0\n        if (condition1):\n            x += 1\n        if (condition2):\n            x -= 1\n        if (condition3):\n            y = x\n        return y\n```\n\n```python\nreturn_input(x, True, True, True)\n```\n\n- 100% of statements are coverd\n- Only half of branches are covered\n    - Every \"if\" statement has two branches\n\n```python\nreturn_input(x, False, False, False)\nreturn_input(x, True, True, True)\n```\n\n- 100% of branches are covered","n":0.125}}},{"i":93,"$":{"0":{"v":"Static Analysis","n":0.707},"1":{"v":"\nStatic analysis is the process of identifying and fixing errors in source code before it is compiled.\n\n## Compiler warnings & errors\n\n- The linter and compiler both check for potential errors in the code and report them to the user as warnings or errors\n- Some examples include...\n    - Unused variables\n    - Uninitialized variables\n    - Unreachable code\n\n## Checkstyle (Java)\n\n- Similar to [ESLint](https://eslint.org/) for JavaScript/TypeScript\n- Checks for code guideline violations (e.g. indentation, naming, etc.)\n    - If possible, provides suggestions for fixing the violations\n\n## FindBugs\n\n- Checks for common bugs in Java code (it's dated and not widely used)\n\n## Metrics\n\n- Checks for structural anomalies (also dated)","n":0.1}}},{"i":94,"$":{"0":{"v":"Black-Box Testing","n":0.707},"1":{"v":"\n## Methodology\n\n- What are the available inputs?\n- What are the expected outputs?\n- Does not care about implementation details\n\n## Focus\n\n- Focuses on I/O behavior of the system\n- If for any given input, the output can be predicted, then the system is considered to be correct\n- Requires \"test oracle\" (strategy to determined whether a test passes or fails)\n\n## Goal\n\n- Reduce number of test cases by equivalence partitioning (grouping by equivalent behavior, e.g. inputs that pass vs inputs that fail)\n    - Divide input conditions into equivalence classes\n    - Choose test cases that cover all equivalence classes\n\n## Test-case selection\n\n- If the input is valid across a range of values...\n    - The developer selects test cases from 3 equivalence classes\n        - Below the range\n        - Within the range\n        - Above the range\n- If the input is only valid if it is a member of a specific set of values...\n    - The developer selects test cases from 2 equivalence classes\n        - Valid discrete values\n        - Invalid discrete values\n- There are **no rules**, just a set of guidelines","n":0.076}}},{"i":95,"$":{"0":{"v":"Test Driven Development","n":0.577},"1":{"v":"\nWriting tests before implementing a given class, function, method, etc.","n":0.316}}},{"i":96,"$":{"0":{"v":"Systems","n":1},"1":{"v":"\nAn organized set of communicating parts.\n\n## Types of systems\n### Natural system\n- A system whose ultimate purpose may not be known\n### Engineered system\n- A system which is designed and built by engineers for a specific purpose\n### Subsystem\n- Parts of a system which can be considered systems in of themselves\n\n## A system can be visualized using...\n- [[Models|ser216.systems.model]]\n- [[Views|ser216.systems.view]]\n- [[ser216.systems.notation]]\n\n[[ser216.uml]] is the primary format of visualizing systems using the above.\n","n":0.122}}},{"i":97,"$":{"0":{"v":"View","n":1},"1":{"v":"\nA view depicts selected aspects of a [[model|ser216.systems.model]].\n","n":0.354}}},{"i":98,"$":{"0":{"v":"Notation","n":1},"1":{"v":"\nA set of graphical or textual rules for depicting [[models|ser216.systems.model]] and [[views|ser216.systems.view]].\n","n":0.289}}},{"i":99,"$":{"0":{"v":"Model","n":1},"1":{"v":"\nAn abstraction describing a [[system|ser216.systems]] or [[subsystem|ser216.systems#subsystem]].\n","n":0.378}}},{"i":100,"$":{"0":{"v":"System Testing","n":0.707},"1":{"v":"\n## Types of system testing\n\n- [[ser216.system-testing.functional-testing]]\n- [[ser216.system-testing.performance-testing]]\n- [[ser216.system-testing.acceptance-testing]]\n\n## Testing activities\n\n1. Establish the test objectives\n2. Design the test cases\n3. Write the test cases\n4. Test the test cases\n5. Execute the tests\n6. Evaluate the results\n7. Change the system\n8. Do regression testing\n9. Repeat","n":0.16}}},{"i":101,"$":{"0":{"v":"Performance Testing","n":0.707},"1":{"v":"\nTries to violate non-functional requirements.\n\n## Overview\n\n- Tests how the system behaves while overloaded\n- Attempts unusual orders of execution\n- Checks system's response to large volumes of data\n- Records the amount of time it takes to complete a task\n\n## Types\n\n- Stress testing\n- Volume testing\n- Configuration testing\n- Compatibility testing\n- Timing testing\n- Security testing\n- Environmental test\n- Quality testing\n- Recovery testing\n- Human factors testing","n":0.13}}},{"i":102,"$":{"0":{"v":"Functional Testing","n":0.707},"1":{"v":"\nTests the functionality of a system.\n\n## Overview\n\n- Test cases are designed from the requirements/user manual and centered around key functions\n- The system is treated as a [[black-box|ser216.unit-testing.black-box-testing]]\n- [[Unit test|ser216.unit-testing]] cases can be reused, but new test cases have to be developed as well\n\n","n":0.152}}},{"i":103,"$":{"0":{"v":"Acceptance Testing","n":0.707},"1":{"v":"\nDemonstrates a system is ready for operational use\n\n## Overview\n\n- Choice of tests is made by client\n- Many tests can be taken from integration testing\n- Performed by client\n\n## Alpha test\n\n- Client uses the software in the developer environment\n- Software is only used in a controlled environment\n\n## Beta test\n\n- Conducted at client's environment\n- Software is used in a realistic environment","n":0.131}}},{"i":104,"$":{"0":{"v":"Software Testing","n":0.707},"1":{"v":"\n[[ser216.software-testing.terminology]]\n\n[[ser216.software-testing.testing-activities]]\n\n[[ser216.software-testing.types-of-testing]]\n\n## Famous Problems\n\n- F-16 crossing equator using autopilot\n    - Result: Plane flipped over\n    - Reason: Reuse of autopilot software from a rocket\n- Therac-25 \"cancer zapper\" used widely\n    - Result: At least 5 died due to radiation overdose\n    - Reason: Concurrent programming error\n- NASA Mars Climate Orbiter attempts orbit insertion\n    - Result: Crash into Mars surface due to incorrect insertion\n    - Reason: Unit conversion error","n":0.125}}},{"i":105,"$":{"0":{"v":"Types of Testing","n":0.577},"1":{"v":"\n## Unit testing\n\n- Individual component\n- Carried out by developers\n- Goal: Confirm that the component or subsystem is correctly coded and carries out the indented functionality\n\n## Integration testing\n\n- Groups of subsystems, and eventually the entire system\n- Carried out by developers\n- Goal: Test the interfaces among the subsystems\n\n## System testing\n\n- The entire system\n- Carried out by developers\n- Goal: Determine if the system meets requirements (functional, nonfunctional, performance, etc.)\n\n## Acceptance testing\n\n- Evaluates the system delivered by developers\n- Carried out by the client\n- Goal: Demonstrate that the system meets the requirements and is ready to use","n":0.104}}},{"i":106,"$":{"0":{"v":"Testing Activities","n":0.707},"1":{"v":"\n- It is impossible to completely test any nontrivial module in a system\n    - Practical limitations\n        - Complete testing is prohibitive in time and cost\n    - Theoretical limitations\n        - e.g. halting problem\n- \"Testing can only show the presence of bugs, not their absence\" (Dijkstra)\n- Testing is not free\n\n## Testing takes creativity\n\n- To develop an effective test, one must have...\n    - Detailed understanding of the system\n    - Application and solution domain knowledge\n    - Knowledge of the testing techniques\n    - Skill to apply testing techniques\n- Testing is best done by independent testers\n    - We often develop a certain mental attitude that the problem should behave a certain way when it does not\n    - Programmers often stick to the data set that makes the program work\n    - A program often does not work when tried by somebody else\n\n## Testing activities\n\n```mermaid\nflowchart TD\n    subgraph Developer\n        ODD[Object Design Document] --> UT[Unit Testing]\n        SDD[System Design Document] --> IT[Integration Testing]\n        RAD[Requirement Analysis Document] --> ST[System Testing]\n    end\n    subgraph Client\n        CE[Client Expectation] --> AT[Acceptance Testing]\n    end\n\n    IT --> ST\n    ST --> AT\n    UT --> IT\n```\n\n","n":0.075}}},{"i":107,"$":{"0":{"v":"Terminology","n":1},"1":{"v":"\n## Failure\n\nAny deviation of the observed behavior from the specified behavior is a failure.\n\n## Erroneous state\n\n    Error\n\nWhen the system is in an erroneous state, further processing by the system can lead to a [[failure|ser216.software-testing.terminology#Failure]].\n\n## Fault\n\n    Bug\n    Defect\n\nA fault, bug, or defect is the mechanical or algorithmic cause of an [[error|ser216.software-testing.terminology#Erroneous state]].\n\n## Validation\n\nValidation is the activity of checking for deviations between the observed behavior of a system and its specification.\n\n## Examples\n\n- **Faults in the interface specification**\n    - Mismatch between what the client needs and what the server offers\n    - Mismatch between requirements and implementation\n- **Algorithmic faults**\n    - Missing initialization\n    - Incorrect branching condition\n    - Missing test for `null`\n- **Mechanical faults** (most difficult to find)\n    - Operating temperature outside of equipment's specifications\n- **Errors**\n    - `null` reference errors\n    - Concurrency errors\n    - Exceptions\n    \n## Dealing with errors, failures, and faults\n\n- **Modular redundancy**\n    - Adding additional components to a system to mitigate the failure of a component by reproducing the behavior of the component in a different environment\n        - Example: Adding a backup battery to a laptop\n- **Declaring the bug as a feature** (doing nothing)\n- **Patching**\n    - Addressing the error by modifying the code\n- **Testing**\n    - Adding additional tests to the system to ensure that the error is not reintroduced\n\n### Another view on dealing with faults\n\n- **Fault avoidance**\n    - Done before system is released\n    - Use methodology to reduce complexity\n    - Use configuration management to prevent inconsistency\n    - Apply verification to prevent algorithmic faults\n- **Fault detection**\n    - Done while system is running\n    - Testing to detect faults\n    - Debugging to find and resolve faults\n    - Monitoring to deliver information about state of system\n- **Fault tolerance**\n    - Done after system failure\n    - Exception handling\n    - Modular redundancy\n\n## Taxonomy for fault handling\n\n```mermaid\nflowchart BT\n    UT[Unit Testing] --> Testing\n    IT[Integration Testing] --> Testing\n    ST[System Testing] --> Testing\n\n    Testing --> FD[Fault Detection]\n    Debugging --> FD[Fault Detection]\n    Testing <--> Debugging\n\n    Methodology --> FA[Fault Avoidance]\n    Verification --> FA\n    CM[Configuration Management] --> FA\n\n    AT[Atomic Transactions] --> FT[Fault Tolerance]\n    MR[Modular Redundancy] --> FT\n    \n    FA --> FH[Fault Handling]\n    FD --> FH\n    FT --> FH\n```","n":0.054}}},{"i":108,"$":{"0":{"v":"Software Test Plan","n":0.577},"1":{"v":"\n## What must be included?\n\n![](/assets/images/2022-04-26-13-40-52.png)\n\n## Major items\n\n### 1.0 Introduction\n\nProvides an overview of the test plan document. This document describes both the test plan and test procedures\n\n### 1.1 Goals and objectives\n\nOverall goal and objectives of the test process are described. Lists all (or most) of test cases.\n\n### 1.2 Statement of scope\n\nA description of the scope of software testing. Functionality, features, or behavior to be tested is described. Additionally, any functionality, features, or behavior that is not to be tested is described.\n\n### 1.3 Major constraints\n\nAny business, product, or technical constraints that affect testing are described here.\n\n### 2.0 Test plan\n\nThe overall testing strategy and project management issues that are required to properly execute the test plan are described here.\n\n### 2.1 Software to be tested\n\nThe software to be tested are identified by name. Exclusions are also identified.\n\n### 2.2.1 Unit testing\n\nThe strategy for unit testing is described. This includes the components that will undergo unit testing. Test cases are not described here.\n\n### 2.2.2 Integration testing\n\nThe strategy for integration testing is described. This includes a discussion of the order of integration by function. Test cases are not described here.\n\n### 2.2.3 System testing\n\nThe system testing strategy is described.\n\n## 2.2.4 Acceptance testing\n\nThe validation testing strategy is described. This includes the order of validation by function. Test cases are not described here.\n\n### 3.0 Test procedures\n\nThis section describes the test procedures. Test tactics and test cases are included.\n\n### 3.1 Software to be tested\n\nThe software to be tested is identified. Excluded software is also identified.\n\n### 3.2 Testing procedure\n\nThe testing procedure is described.\n\n### 3.2.1 Unit test cases\n\nTest cases for unit testing are described.\n\n### 3.2.1 Stubs/Drivers\n\nStubs and drivers for component `i` are described.\n\n### 3.2.2 Integration testing\n\nThe integration testing procedure is described.\n\n### 3.2.2.1 Testing procedure for integration\n\n### 3.2.2.2 Stubs/Drivers\n\n### 3.2.2.3 Test cases\n\n### 3.2.2.4 Expected results\n\n### 3.2.3 System testing\n\nThe system testing procedure is described.\n\n### 3.2.3.1 Testing procedure\n\n### 3.2.3.2 Test cases and purpose\n\n### 3.2.3.3 Expected results\n\n### 3.2.4 Acceptance testing\n\nThe acceptance testing procedure is described.\n\n### 3.2.4.1 Testing procedure\n\n### 3.2.4.2 Test cases and purpose\n\n### 3.2.4.3 Expected results\n\n## Goals of WMITS\n\n- Minimize time span of inspections\n- Minimize amount of paperwork\n- Provide a database of all inspections\n- Provide an automated channel for information to be requested\n\n## Context\n\nEventually, a system will be used by multiple users. This means that the system needs to be able to handle many concurrent connections.\n\n## Bug resource reports\n\nBug resource reports are used to identify bugs during testing and to identify why a bug occurred.","n":0.05}}},{"i":109,"$":{"0":{"v":"Software Quality","n":0.707},"1":{"v":"\n## What is quality\n\n- Meeting the user's needs\n    - Not wants\n- Hierarchy of needs\n    - Performs the required tasks\n    - Meets performance requirements\n    - Usable and convenient\n    - Economical and timely\n    - Reliable\n- Defects are not important to users unless they...\n    - Affect operations\n    - Cause inconvenience\n    - Waste time/money\n    - Cause loss of confidence\n\n## Defect-removal methods\n\n- Testing alone is not an effective method to remove defects\n- The principle way to fix defects are...\n    - Compiling\n    - Unit testing\n        - Effective at ensuring that the code meets basic requirements\n        - Not efficient when finding bugs in applications with variable input/state\n    - Integration testing\n    - Team inspections\n    - Personal reviews\n        - Privately reviewing the product\n        - Effective when structured & measured\n        - More efficient than testing\n\n### Design review\n\n- Produce designs that can be reviewed in stages\n1. Review against the requirements to ensure the required function is addressed by the design\n2. Verify the overall program structure and flow\n3. Check the logical constructs for correctness\n4. Check for robustness, safety, and security\n5. Check the function, method, and procedure calls to ensure proper use\n6. Check special variables, parameters, types, and files for proper use\n\n## Defect prevention\n\n- Defect prevention should follow an orderly strategy and defined process\n    - This includes gathering data, improving design methods, and prototyping\n- Set priorities for defects that are most...\n    - Frequently found\n    - Troublesome\n    - Easily prevented\n    - Annoying","n":0.066}}},{"i":110,"$":{"0":{"v":"Software Development Lifecycle","n":0.577},"1":{"v":"## Activities\n![](/assets/images/2022-02-08-13-40-32.png)\n- Application domain\n    - Requirements analysis\n        - What is the problem?\n    - System design\n        - What is the solution?\n- Solution domain\n    - Detailed design\n        - What are the best mechanisms to implement the solution?\n    - Program implementation\n        - How is the solution constructed?\n    - Testing\n        - Is the problem solved?\n    - Delivery\n        - Can the customer use the solution?\n    - Maintenance\n        - Are enhancements needed?\n## Definition\n- Software lifecycle\n    - Set of activities and their relationships to each-other to support the development of a software system\n- Typical lifecycle questions\n    - Which activities should I select for the software project?\n    - What are the dependencies between activities\n    - How should I schedule the activities?\n## SDLC Model\nA framework that describes the activities performed at each stage of a software development project.\n- [[ser216.software-development-lifecycle.model.waterfall]]\n- [[ser216.software-development-lifecycle.model.v-shaped]]\n- [[ser216.software-development-lifecycle.model.structured-evolutionary-prototyping]]\n- [[ser216.software-development-lifecycle.model.incremental]]\n- [[ser216.software-development-lifecycle.model.spiral]]\n## Agile SDLCs\nAgile SDLCs speed up or bypass one or more lifecycle phases. These are usually less formal and used for time-critical applications.\n\nAgile SDLCs are almost exclusively used now.\n### Some agile methods...\n- Adaptive Software Development (ASD)\n- Feature-Driven Development (FDD)\n- Crystal Clear\n- Dynamic Software Development Method (DSDM)\n- Scrum\n- [[ser216.software-development-lifecycle.agile-method.rapid-application-development]]\n- [[ser216.software-development-lifecycle.agile-method.extreme-programming]]\n- [[ser216.software-development-lifecycle.agile-method.rational-unified-process]]","n":0.074}}},{"i":111,"$":{"0":{"v":"Model","n":1}}},{"i":112,"$":{"0":{"v":"Waterfall Model","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-13-48-56.png)\n## Requirements\nDefines needed information, function behavior, performance, and interfaces\n## Design\nData structures, software architecture, interface representations, algorithmic details\n## Implementation\nSource code, database, user documentation, testing\n## Strengths\n- Easy to understand & use\n- Provides structure to inexperienced staff\n- Milestones are well understood\n- Sets requirement stability\n- Good for management control (plan, staff track)\n- Works well when quality is more important than cost or schedule\n## Weaknesses\n- All requirements must be known up-front\n- Deliverables created for each phrase are considered frozen - inhibits flexibility\n- Can give a false impression of progress\n- Does not reflect the problem-solving nature of software\n- Integration is one big bang at the end\n- Little opportunity for customer to preview system\n- Not entirely realistic\n## When to use\nWhen...\n- Requirements are well known\n- Product definition is **stable**\n- Technology is understood\n- New version of existing product\n- Porting an existing product to a new platform\n","n":0.085}}},{"i":113,"$":{"0":{"v":"V Shaped","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-13-59-24.png)\n- A variant of the waterfall that emphasizes the verification and validation of the product\n- Testing of the product is planned in parallel with a corresponding phase of development\n## Steps\n![](/assets/images/2022-02-08-14-07-21.png)\n## Strengths\n- Emphasize planning for verification and validation of the product in early stages of product development\n- Each deliverable must be testable\n- project management can track progress by milestones\n- Easy to use\n## Weaknesses\n- Does not handle concurrency well\n- Does not handle iteration/phases well\n- Does not handle changes in requirements\n- Does not contain risk analysis\n- Not entirely realistic\n## When to use\n- Systems requiring high reliability (e.g. hospitals)\n- All requirements known up front\n- When it can be modified to handle changing requirements beyond analysis phase\n- Solution and technology are known","n":0.092}}},{"i":114,"$":{"0":{"v":"Structured Evolutionary Prototyping","n":0.577},"1":{"v":"\n- Developers build a prototype during the requirements\n- Prototype is evaluated by end users\n- Users give corrective feedback\n- Developers further refine prototype\n- When the user is satisfied, the prototype code is brought up to the standards needed for a final product\n## Steps\n- Preliminary plan developed\n- Partial high-level paper model created\n- Model becomes source for partial requirements\n- Prototype is build with basic attributes\n- The designer builds\n    - The database\n    - User interface\n    - Algorithmic functions\n- The designer demonstrates the prototype, the user evaluates and suggest improvements\n- This loop continues until the user is satisfied\n## Strengths\n- Customers \"see\" system requirements as they are gathered\n- Developers learn from customers\n- More accurate product\n- Unexpected requirements can be accommodated\n- Steady, visible signs of progress\n- Interaction with the prototype stimulates awareness of additional needed functionality\n## Weaknesses\n- Tendency to abandon structured development for quick fixes\n- Bad reputation for \"quick-and-dirty\" methods\n- Maintainability may be poor\n- The customer may want the prototype delivered\n- Process may continue forever\n## When to use\n- Requirements unstable\n- As the requirements stage of a waterfall model\n- Developing user interfaces\n- Short-lived demonstrations\n- New, original development\n- With the analysis and design portions of object-oriented development","n":0.073}}},{"i":115,"$":{"0":{"v":"Spiral","n":1},"1":{"v":"\n![](/assets/images/2022-02-08-14-22-29.png)\n- Adds risk analysis and RAD prototyping to the waterfall model\n- Each cycle involves the same sequence of steps as the waterfall process model\n## Steps\n### Determine objectives, alternatives, and constraints\n- Objectives\n    - Functionality, performance, hardware/software interface, success factors, etc.\n- Alternatives\n    - Build, reuse, buy, subcontract, etc.\n- Constraints\n    - Cost, schedule, interface, etc.\n### Evaluate alternatives, identify, and resolve risks\n- Study alternatives relative to objectives and constraints\n- Identify risks\n- Resolve risks\n### Develop next-level product\n- Typical activities\n    - Create a design\n    - Review design\n    - Develop code\n    - Inspect code\n    - Test product  \n### Plan next phase\n- Typical activities\n    - Develop project plan\n    - Develop configuration management plan\n    - Develop test plan\n    - Develop installation plan\n## Strengths\n- Provides early indication of insurmountable risks without much cost\n- Users see the system early because of prototyping\n- Critical high-risk functions are developed first\n- The design can be flawed\n- Users can be closely tied to all lifecycle steps\n- Early and frequent feedback from users\n- Cumulative costs assessed frequently\n## Weaknesses\n- Time spent for evaluating risks too large for small or low-risk projects\n- Time spent planning may be excessive\n- The model is complex\n- Risk assessment expertise is required\n- Spiral may continue indefinitely\n- Developers must be reassigned during non-development phase activities\n- May be hard to define milestones that indicate readiness\n## When to use\n- When creation of a prototype is appropriate\n- When costs and risk evaluation is important\n- For medium to high-risk projects\n- Long-term project commitment unwise because of potential changes to economic priorities\n- Users unsure of needs\n- Requirements are complex\n- New product line\n- Significant changes are expected","n":0.062}}},{"i":116,"$":{"0":{"v":"Incremental","n":1},"1":{"v":"\n![](/assets/images/2022-02-08-14-17-19.png)\n- Construct a partial implementation of a total system\n- Then slowly add increased functionality\n- The incremental model prioritizes requirements of the system and then implements them in groups\n- Each subsequent release of the system adds function to the previous release, until all designed functionality has been implemented\n## Strengths\n- Develop major functions first\n- Each release delivers an operational product\n- Customer can respond to each build\n- Uses \"divide-and-conquer\" breakdown of tasks\n- Lowers initial delivery cost\n- Initial delivery is faster\n- Customers get vital functionality early\n- Risk of changing requirements is reduced\n## Weaknesses\n- Requires good planning and design\n- Requires early definition of a functional system and increments\n- Well-defined module interfaces are required\n- Total cost of system is not lower (though it may appear to be)\n## When to use\n- Risk, funding, schedule, program complexity, or need for early realization of benefits\n- Most requirements are known up-front but are expected to evolve\n- A need to get basic functionality to the market early\n- On projects which have lengthy development schedules\n- On projects with new technology","n":0.077}}},{"i":117,"$":{"0":{"v":"Agile Method","n":0.707}}},{"i":118,"$":{"0":{"v":"Rational Unified Process (RUP)","n":0.5},"1":{"v":"## Phases\n![](/assets/images/2022-02-10-14-06-44.png)\n\n- Inception\n    - Establish business case for system\n- Elaboration\n    - Develop an understanding of the problem domain and system architecture\n- Construction\n    - System design\n    - Programming and testing\n- Transition\n    - Deploy the system in its operating environment\n## Iteration\n- In-phase iteration\n    - Each phase is iterative with results developed incrementally\n- Cross-phase iteration\n    - As shown by the loop in the model, the whole set of phases may be enacted incrementally","n":0.12}}},{"i":119,"$":{"0":{"v":"Rapid Application Development (RAD)","n":0.5},"1":{"v":"## Phases\n- Requirements planning phase\n    - A workshop utilizing structured discussion of business problems\n- User description phase\n    - Automated tools capture information from users\n- Construction phase\n    - Productivity tools\n        - Code generators, screen generators, etc.\n- Cutover phase\n    - Installation of the system\n    - User acceptance testing\n    - User training\n## Strengths\n- Reduced cycle time and improved productivity\n- Fewer people = fewer costs\n- Time-box approach mitigates cost and risk\n- Customer involved throughout the complete cycle\n- Focus moves from documentation to code ([[WYSIWYG|ser216.what-you-see-is-what-you-get]])\n- Uses modeling concepts to capture information about business, data, and processes\n## Weaknesses\n- Accelerated development process must give quick responses\n- Risk of never achieving closure\n- Hart to use with legacy systems\n- Requires a modularized system\n- Developers and customers must be committed to rapid-fire activities\n## When to use\n- Reasonably well-known requirements\n- User involved throughout the life-cycle\n- Project can be timeboxed\n- Functionality delivered in increments\n- High performance not required\n- Low technical risks\n- System can be modularized","n":0.081}}},{"i":120,"$":{"0":{"v":"Extreme Programming (XP)","n":0.577},"1":{"v":"\nFor small-to-medium-sized teams developing software with vague or rapidly changing requirements.\n\n^when-to-use\n\nCoding is the key activity throughout a software project.\n\n- Communication among teammates is done with code\n- Life cycle and behavior of complex objects defined in test cases (also in code)\n\n## XP is \"extreme\" because...\n\nCommonsense practices are taken to extreme levels:\n\n- If **code reviews** are good, review code _all the time_ (pair programming)\n- If **testing** is good, everybody will test _all the time_\n- If **simplicity** is good, keep the system in the simplest design that supports current functionality\n- If **design** is good, everybody will design (refactor) daily\n  - There are no formal design documents (UML or otherwise)\n- If **architecture** is important, everybody will work at defining and refining the architecture\n- If **integration testing** is important, build and integrate test several times a day\n- If **short iterations** are good, make iterations as short as possible (hours rather than weeks)\n\n## Principles\n\n1. Planning game\n   - Determine scope of the next release by combining business priorities and technical estimates\n2. Small releases\n   - Put a simple system into production\n   - Then release new versions in short cycles\n3. Metaphor\n   - All development is guided by a simple shared story of how the system works\n4. Simple design\n   - System is designed as simply as possible\n   - Extra complexity is removed as soon as discovered\n5. Testing\n   - Programmers continuously write unit tests\n   - Customers write tests for features\n6. Refactoring\n   - Programmers continuously restructure the system without changing behavior\n7. Pair-programming\n   - All production code is written with two programmers at one machine\n8. Collective ownership\n   - Anyone can change any code anywhere at any time\n9. Continuous integration\n   - Integrate and build the system every time a task is completed\n10. 40-hour week\n    - Work no more than 40 hours a week as a rule\n    - This is not closely followed\n11. On-site customer\n    - A user is on the time and available full-time to answer questions\n12. Coding standards\n    - Programmers write all code in accordance with rules emphasizing communications through the code\n","n":0.055}}},{"i":121,"$":{"0":{"v":"Process Measurement","n":0.707},"1":{"v":"## Principles\n- To be useful, measurements should be...\n    - Gathered for a specific purpose\n        - Time spent taking measurements is time not spent coding!\n    - Explicitly defined\n        - You need to be sure where things go\n    - Properly managed & used\n        - If not handled well, the measurements are useless\n- Measuring your process will not improve it\n    - You must make process changes to achieve lasting improvement\n## Purposes\n- We measure to...\n    - Understand and manage change\n    - Predict or plan for the future\n    - Compare one product, process, or organization with another\n    - Determine adherence to standards\n        - These standards are usually related to the product or industry, e.g. FAA standards for flight equipment\n    - Provide a basis for control\n## Types\n- We generally need objective and explicit measures\n- To be useful, we need relationships that correlate...\n    - Program size vs development hours\n    - Cost distributions\n    - Defect densities\n- We also see a controlling or predictive capability\n    - Actions to reduce test defects\n    - Steps to improve review quality\n    - Means to improve review quality\n## In PSP\n- The basic [[PSP|ser216.personal-software-process]] data are...\n    - Program size\n    - Time spent by phase\n    - Defects found and injected by phase\n- Both actual and estimated data are gathered on every item\n- Measures derives from this data include...\n    - Support planning\n    - Characterizing process quality\n### Size measures\n- The goals of the [[PSP|ser216.personal-software-process]] size measures are to...\n    - Define a consistent size measure\n    - Establish a basis for normalizing time and defect data\n    - Help make better size estimates\n- Some questions this data can help to answer are...\n    - What size program did I plan to develop?\n    - How good was my size estimate?\n    - What was the completed size of the finished program>\n### Time measures\n- The goals of the PSP time measures are to...\n    - Determine how much time you spend in each PSP phase\n    - Help you to make better time estimates\n- Typical questions this data can help answer are\n    - How much time did I spend by PSP phase?\n    - How much time did I *plan* to spend by PSP phase?\n### Defect measures\n- The goals of the PSP defect measures are to...\n    - Provide a historical baseline of defect data\n    - Understand the numbers and types of defects injected\n    - Understand the relative cost of removing defects in each [[PSP|ser216.personal-software-process]] phase\n- Some questions this data can help answer are...\n    - How many defects did I make in each phase?\n    - How many defects did I remove in each phase\n    - How much time did it take to find and fix each defect?\n## Size vs development effort\n- The principle requirement:\n    - If the size measure is not directly related to the development cost, it is not worth using\n- There are many possible measures\n    - Database elements\n    - Lines of code (LOC)\n    - Function points\n    - Pages, screens, scripts, reports\n- The size measure should be sensitive to the environment (language, design, and development practice)\n## Relationship to development\n- File sizes are often an acceptable measure for document development\n- Lines of code is usually a good measure for developing source programs like C/C++/Java/Python\n- Other possible measures are function points, screens, modules, database elements, and maintenance fixes\n## Measurement precision\n- When two people measure the same thing, will they get the same result\n    - To do so requires a precise measurement definition\n- The measurement must also be properly applied\n    - Different people will likely have different definitions of database elements\n        - C++ code does not equate to assembly\n        - New lines of code are not the same as modified lines of code\n        - Logical lines of code do not equate to physical lines of code\n        - One person's lines of code may not relate to someone else's lines of code\n## Machine countable\n- Manual size counting is time-consuming and inaccurate\n- Automated counters will only work for defined product characteristics\n- Counters can be complex, depending on the...\n    - Size definition selected\n    - Counting method used\n## Suitable for early planning\n- For making the initial project plans, measures are needed that you can visualize at the beginning of the job\n    - For a house, square feet predicts cost\n    - Few people can visualize a house in terms of square feet of living space\n    - Number of rooms is more intuitive\n- Intuitive size measures are generally needed for initial plans\n- Unfortunately, popular intuitive measures are not often measurable, and popular measurable measures are not intuitive\n- Function points\n    - Intuitive\n    - Not directly measurable\n- Lines of code\n    - Not intuitive\n    - Directly measurable\n## LOC measurement\n- The suggested [[PSP|ser216.personal-software-process]] lines of code measure uses logical (vs physical) lines of code\n- Statement specifications\n    - Executable\n    - Non-executable\n    - Counted statement types\n- Application\n    - Language and code type\n    - Origins and usage\n## Counting program size\n- Logical lines\n    - Invariant to editing changes\n    - Correlate with development environment\n    - Uniquely definable\n    - Complex to count\n- Physical lines\n    - Easy to count\n    - Not invariant\n    - Must be precisely defined for each case\n- The [[PSP|ser216.personal-software-process]] uses a coding standard and a physical counter for lines-of-code size measures\n    - Defining coding standard\n    - Physical line for each logical line\n- This standard must be faithfully followed\n- Then, physical line counting equals logical line counting\n## PSP's LOC counting standard\n- Count all statements, this includes...\n    - `begin`, `end`, `if`, `then`, `else`\n    - `{`, `}`, `;`, `.`\n    - Declarations, directives, headers, etc.\n- Do not count blanks, comment lines, or automatically generated code\n- Count added and modified code for measuring and estimating development productivity\n## Size accounting\n- For small products, size tracking can be done manually, but requires care\n- For larger products, size tracking requires an accounting system\n- Size accounting provides an orderly and precise way of tracking size changes through multiple product versions\n## Messages to remember\n- To effectively plan and manage your work, you must measure product size\n- For different types of work, use different size measures\n- For each measure, size must correlate with development time\n    - If the size measure does not correlate, it will not be useful\n- Every size measure should be precisely defined and automatically countable","n":0.032}}},{"i":122,"$":{"0":{"v":"Personal Software Process (PSP)","n":0.5},"1":{"v":"\n\r\nSoftware now controls most systems- business, finance, military, etc. The cost, schedule and quality of software is now a critical business concern.\r\n\r\n## Big projects frequently fail\r\n\r\n- With increased scale, projects are more troubled\r\n- | Project Size    | People | Time (Months) | Success Rate |\r\n  | --------------- | ------ | ------------- | ------------ |\r\n  | Less than $750K | 6      | 6             | 55%          |\r\n  | $750K to $1.5M  | 12     | 9             | 33%          |\r\n  | $1.5M to $3M    | 25     | 12            | 25%          |\r\n  | $3M to $6M      | 40     | 18            | 15%          |\r\n  | $6M to $10M     | +250   | +24           | 8%           |\r\n  | Over $10M       | +500   | +36           | 0%           |\r\n- This is a problem of scale- current practices do not scale up\r\n\r\n## Why projects fail\r\n\r\n- Large and small projects fail for four reasons\r\n  - Project commitments are unrealistic\r\n  - The larger the project, the less influence engineers have\r\n  - If engineers don't have anything to say, nobody will listen\r\n  - Larger projects are harder to control\r\n- Today, few developers have personal plans\r\n  - Without plans, you cannot know job status\r\n  - If you don't know where you are, management can't understand job status\r\n  - If management doesn't understand job status, they can't manage projects\r\n- Quality problems get worse at scale\r\n  - If any part has quality problems, the system will have quality problems\r\n  - If developers do not manage quality, their teams cannot manage quality\r\n  - When unmanaged, quality will always be poor\r\n- To be effective, teams need leadership and coaching\r\n  - Leaders build team motivation and commitment\r\n  - Coaching develops team cohesion\r\n  - Cohesive, motivated, and committed teams do the best work\r\n\r\n---\r\n\r\n## PSP Principles\r\n\r\n- The quality of a software system is determined by the _quality of its worst components_\r\n- The quality of a software component is governed by the individual who developed it\r\n- The quality of a software component is governed by the quality of the process used to develop it\r\n- The key to quality is the individual developerâs skill, commitment, and personal process discipline\r\n- As a software professional, you are responsible for your personal process\r\n- You should measure, track, and analyze your work\r\n- You should learn from your performance variations\r\n- You should incorporate lessons learned into your personal practices\r\n\r\n## What does PSP provide?\r\n\r\n- A stable, mature PSP allows you to...\r\n  - Estimate and plan your work\r\n  - Meet your commitments\r\n  - Resist unreasonable commitment pressures\r\n- You will also...\r\n  - Understand your current performance\r\n  - Be better equipped to improve your capability\r\n- The PSP providesâ¦\r\n  - A proven basis for developing and using an industrial-strength personal process\r\n  - A discipline that shows you how to improve your personal process\r\n  - The data to continually improve the productivity, quality, and predictability of your work\r\n\r\n## What is the PSP?\r\n\r\n- The PSP is a personal process for developing software or for doing any other defined activity\r\n- The PSP includes...\r\n  - Defined steps\r\n  - Forms\r\n  - Standards\r\n- It provides a measurement and analysis framework for characterizing and managing your personal work\r\n- It is also a defined procedure that helps you to improve your personal preference\r\n\r\n## The PSP process flow\r\n\r\n![](assets/images/psp-process-flow.drawio.png)\r\n\r\n## Learning the PSP\r\n\r\n- The PSP is introduced in six upward-compatible steps\r\n- You write one or more module-sized programs at each step\r\n- You gather and analyze data on your work\r\n- You use the results to improve your personal performance\r\n- PSP0: You establish a measured performance baseline.\r\n- PSP1: You make size, resource, and schedule plans.\r\n- PSP2: You practice defect and yield management.\r\n  ![](/assets/images/2022-02-03-13-56-11.png)\r\n\r\n---\r\n\r\n## Phase order\r\n\r\n- The PSP looks like a waterfall process, but it's not\r\n  - The phase order is determined by the dependencies between phases\r\n- Start with a plan\r\n- ```mermaid\r\n  flowchart BT\r\n      Plan --> Design\r\n      Design --> Code\r\n      Code --> Compile\r\n      Compile --> Test\r\n  ```\r\n\r\n## Process flow\r\n\r\n- When programs are small or well understood, you can execute the phases in order...\r\n  1. Produce a plan\r\n  2. Design all modules\r\n  3. Code all modules\r\n  4. Compile the coded program\r\n  5. Summarize the project data during the postmortem\r\n\r\n```mermaid\r\nflowchart LR\r\n    Requirements((Requirements)) --> Plan\r\n    Plan --> Design\r\n    Design --> Code\r\n    Code --> Compile\r\n    Compile --> Test\r\n    Test --> Postmortem\r\n    Postmortem --> Program((Program and\\nProject Data))\r\n```\r\n\r\n^process-flow\r\n\r\n## Cyclic Process flow\r\n\r\n- Large programs or those that are not well understood may require an iterative approach\r\n- Two modules are identified during the design- A and B\r\n- Each module is separately coded, compiled, and tested\r\n\r\n```mermaid\r\nflowchart LR\r\n    Requirements((Requirements)) --> Plan\r\n    Plan --> Design\r\n    Design --> Code\r\n    subgraph Module A\r\n        Code --> Compile\r\n        Compile --> Test\r\n    end\r\n    Test --> Code2\r\n    subgraph Module B\r\n        Code2[Code] --> Compile2[Compile]\r\n        Compile2 --> Test2[Test]\r\n    end\r\n    Test2 --> Postmortem\r\n    Postmortem --> Program((Program and\\nProject Data))\r\n```\r\n\r\n- There can be more than two cycles & modules\r\n\r\n## Process scripts\r\n\r\n- Process scripts provide \"expert-level\" guidance on how to use the process\r\n  - They are one or two pages long\r\n  - They describe...\r\n    - Purpose\r\n    - Entry criteria\r\n    - General guidelines\r\n    - Steps\r\n    - Exit criteria\r\n\r\n## PSP Scripts\r\n\r\n- Planning\r\n  - Estimate the development time\r\n- Development\r\n  - Develop the product using your current methods\r\n- Postmortem\r\n  - Complete the project plan summary with the time spent\r\n  - Defects found and injected in each phase\r\n- Design\r\n  - Design the program using your current design methods\r\n- Coding\r\n  - Implement the program\r\n- Compile\r\n  - Compile until defect-free\r\n- Test\r\n  - Test the program and fix all defects\r\n- Record defects in the defect log and time per phase in the time log\r\n\r\n## Using Process Scripts\r\n\r\n- Process scripts guide you through the process\r\n- You should\r\n  - Check the entry criteria before starting a phase\r\n  - Record the phase start time\r\n  - Perform the phase steps and instructions\r\n  - Record defects as they are found and corrected\r\n  - Check the exit criteria before ending a phase\r\n  - Record the phase end time\r\n  - Go to the next phase\r\n- Force yourself to use this paradigm until it becomes a habit\r\n\r\n## PSP Measures and Forms\r\n\r\n- PSP measures...\r\n  - Time\r\n    - Track time in phase\r\n  - Defects\r\n    - Record defects as they are found and fixed\r\n- PSP has four forms:\r\n  - PSP Project Plan Summary\r\n    - Summarizes planned and actual time and defects by phase\r\n  - PSP Time Recording Log\r\n    - Used to record time\r\n  - PSP Defect Recording Log\r\n    - Used to record defects\r\n  - PSP Defect Type Standard\r\n    - Used to define standard defect types\r\n","n":0.031}}},{"i":123,"$":{"0":{"v":"Object","n":1},"1":{"v":"\nA specific instance of a class.\n","n":0.408}}},{"i":124,"$":{"0":{"v":"Network Programming","n":0.707},"1":{"v":"\n## Client-server communication\n\n- The server is always running, and can have multiple clients connected to it.\n- The client connects to a socket on the server.\n- After a server accepts the communication, data is transferred through I/O streams (in Java) or sockets (in C)\n\n## Data transmission through sockets\n\n### Server\n\n```java\nint port = 8000;\nDataInputStream in;\nDataOutputStream out;\nServerSocket server;\nSocket socket;\n\nserver = new ServerSocket(port);\nsocket = server.accept(); // accept connection request from client\nin = new DataInputStream(socket.getInputStream());\nout = new DataOutputStream(socket.getOutputStream());\n\nSystem.out.println(in.readDouble()); // wait for data from client\nout.writeDouble(3.14); // send data to client\n```\n\n### Client\n\n```java\nint port = 8000;\nString host = \"localhost\";\nDataInputStream in;\nDataOutputStream out;\nSocket socket;\n\nsocket = new Socket(host, port);\nin = new DataInputStream(socket.getInputStream());\nout = new DataOutputStream(socket.getOutputStream());\n\nout.writeDouble(3.14); // send data to server\nSystem.out.println(in.readDouble()); // wait for data from server\n```\n\n## The InetAddress class\n\nThe `InetAddress` class can be used to find the IP address and host name of a client.\n\nTo get the `InetAddress` of a client, use the `getInetAddress()` method on the socket.\n\n```java\nInetAddress address = socket.getInetAddress();\n```\n\nThe `InetAddress` returned will contain the host name and IP address of the client as demonstrated below.\n\n```java\nSystem.out.println(address.getHostName());\nSystem.out.println(address.getHostAddress());\n```\n\n## Handling multiple clients\n\nMultiple clients are generally handled with some sort of loop that [[creates a new thread for each client|ser216.multithreading]].\n\n```java\nwhile (true) {\n    Socket socket = server.accept();\n    HandleTask task = new HandleTask(socket);\n    Thread thread = new Thread(task);\n    thread.start();\n}\n```\n\nThe above will create a new thread for each connected client.","n":0.069}}},{"i":125,"$":{"0":{"v":"Multithreading","n":1},"1":{"v":"\n## Thread concepts\n\n- Multiple threads on multiple processors\n    - ```mermaid\n    flowchart TD\n        C1[CPU 1] --- T1[Thread 1]\n        C2[CPU 2] --- T2[Thread 2]\n        C3[CPU 3] --- T3[Thread 3]\n    ```\n    - This is the faster approach, but does not handle shared resources well.\n- Multiple threads on single processor\n    - ```mermaid\n    flowchart TD\n        C1[CPU 1] --- T1[Thread 1]\n        C1[CPU 1] --- T2[Thread 2]\n    ```\n    - This approach allows for guaranteed ordering of threads and shared data without worrying about concurrency.\n\n## Thread class\n\n```java\npublic interface Thread {\n    public static void sleep(long millis);\n    public void start();\n    public boolean isAlive();\n    public void setPriority(int priority);\n    public void join();\n    public void yield();\n    public void interrupt();\n}\n```\n\n## Threading in Java\n\nFirst, a class implementing `Runnable` is created to represent a thread or unit of work.\n\n```java\npublic class TaskExample implements Runnable {\n    public void run() {\n        // run some code\n    }\n}\n```\n\nNext, a `Thread` object is created and given a `TaskExample` object to run.\n\n```java\n...\nTaskExample task = new ThreadExample();\n\nThread thread = new Thread(task);\n\nthread.start();\n...\n```\n\n## Yielding in Java\n\nThe `System.yield()` method is used to yield the current thread to another thread.\n\n```java\npublic void run() {\n    for (int i = 0; i < 10; i++) {\n        System.out.println(\"Thread \" + Thread.currentThread().getName() + \": \" + i);\n        System.yield(); // yield the current thread to another thread\n    }\n}\n```\n\n## Deferred execution in Java\n\nThe `Thread.sleep()` method is used to suspend the current thread for a specified amount of time.\n\n```java\npublic void run() {\n    for (int i = 1; i <= 10; i++) {\n        System.out.println(\"Thread \" + Thread.currentThread().getName() + \": \" + i);\n        try {\n            Thread.sleep(1000); // suspend the current thread for 1 second\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n## Waiting for a thread to finish\n\nThe `Thread.join()` method is used to wait for a thread to finish.\n\n```java\n...\nThread thread = new Thread(new TaskExample());\nthread.start();\ntry {\n    thread.join(); // wait for the thread to finish\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\n...\n```\n\n## Checking if a thread is alive\n\nThe `Thread.isAlive()` method is used to check if a thread is alive. It returns `true` if a thread is ready, blocked, or running. It returns `false` if a thread has not started or finished.\n\n```java\n...\nThread thread = new Thread(new TaskExample());\nthread.start();\n\nSystem.out.println(\"Thread \" + thread.getName() + \" is alive: \" + thread.isAlive()); // Thread [Thread Name] is alive: true\n...\n```\n\n## Interrupting a thread\n\nThe `Thread.interrupt()` method is used to interrupt a thread.\n\nIf the thread is currently ready or running, it will be interrupted. However, if a thread is blocked, it will revert to the ready state and throw a `java.io.InterruptedException`.\n\n```java\n...\nThread thread = new Thread(new TaskExample());\nthread.start();\n\nSystem.out.println(\"Thread \" + thread.getName() + \" is alive: \" + thread.isAlive()); // Thread [Thread Name] is alive: true\nthread.interrupt(); // interrupt the thread\nSystem.out.println(\"Thread \" + thread.getName() + \" is alive: \" + thread.isAlive()); // Thread [Thread Name] is alive: false\n...\n```\n\nThe `isInterrupted()` method is used to check if a thread has been interrupted.\n\n```java\n...\nthread.interrupt(); // interrupt the thread\nSystem.out.println(\"Thread \" + thread.getName() + \" is interrupted: \" + thread.isInterrupted()); // Thread [Thread Name] is interrupted: true\n...\n```\n\n## Stop, suspend, and resume methods\n\nWhile the `Thread` class provides the `Thread.stop()`, `Thread.suspend()`, and `Thread.resume()` methods, these are deprecated and should not be used.\n\nInstead of using these methods to indicate a thread is stopped, you can simply assign the thread variable to `null`.\n\n## Thread priority\n\nJava assigns a priority to each thread (set by default to `Thread.NORM_PRIORITY`). This can be manually set to an integer between `1` and `10` using the `Thread.setPriority()` method.\n\nThere are also provided constants for the priority levels...\n\n- `Thread.MIN_PRIORITY` (1)\n- `Thread.NORM_PRIORITY` (5)\n- `Thread.MAX_PRIORITY` (10)\n\n## Thread synchronization\n\nIf multiple threads attempt to access a shared resource, the order in which (or if) the resource is accessed is not guaranteed. If multiple threads attempt to write to a shared resource, it is possible that data will be corrupted/overwritten.\n\n```java\npublic void run() {\n    var balance = bankAccount.getBalance();\n    setBalance(balance + 1);\n}\n```\n\nFor example, if the above task is run on two threads, the two threads will both get the same balance and attempt to add 1 to the original balance, leaving the balance at `balance + 1` (instead of `balance + 2`).\n\nIt's recommended to either ensure threads wait for each other to finish, or to make a copy of the shared resource before writing to it.","n":0.038}}},{"i":126,"$":{"0":{"v":"Midterm","n":1},"1":{"v":"\n## Javadoc\n\n![[ser216.javadoc#^tags]]\n\n## SDLC\n\n![[ser216.software-development-lifecycle.model.waterfall#When-to-use]]\n\n![[ser216.software-development-lifecycle.model.v-shaped#When-to-use]]\n\n![[ser216.software-development-lifecycle.model.structured-evolutionary-prototyping#When-to-use]]\n\n![[ser216.software-development-lifecycle.model.incremental#When-to-use]]\n\n![[ser216.software-development-lifecycle.model.spiral#When-to-use]]\n\n## Agile SDLCs\n\n![[ser216.software-development-lifecycle.agile-method.rapid-application-development#When-to-use]]\n\n![[ser216.software-development-lifecycle.agile-method.extreme-programming#^when-to-use]]\n\n## Exception Handling\n\n![[ser216.exception-handling#^example-error-handling]]\n\n## PSP\n\n![[ser216.personal-software-process#^process-flow]]\n","n":0.354}}},{"i":127,"$":{"0":{"v":"JUnit","n":1},"1":{"v":"\nJava framework for writing and running [[unit tests|ser216.unit-testing]].\n\n## Classes\n\n```mermaid\nclassDiagram\n    class TestResult\n    class Test {\n        run(TestResult)\n    }\n    class TestSuite {\n        run(TestResult)\n        addTest()\n    }\n    class TestCase {\n        run(TestResult)\n        setUp()\n        tearDown()\n        runTest()\n    }\n    class ConcreteTestCase {\n        setUp()\n        tearDown()\n        runTest()\n    }\n    class UnitToBeTested\n    \n    ConcreteTestCase -- UnitToBeTested\n    TestCase <|-- ConcreteTestCase\n    Test <|-- TestCase\n    Test <|-- TestSuite\n    TestResult <.. Test\n    TestSuite *-- \"*\" Test \n```\n\n## Other features\n\n- GUI interface\n- [Integration with Visual Studio Code](https://code.visualstudio.com/docs/java/java-testing)","n":0.12}}},{"i":128,"$":{"0":{"v":"JavaFX","n":1},"1":{"v":"\n## Motivations\n\n- JavaFX is a framework for developing Java GUI programs\n- JavaFX utilizes OOP principles in its design\n\n## JavaFX vs Swing and AWT\n\n- AWT\n    - Fine for developing simple interfaces\n    - Not suited for cross-platform development\n    - Replaced largely by Swing\n- Swing\n    - Allows for painting, layout, and event handling\n    - Relies less on native GUI\n    - Replaced by JavaFX in Java 8\n\n## Basic Structure\n\n- Application\n- `start(Stage)` method\n- Stage, scene, and nodes\n- ![](/assets/images/2022-03-22-13-43-08.png)\n\n## Panes, UI controls, and shapes\n\n- Shapes such as line, circle, ellipse, rectangle, path, etc. are subclasses of `Shape`\n- `ImageView` used for displaying images\n- UI controls are subclasses of `Control`\n\n## Coordinate system\n\n- JavaFX uses a coordinate system with the origin at the top left corner\n- This means that to draw a circle in the center of a 500x500 pixel area, you would need to create a circle with the center at (250, 250)\n\n## Binding properties\n\n- Enable a target object to be bound to a source object\n- If the value in the source object changes, the target property is also changed\n- The target object is simply called a binding object or binding property\n\n## Common properties and methods\n\n### Style\n\n- Set a JavaFX CSS style\n\n### Rotate\n \n- Rotate a node\n\n### Color\n\n- `new Color(r, g, b, a)`\n\n### Font\n\n- `new Font(nname, weight, size)`\n\n### Image\n\n- `new Image(fileOrURL)`\n\n## Example of a simple JavaFX application\n\n![](/assets/images/2022-03-22-13-54-06.png)\n\n## Layout Panes\n\n- JavaFX provides panes for organizing nodes in a container\n\nClass | Description\n----- | ___________\nPane  | Base class for layout panes\nStackPane | Places nodes on top of each other in the center of the pane\nFlowPane | Places nodes row-by-row horizontally or column-by-column vertically\nGridPlane | Places nodes in a 2D grid\nBorderPane | Places nodes in the top, right, bottom, left, and center regions\nHBox | Places nodes in a single row\nVBox | Places nodes in a single column\n\n## Shapes\n\n- Classes for drawing text, lines, circles, etc.\n- Text\n- Line\n- Rectangle\n- Circle\n- Ellipse\n- Arc\n- Polygon\n- Polyline\n- Shapes are displayed on an x/y coordinate grid with the origin at the top left","n":0.055}}},{"i":129,"$":{"0":{"v":"Javadoc","n":1},"1":{"v":"\n\r\nJavadoc is a tool that generates HTML documentation (similar to [these reference pages](https://java.sun.com)) from Javadoc comments in the code.\r\n\r\n## Javadoc comments\r\n\r\n- Javadoc recognizes special comments `/** .... */` which are highlighted blue by many themes (regular comments `//` and `/* ... */` are highlighted green).\r\n- Javadoc allows you to attach descriptions to classes, constructors, fields, interfaces and methods in the generated HTML documentation by placing Javadoc comments directly before their declaration statements.\r\n\r\n## Example with (only) description\r\n\r\n```java\r\n/** Class Description of MyClass */\r\npublic class MyClass {\r\n    /** Field Description of myIntField */\r\n    public int myIntField;\r\n    /** Constructor Description of MyClass() */\r\n    public MyClass() {\r\n        // Do something ...\r\n    }\r\n}\r\n```\r\n\r\n- By default, text in a Javadoc comment will act as the description of the class, file, method, or field it is above.\r\n\r\n## Javadoc tags\r\n\r\n- Tags are keywords recognized by Javadoc which define the type of information that follows\r\n- Tags come after the description (separated by a new line)\r\n- Common tags include...\r\n  - `@author [name]`\r\n  - `@version [number or date]`\r\n  - `@param [arg name] [arg description]`\r\n  - `@return [description]`\r\n  - `@exception [exception name] [reason]`\r\n  - `@throws [exception name] [reason]`\r\n  - `@deprecated [alternative]` - marks the target as deprecated (should not be used in future work)\r\n    - Not to be confused with `@Deprecated` (which ironically is considered deprecated in favor of Javadoc)\r\n\r\n^tags\r\n\r\n### Example with tags\r\n\r\n```java\r\n/**\r\n* Description of JavaDoc sample MyClass\r\n* @author John Doe\r\n* @author Jane Doe\r\n* @version 6.0z Build 9000 Jan 3, 2018.\r\n*/\r\npublic class MyClass {\r\n    /** Description of myIntField */\r\n    public int myIntField;\r\n\r\n    /**\r\n    * Description of the constructor MyClass()\r\n    * @throws MyException Description of myException\r\n    */\r\n    public MyClass() throws myException {\r\n        // some statements...\r\n    }\r\n\r\n    /**\r\n    * Description of myMethod(int a, String b)\r\n    * @param a Description of a\r\n    * @param b Description of b\r\n    * @return Description of c\r\n    */\r\n    public Object myMethod(int a, String b) {\r\n        Object c;\r\n        // some statements...\r\n        return c;\r\n    }\r\n}\r\n```\r\n\r\n## Running Javadoc\r\n\r\n- To run Javadoc, simply run `javadoc [args] [files]` in the command line, and HTML will be generated in the current directory\r\n- Javadoc provides a variety of options as well...\r\n  - `-author` - generated documentation will include an author section\r\n    - This generally isn't used in production of closed-source projects\r\n  - `-classpath [path]` - specifies path to search for referenced `.class` files.\r\n  - `-classpathlist [path];[path];...;[path]` - specifies a list location (separated\r\n    by \";\") to search for referenced `.class` files.\r\n  - `-d [path]` - specifies where generated documentation will be saved.\r\n  - `-private` - generated documentation will include private fields and\r\n    methods (only public and protected ones are included by default).\r\n  - `-sourcepath [path]` - specifies path to search for `.java` files to generate\r\n    documentation form.\r\n  - `-sourcepathlist [path];[path];...;[path]` - specifies a list location\r\n    (separated by \";\") to search for `.java` files to generate documentation\r\n    form.\r\n  - `-version` - generated documentation will include a version section\r\n\r\n## Additional features\r\n\r\n### Links\r\n\r\nJavadoc comments can include rich links to other classes within a project using the syntax `{@link Thing}`.\r\n\r\n### Documentation\r\n\r\nOfficial documentation for Javadoc can be found [here](http://www.oracle.com/technetwork/java/javase/documentation/javadoc-137458.html).\r\n","n":0.045}}},{"i":130,"$":{"0":{"v":"Introduction","n":1},"1":{"v":"**Engineering** is the systematic application of scientific knowledge in creating and building cost-effective solutions to practical problems.\n\n**Software Engineering** is a collection of techniques, methodologies, and tools that help with the production of...\n\n- A high quality software system\n- With a given budget\n- Before a given deadline\n\n...while a change occurs.\n\nHowever, these rarely happen. Software production has a [[poor track record|ser216.introduction.space-shuttle-software]].\n## Problem-Solving\nTo problem-solve, we [[analyze|ser216.introduction.analysis]] and [[synthesize|ser216.introduction.synthesis]] using...\n- [[ser216.introduction.techniques]]\n- [[ser216.introduction.methodologies]]\n- [[ser216.introduction.tools]]\n\n## Why are software systems so complex?\n- The problem domain is difficult\n- The development process is very difficult to manage\n- Software offers extreme flexibility\n## How do software engineers deal with complexity?\n1. [[ser216.introduction.abstraction]]\n2. [[ser216.introduction.decomposition]]\n3. [[ser216.introduction.hierarchy]]","n":0.1}}},{"i":131,"$":{"0":{"v":"Tools","n":1}}},{"i":132,"$":{"0":{"v":"Techniques","n":1},"1":{"v":"\nFormal procedures for producing results using some well-defined notation.\n","n":0.333}}},{"i":133,"$":{"0":{"v":"Synthesis","n":1},"1":{"v":"\nPut the pieces together into a large structure.","n":0.354}}},{"i":134,"$":{"0":{"v":"Space Shuttle Software","n":0.577},"1":{"v":"## Columbia\n- Cost 10 Billion (millions more than planned)\n- Completed 3 years late\n- First launch had to be cancelled because of a synchronization problem\n    - Was traced back to programmer changing delay from 50 to 80 ms\n    - The likelihood of the error was small that it was unidentified throughout testing\n- Substantial errors *still* exists\n    - Astronauts were supplied with a book of known software problems","n":0.123}}},{"i":135,"$":{"0":{"v":"Methodologies","n":1},"1":{"v":"\nCollection of techniques applied across software development and unified by a philosophical approach.\n","n":0.277}}},{"i":136,"$":{"0":{"v":"Hierarchy Decomposition","n":0.707},"1":{"v":"\nAfter performing abstraction/decomposition, we could be left with chunks (classes & objects) that we view with the object model. Another way to deal with this complexity is to provide simple relationships between the chunks.\n\n## Important Hierarchies\n\n- [[ser216.introduction.hierarchy.part-of]]\n- [[ser216.introduction.hierarchy.is-kind-of]]\n","n":0.162}}},{"i":137,"$":{"0":{"v":"\"Part Of\" Hierarchy","n":0.577},"1":{"v":"\n```mermaid\nclassDiagram\n    Computer --* IO Devices\n    Computer --* CPU\n    Computer --* Memory\n    CPU --* Cache\n    CPU --* ALU\n    CPU --* Program Counter\n```","n":0.218}}},{"i":138,"$":{"0":{"v":"\"Is-Kind-Of\" Hierarchy","n":0.707},"1":{"v":"\n(aka Taxonomy)\n\n```mermaid\nflowchart TD\n    Cell --- BloodCell\n    Cell --- MuscleCell\n    Cell --- NerveCell\n    MuscleCell --- Striate\n    MuscleCell --- Smooth\n    BloodCell --- Red\n    BloodCell --- White\n    NerveCell --- Cortical\n    NerveCell --- Pyramidal\n```","n":0.183}}},{"i":139,"$":{"0":{"v":"Decomposition","n":1},"1":{"v":"\nDecomposition is a technique used to master complexity (\"divide and conquer\").\n\n## Types of Decomposition\n\n- [[ser216.introduction.decomposition.functional]]\n- [[ser216.introduction.decomposition.object-oriented]]\n- [[ser216.introduction.hierarchy]]\n\n## Which should you choose?\n\n- It depends on the language and use-case\n- [[OO|ser216.introduction.decomposition.object-oriented]] is the default decomposition method\n","n":0.171}}},{"i":140,"$":{"0":{"v":"Object-Oriented Decomposition","n":0.707},"1":{"v":"\n- The system is decomposed into classes/objects\n- Each class is a major abstraction in the application domain\n- Classes can be decomposed into smaller classes\n\n## What is This?\n\n![](/assets/images/2022-01-18-13-19-11.png)\n\n- There are multiple things you can see in this picture\n- Designing an OO structure based off the picture is up to your interpretation\n  - [[ser216.introduction.decomposition.object-oriented.eskimo]]\n  - [[ser216.introduction.decomposition.object-oriented.face]]\n- You need to know what problem you're solving!\n\n## Class Identification\n\n- Crucial to OO modeling\n- Based assumption:\n  1. We can find the classes for a new software system -\n     called Greenfield Engineering\n  2. We can identify the classes in an existing system -\n     called Reengineering\n  3. We can create a class-based interface to any system -\n     called Interface Engineering\n\n## Object Terminology\n\n### Methodology\n\n- Process for organized production of systems/software\n- Using a collection of pre-defined techniques and notational conventions\n\n### Object-Oriented Methodology\n\n- A development approach that organizes a system and collection of objects containing both data and behavior\n\n## OO Concepts\n\n### What is an Object?\n\n- An object has structure- attributes\n- An object must be an entity- a thing that can _have_ properties but is not a property\n- An object has behavior\n- An object has unique identity\n- An object is generally stated as a noun\n- A thermometer is an object, but temperature is not an object\n- [[ser216.introduction.decomposition.object-oriented.briefcase]]\n\n### What is a class?\n- A group of objects with\n   - Similar properties\n   - Common behavior\n   - Common relationships to other objects\n   - Common semantics","n":0.066}}},{"i":141,"$":{"0":{"v":"Face","n":1},"1":{"v":"\n![](/assets/images/2022-01-18-13-21-25.png)\n\n```mermaid\nclassDiagram\n    class Indian {\n        Hair\n        Dress()\n        Smile()\n        Sleep()\n    }\n    Indian *-- Face\n    class Face {\n        Nose\n        smile()\n        close_eye()\n    }\n    Face *-- \"*\" Ear\n    class Ear {\n        Size\n        listen()\n    }\n    Face *-- Mouth\n    class Mouth {\n        NrOfTheeths\n        Size\n        open()\n        speak()\n    }\n```","n":0.158}}},{"i":142,"$":{"0":{"v":"Eskimo","n":1},"1":{"v":"\n![](/assets/images/2022-01-18-13-20-41.png)\n\n```mermaid\nclassDiagram\n    class Eskimo {\n        Size\n        Dress()\n        Smile()\n        Sleep()\n    }\n    Eskimo *-- \"2..* (2 or more)\" Shoe\n    class Shoe {\n        Size\n        Color\n        Type\n        Wear()\n    }\n    Eskimo *-- Coat\n    class Coat {\n        Size\n        Color\n        Type\n        Wear()\n    }\n```\nIterative modeling could lead to...\n```mermaid\nclassDiagram\n    class Eskimo {\n        Size\n        Dress()\n        Smile()\n        Sleep()\n    }\n    Eskimo -- Outside : moves around\n    class Outside {\n        Temperature\n        Light\n        Season\n        Hunt()\n        Organize()\n    }\n    Eskimo -- Cave : lives in\n    class Cave {\n        Lighting\n        Enter()\n        Leave()\n    }\n    Cave -- \"*\" Entrance\n    Entrance -- Windhole\n    class Windhole {\n        Diameter\n    }\n    Entrance -- MainEntrance\n    class MainEntrance {\n        Size\n    }\n```\n...but is this the right model?\n\nIf it was an eskimo, yes, but it could have been a [[ser216.introduction.decomposition.object-oriented.face]].","n":0.094}}},{"i":143,"$":{"0":{"v":"Modeling a Briefcase","n":0.577},"1":{"v":"\n![](/assets/images/2022-01-18-14-13-52.png)\n\n```mermaid\nclassDiagram\n    class Briefcase {\n        Capacity\n        Weight\n        Open()\n        Close()\n        Carry()\n    }\n```\n\n## A new use\n\n```mermaid\nclassDiagram\n    class Briefcase {\n        Capacity\n        Weight\n        Open()\n        Close()\n        Carry()\n        SitOnIt()\n    }\n```\n\n## Questions\n\n- Why did we model the thing as \"Briefcase\"?\n  - The picture looked like a briefcase\n- What do we do if the `SitOnIt()` operation is the most frequently used operation?\n- What if briefcase is only used for sitting on it and never opened/closed?\n    - We've made a modeling mistake!","n":0.118}}},{"i":144,"$":{"0":{"v":"Functional Decomposition","n":0.707},"1":{"v":"\n- In Functional Decomposition, the system is decomposed into models\n- Each model is a major processing step\n- Modules can be decomposed into smaller modules.\n\n```mermaid\nflowchart TD\n    sf(System Function) --- ri0(Read Input)\n    sf --- tf0(Transform)\n    sf --- po0(Produce Output)\n    ri0 --- ri1(Read Input)\n    ri0 --- tf1(Transform)\n    ri0 --- po1(Produce Output)\n    ri1 --- o0[(...)]\n    tf1 --- o1[(...)]\n    po1 --- o2[(...)]\n    tf0 --- o3[(...)]\n    po0 --- o4[(...)]\n```\n\n...which eventually leads to something like\n\n```mermaid\nflowchart TD\n    o0[(...)] --- l(LoadR10)\n    o0 --- a(Add R1, R10)\n```\n\n## Why is Functional Decomposition Important?\n\n- Functionality is spread across the system\n- Maintainer must understand the whole system to make a single change\n- Consequences...\n  - Code that is hard to understand\n  - Code that is complex and impossible to maintain\n- Example: [[PowerPoint Autoshapes|ser216.introduction.decomposition.functional.autoshape]]\n","n":0.092}}},{"i":145,"$":{"0":{"v":"Autoshape","n":1},"1":{"v":"\n- If there is a small issue with one of the shapes, it is incredibly difficult to fix\n- Adding a new shape generally requires code reuse, also requiring a good understanding of the system\n\n```mermaid\nflowchart TD\n  Autoshape(Autoshape) --- Mouse(Mouse Click)\n  Autoshape --- Change(Change)\n  Autoshape --- Draw(Draw)\n  Change --- ChangeR(Change Rectangle)\n  Change --- ChangeO(Change Oval)\n  Change --- ChangeC(Change Circle)\n  Draw --- DrawR(Draw Rectangle)\n  Draw --- DrawO(Draw Oval)\n  Draw --- DrawC(Draw Circle)\n```\n\nEffectively you keep breaking down high level functions into smaller functions until you reach the actual code.\n","n":0.108}}},{"i":146,"$":{"0":{"v":"Analysis","n":1},"1":{"v":"\nUnderstand the nature of the problem and break the problem into pieces.\n","n":0.289}}},{"i":147,"$":{"0":{"v":"Abstraction","n":1},"1":{"v":"\nThere is an inherent human limitation to dealing with complexity. In order to simplify complex problems, software engineers use a technique called 'Chunking'. Chunking groups a collection of objects/classes. This allows unessential details to be ignored- at least temporarily.\n## Models used to provide abstractions\n- [[ser216.introduction.abstraction.system-model]]\n- [[ser216.introduction.abstraction.task-model]]\n- [[ser216.introduction.abstraction.issues-model]]\n\n[[Issue Example: Galileo vs. Church|ser216.introduction.abstraction.issue]]","n":0.14}}},{"i":148,"$":{"0":{"v":"Task Model","n":0.707},"1":{"v":"\n## PERT Chart\nProgram Evaluation & Review Technique Chart\n- What are the dependencies between tasks?\n\n## Schedule\n- How can this be done within the time limit?\n\n## Org Chart\n- What are the roles in the project or organization?","n":0.169}}},{"i":149,"$":{"0":{"v":"System Model","n":0.707},"1":{"v":"\n## Object Model\n- What is the structure of a system?\n- How are the objects related?\n\n## Functional Model\n- What are the functions of the system?\n- How is data flowing through the system?\n\n## Dynamic Model\n- How does the system react to external events?\n    - e.g. user input\n- How is the event flow in the system?","n":0.137}}},{"i":150,"$":{"0":{"v":"Issues Model","n":0.707},"1":{"v":"\n- What are the open and closed issues?\n- What constraints were posed by the client?\n- What resolutions were made?\n","n":0.229}}},{"i":151,"$":{"0":{"v":"Issue","n":1},"1":{"v":"\n## What is the center of the universe?\n- Church\n    - The Earth is the center of the universe\n    - Why? Aristotle says so\n- Galileo\n    - The sun is the center of the universe\n    - Why? Copernicus says so\n    - Also, the Jupiter's moons rotate around Jupiter, not Earth\n## Issue Modeling\n```mermaid\nflowchart TD\n    issue(Issue: What is the Center of the Universe?)\n    r1998(Resolution 1998: Church declares proposal 1 is wrong)\n    r1615(Resolution 1615: Church decides proposal 1 is right)\n    p1(Proposal 1: The Earth!)\n    p2(Proposal 2: The sun!)\n    pro1(Pro: Aristotle says so)\n    pro2(Pro: Change will disturb the people)\n    con(Con: Jupiter's moons rotate around Jupiter, not around Earth)\n    pro3(Pro: Compernicus says so)\n    issue --- r1998\n    issue --- r1615\n    issue --- p1\n    issue --- p2\n    p1 --- pro1\n    p1 --- pro2\n    p1 --- con\n    p2 --- pro3\n```\n## The \"Bermuda Triangle\" of Modeling\n![](/assets/images/2022-01-13-14-26-04.png)\nYou are both forward and reverse-engineering models and connecting them.","n":0.083}}},{"i":152,"$":{"0":{"v":"Integration Testing","n":0.707},"1":{"v":"\n## Concept\n\n- The entire system is viewed as a collection of subsystems determined during design\n- The goal of integration testing is to test all interfaces between subsystems and the interaction of subsystems\n- The integration testing strategy determined the order in which the subsystems are tested\n\n## Why integration testing?\n\n- Unit tests only test in isolation\n- Many failures result from faults in the interaction of subsystems\n    - \"Integration hell\" is one of the longest stages of debugging\n- Failures not discovered in integration testing may not be discovered until the system is deployed\n\n## Stubs & drivers\n\n![](/assets/images/2022-04-19-14-13-21.png)\n\n### Driver\n\n- A component that calls the `TestedUnit`\n- Controls test cases\n\n### Stub\n\n- A component the `TestedUnit` depends on\n- Partial implementation\n- Returns fake values\n\n## Integration testing strategies\n\n- [[ser216.integration-testing.big-bang]]\n- [[ser216.integration-testing.bottom-up]]\n- [[ser216.integration-testing.top-down]]\n- [[ser216.integration-testing.sandwich]]\n- [[ser216.integration-testing.continuous]]\n\n## Steps\n\n1. Select a component to be tested an unit test it\n2. Put the component together with any necessary drivers and stubs\n3. Test functional requirements\n4. Test subsystem decomposition\n5. Test non-functional requirements\n6. Keep records of test cases\n7. Repeat steps 1-7 until full system is tested","n":0.078}}},{"i":153,"$":{"0":{"v":"Top Down","n":0.707},"1":{"v":"\n- Tests the top layer first (without any subsystems)\n    - Stubs are required\n- Then, combines all subsystem called by the tested subsystem and test the resulting collection\n- Repeat until all subsystems are included\n\n![](/assets/images/2022-04-19-14-21-21.png)\n\n## Advantages\n\n- Test cases defined in terms of functionality of the system\n- Does not require drivers\n\n## Disadvantages\n\n- Stubs can be difficult to implement\n- Large amounts of stubs are required\n- Some interfaces cannot be tested separately","n":0.122}}},{"i":154,"$":{"0":{"v":"Sandwich","n":1},"1":{"v":"\n- Combines top-down with bottom-up\n- Viewed as having 3 layers...\n    - Target in the middle\n    - Layer above the target\n    - Layer below the target\n- Testing converges to the target\n\n![](/assets/images/2022-04-19-14-23-32.png)\n\n## Advantages\n\n- Top and bottom layers can be tested in parallel\n    - Better for groups of developers\n\n## Disadvantages\n\n- Does not test individual subsystems & interfaces thoroughly\n    - Fixed with [[ser216.integration-testing.sandwich.modified-sandwich]] testing","n":0.129}}},{"i":155,"$":{"0":{"v":"Modified Sandwich","n":0.707},"1":{"v":"\n- Two tests in parallel:\n    - Test 1...\n        - Middle layer with drivers and stubs\n        - Top layer with stubs\n        - Bottom layer with drivers\n    - Test 2...\n        - Top layer accessing middle layer (replaces drivers)\n        - Bottom accessed by middle layer (bottom layer replaces stubs)","n":0.147}}},{"i":156,"$":{"0":{"v":"Continuous","n":1},"1":{"v":"\n## Continuous build\n\n- Build from day one\n- Test from day one\n- Integrate from day one\n- System is always capable of running\n\n## Required tools\n\n- Continuous build server\n- Automated tests with high coverage\n- Tool-supported refactoring\n- Software configuration management\n- Issue tracking\n\n![](/assets/images/2022-04-19-14-29-49.png)\n\n## Steps\n\n## Advantages\n\n- Ensures a service is always running\n- Allows for debugging without taking down the system\n- Helps prevent bugs from being introduced\n\n## Disadvantages\n\n- Requires constant maintenance\n- Requires building on top of old code\n","n":0.119}}},{"i":157,"$":{"0":{"v":"Bottom Up","n":0.707},"1":{"v":"\n- The subsystems in the lowest layer of the hierarchy are tested individually\n- Then, the next subsystems that depend on the subsystems in the lowest layer are tested\n- This is repeated until all subsystems are combined into a single system\n- Drivers are responsible for performing the integration testing\n\n![](/assets/images/2022-04-19-14-17-03.png)\n\n## Advantages\n\n- No stubs needed\n- Useful for integration testing of...\n    - Object-oriented systems\n    - Real-time systems\n    - Systems with strict performance requirements\n\n## Disadvantages\n\n- Tests the most important subsystem last (user interface)\n- Requires a *lot* of drivers","n":0.11}}},{"i":158,"$":{"0":{"v":"Big Bang","n":0.707},"1":{"v":"\n- Combine all subsystems into a single unit and test it\n- This is **not** a recommended strategy\n\n![](/assets/images/2022-04-19-14-15-05.png)\n\n- Does not do a good job of isolating issues\n\n## Advantages\n\n- It's easy to write big-bang tests\n\n## Disadvantages\n\n- Big-bang testing rarely accomplishes its goal\n- Does not scale","n":0.152}}},{"i":159,"$":{"0":{"v":"Instance","n":1},"1":{"v":"\nAn instance represents a phenomenon with attributes represented with their values.","n":0.302}}},{"i":160,"$":{"0":{"v":"Exception Handling","n":0.707},"1":{"v":"\n## Motivations\n\nWhen a program runs into a runtime error, the program terminates abnormally.\n\nThe purpose of exception handling is to handle these errors (either continue running or terminate) gracefully.\n\n## Examples\n\n- Examples of exceptions\n  - [[ser216.exception-handling.example.quotient]]\n  - [[ser216.exception-handling.example.quotient-with-if]]\n  - [[ser216.exception-handling.example.quotient-with-exception]]\n- Exception advantages\n  - [[ser216.exception-handling.examples.quotient-with-method]]\n\n## Exception Types\n\n![](/assets/images/2022-02-22-13-54-59.png)\n\n### System Errors\n\n- Thrown by JVM and represented in the `Error` class\n- This class describes internal system errors, which rarely occur\n  - If these errors do occur, handling them is often futile- the operation cannot continue\n\n![](/assets/images/2022-02-22-13-57-31.png)\n\n### Exceptions\n\n- Errors caused by your program and external circumstances\n- These can be caught and handled\n\n![](/assets/images/2022-02-22-13-58-28.png)\n\n### Runtime Exceptions\n\n- Caused by programming errors, such as bad casting, accessing an out-of-bounds array index, and numeric errors\n- These can generally be eliminated at compile-time and indicate bugs in the underlying program\n\n![](/assets/images/2022-02-22-13-59-37.png)\n\n## Checked Exceptions vs. Unchecked Exceptions\n\n- `RuntimeException`, `Error`, and their subclasses are known as [[unchecked exceptions|ser216.exception-handling.unchecked-exception]]\n- All other exceptions are known as [[checked exceptions|ser216.exception-handling.checked-exception]], meaning that the compiler forces the programmer to check and deal with the exceptions\n\n## Declaring, Throwing, and Catching Exceptions\n\n### Declaring exceptions\n\nEvery method must state the types of checked exceptions it might throw.\n\n```java\npublic void myMethod() throws IOException {...}\n\npublic void myMethod() throws IOException, OtherException {...}\n```\n\n### Throwing Exceptions\n\nExceptions are thrown by using the `throw` statement and passing a valid `Exception` object.\n\n```java\n...\nthrow new IllegalArgumentException(\"Radius cannot be negative\");\n...\n```\n\n### Catching Exceptions\n\nExceptions are caught using a try-catch statement.\n\n```java\ntry {\n    doUnsafeOperation(); // statements that may throw exceptions\n} catch (Exception1 e) {\n    handleException1();\n} catch (Exception2 e) {\n    handleException2();\n}\n```\n\n## Catch or Declare Checked Exceptions\n\n- Java forces you to deal with [[checked exceptions|ser216.exception-handling.checked-exception]]\n- If a method declares a [[checked exception|ser216.exception-handling.checked-exception]] (i.e., any exception other than an `Error` or `RuntimeException`), you must invoke it in a try-catch block or declare to throw the exception in the calling method\n\n## Rethrowing Exceptions\n\n```java\ntry {\n    doUnsafeOperation();\n} catch (TheException e) {\n    performOperationBeforeExiting();\n    throw e;\n}\n```\n\n- The statement `throw e` rethrows the exception `e` so that other handlers get a change to process the exception\n- Sometimes you may need to throw a new exception with additional information along with the original exception\n  - These is called _chained exceptions_\n\n## The `finally` Clause\n\n```java\ntry {\n    doUnsafeOperation();\n} catch (Exception e) {\n    handleException();\n} finally {\n    finalizeOperation();\n}\n```\n\n^example-error-handling\n\n- Code in the `finally` block is always executed, whether an exception in the `try` block is thrown or not\n\n## Cautions When Using Exceptions\n\n- Exception handling separates error-handling from normal program flow\n  - This makes programs easier to read and modify\n- However, exception handling usually requires more time and resources\n  - It requires instantiating exception objects, rolling back the call stack, and propagating the errors to the calling methods\n\n## When to Throw an Exception\n\nYou should throw an exception when...\n\n- An exception occurs in a method\n- You want the exception to be handled by the calling method\n\nYou should not throw an exception when...\n\n- You can handle the exception in the method where it occurs\n- You are dealing with simple, expected situations\n\n## Creating Custom Exceptions\n\n- Use the exception class `Exception` whenever possible\n- Create custom exception classes if the pre-defined exception classes do not meet your needs\n- Declare custom exception classes by extending the `Exception` class or one of its subclasses\n\n### Examples of Custom Exceptions\n\n- [[ser216.exception-handling.example.invalid-radius-exception]]\n- [[ser216.exception-handling.example.circle-with-radius-exception]]\n","n":0.044}}},{"i":161,"$":{"0":{"v":"Example","n":1}}},{"i":162,"$":{"0":{"v":"Quotient","n":1},"1":{"v":"```java\nimport java.util.Scanner; \n\npublic class Quotient {\n\n  public static void main(String[] args) {\n\n    Scanner input = new Scanner(System.in);\n   \n    // Prompt the user to enter two integers\n    System.out.print(\"Enter two integers: \");\n\n    int number1 = input.nextInt();\n    int number2 = input.nextInt();\n\n    System.out.println(number1 + \" / \" + number2 + \" is \" + (number1 / number2));\n  }\n}\n```","n":0.136}}},{"i":163,"$":{"0":{"v":"Quotient with Method","n":0.577},"1":{"v":"\n```java\nimport java.util.Scanner; \n\npublic class QuotientWithMethod { \n\n  public static int quotient(int number1, int number2) {\n\n    if (number2 == 0)\n      throw new ArithmeticException(\"Divisor cannot be zero\");\n\n    return number1 / number2;\n  }\n\n  public static void main(String[] args) {\n\n    Scanner input = new Scanner(System.in);\n\n    // Prompt the user to enter two integers\n    System.out.print(\"Enter two integers: \");\n    int number1 = input.nextInt();\n    int number2 = input.nextInt();\n\n    try {\n      int result = quotient(number1, number2);\n      System.out.println(number1 + \" / \" + number2 + \" is \"  + result);\n    }\n    catch (Exception ex) {\n      System.out.println(\"Exception: an integer \" + \"cannot be divided by zero \");\n    }\n\n    System.out.println(\"Execution continues ...\");\n  }\n}\n```\n- This enables a method to throw an exception to its caller\n- Without this capability, a method must handle the exception or terminate the program","n":0.089}}},{"i":164,"$":{"0":{"v":"Quotient with If","n":0.577},"1":{"v":"```java\nimport java.util.Scanner; \n\npublic class QuotientWithIf {\n\n  public static void main(String[] args) {\n\n    Scanner input = new Scanner(System.in);\n\n    // Prompt the user to enter two integers\n    System.out.print(\"Enter two integers: \");\n\n    int number1 = input.nextInt();\n    int number2 = input.nextInt();\n\n    if (number2 != 0)\n      System.out.println(number1 + \" / \" + number2 + \" is \" + (number1 / number2));\n    else\n      System.out.println(\"Divisor cannot be zero \");\n  }\n}\n```","n":0.126}}},{"i":165,"$":{"0":{"v":"Quotient with Exception","n":0.577},"1":{"v":"```java\nimport java.util.Scanner; \n\npublic class QuotientWithException {\n\n  public static void main(String[] args) {\n\n    Scanner input = new Scanner(System.in);\n  \n    // Prompt the user to enter two integers\n    System.out.print(\"Enter two integers: \");\n\n    int number1 = input.nextInt();\n    int number2 = input.nextInt();\n\n    try {\n\n      if (number2 == 0)\n        throw new ArithmeticException(\"Divisor cannot be zero\");\n \n      System.out.println(number1 + \" / \" + number2 + \" is \" + (number1 / number2));\n    }\n\n    catch (Exception ex) {\n      System.out.println(\"Exception: an integer \" + \"cannot be divided by zero \");\n    }\n    System.out.println(\"Execution continues ...\");\n  }\n}\n```","n":0.107}}},{"i":166,"$":{"0":{"v":"Invalid Radius Exception","n":0.577},"1":{"v":"```java\npublic class InvalidRadiusException extends Exception {\n\n  private double radius;\n\n  /** Construct an exception */\n\n  public InvalidRadiusException(double radius) {\n    super(\"Invalid radius \" + radius);\n    this.radius = radius;\n  }\n\n  /** Return the radius */\n  public double getRadius() {\n    return radius;\n  }\n}\n```","n":0.16}}},{"i":167,"$":{"0":{"v":"Circle with Radius Exception","n":0.5},"1":{"v":"```java\npublic class CircleWithRadiusException {\n\n  /** The radius of the circle */\n  private double radius;\n\n  /** The number of the objects created */\n  private static int numberOfObjects = 0;\n\n  /** Construct a circle with radius 1 */\n  public CircleWithRadiusException() {\n    this(1.0);\n  }\n\n  /** Construct a circle with a specified radius */\n  public CircleWithRadiusException(double newRadius) {\n\n    try {\n      setRadius(newRadius);\n      numberOfObjects++;\n    }\n    catch (InvalidRadiusException ex) {\n      ex.printStackTrace();\n    }\n  }\n\n  /** Return radius */\n  public double getRadius() {\n    return radius;\n  }\n\n  /** Set a new radius */\n  public void setRadius(double newRadius) throws InvalidRadiusException {\n\n    if (newRadius >= 0)\n      radius =  newRadius;\n    else\n      throw new InvalidRadiusException(newRadius);\n  }\n\n  /** Return numberOfObjects */\n  public static int getNumberOfObjects() {\n    return numberOfObjects;\n  }\n\n  /** Return the area of this circle */\n  public double findArea() {\n    return radius * radius * 3.14159;\n  }\n}\n```\n","n":0.087}}},{"i":168,"$":{"0":{"v":"Unchecked Exceptions","n":0.707},"1":{"v":"\n- In most cases, unchecked exceptions reflect programming logic errors that are not recoverable, e.g.\n    - `NullPointerException` is thrown if you access an object through a reference variable before an object is assigned to it\n    - `IndexOutOfBoundsException` is thrown if you access an element in an array outside the bounds of the array\n- These are logic errors that should be corrected in the program\n- Unchecked exceptions can occur anywhere in a program\n- To avoid cumbersome overuse of try-catch blocks, Java does not mandate you write code to catch unchecked exceptions","n":0.105}}},{"i":169,"$":{"0":{"v":"Checked Exception","n":0.707},"1":{"v":"\n- Checked exceptions can occur because of a variety of factors, however generally stem from bad inputs, e.g.\n    - `ClassNotFoundException` thrown when attempting to load in a class by its string name when it does not exist\n    - `IOException` signals an I/O exception of some kind has occured\n- Java requires these kinds of exceptions to be handled\n- These can usually be handled gracefully without terminating the program\n","n":0.122}}},{"i":170,"$":{"0":{"v":"Event Driven Programming","n":0.577},"1":{"v":"\n## Procedural vs event-driven programming\n\n- Procedural code is executed in procedural order- by line\n    - This is ideal for code that does not need to wait for other code to finish\n- *Event-driven* code is executed when an event occurs\n    - This is ideal for handling user input and other events that may occur at any time\n\n## GUI events\n\n- Source object (e.g. button)\n- Event object (e.g. mouse click)\n- Listener/handler object\n    - Contains a method for processing the event\n    - In languages that support functional programming, this can just be a private function or lambda expression\n\n```mermaid\nflowchart LR\n    button[Button\\n\\nClicking a button fires an action event] --> event[Event\\n\\nAn event is an object]\n    event --> handler[Handler\\n\\nThe event handler proecesses the event]\n```\n\n## Example of java event handling\n\n```java\npublic class HandleEvent extends Application {\n    public void start(Stage primaryStage) {\n        ...\n        // \"okButton\" is a button object\n        // \"cancelButton\" is a button object\n        OKHandlerClass handler1 = new OKHandlerClass();\n        okButton.setOnAction(handler1);\n        CancelHandlerClass handler2 = new CancelHandlerClass();\n        cancelButton.setOnAction(handler2);\n        ...\n        primaryStage.show();\n    }\n}\n\nclass OKHandlerClass implements EventHandler<ActionEvent> {\n    public void handle(ActionEvent event) {\n        ... // will be called when the \"okButton\" is clicked\n    }\n}\n\nclass CancelHandlerClass implements EventHandler<ActionEvent> {\n    public void handle(ActionEvent event) {\n        ... // will be called when the \"cancelButton\" is clicked\n    }\n}\n```\n\n## Events\n\n- An event is a type of signal to the program that something has happened\n- An event is often generated by external entities (e.g. a user or another program)\n\n## Event classes\n\n```mermaid\nclassDiagram\n    MouseEvent --> InputEvent\n    KeyEvent --> InputEvent\n\n    ActionEvent --> Event\n    InputEvent --> Event\n    WindowEvent --> Event\n\n    Event --> EventObject\n```\n\nThese classes are found in the JavaFX event package. Subclasses of `EventObject` deal with events such as...\n\n- Button actions\n- Window events\n- Mouse movements\n- Keystrokes\n\n## Common events\n\n![](/assets/images/2022-03-29-14-03-22.png)\n\n## The delegation model\n\n```java\nvar okButton = new Button(\"OK\");\nvar handler = new OKHandlerClass();\nokButton.setOnAction(handler);\n```\n\n## Inner class listeners\n\n- A listener class is designed to create a listener object for a specific event\n- Because the listener class is only designed for a specific event, it is not reusable\n- This makes it ideal to use a private or inner class to handle the event\n- Because the listener class will only be used for one event, it can also be declared as a static class to avoid the need to instantiate it\n\n## Inner classes\n\n- An inner class is a class inside another class\n- This can make programs simple and allowing access to the internal state of the classes, eliminating the need to pass the parent class as a parameter\n\n## Anonymous inner classes\n\n- Must always extend a superclass or implement an interface\n- Cannot have an explicit 'extends' or 'implements' clause\n- Must implement all abstract methods of the superclass\n- Always uses the no-arg constructor from its superclass to create an instance\n- Compiled as `OuterClassName$n.class` (where `n` is a number)\n- ![](/assets/images/2022-04-02-15-34-02.png)\n\n## Lambda expressions\n\n- ![](/assets/images/2022-04-02-15-35-18.png)","n":0.047}}},{"i":171,"$":{"0":{"v":"Class","n":1},"1":{"v":"A class represents a concept.\n- Encapsulates state (attributes) and behavior (operations)\n    - Each attribute has a type\n    - Each operation has a signature\n- The class name is the only mandatory information\n```mermaid\nclassDiagram\n    class TariffSchedule {\n        zone2price\n        getZones()\n        getPrice()\n    }\n```\n^main\n\n([[ser216.uml.diagrams.class]])","n":0.162}}},{"i":172,"$":{"0":{"v":"UML","n":1},"1":{"v":"\nUnified Modeling Language (UML) is designed to visualize the design of systems in a standardized syntax. UML implements many concepts of OO (Object-Oriented) design.\n\n## What is UML?\n- Non-proprietary standard for modeling software systems\n- Convergence of notations\n    - OMT\n    - Booch\n    - OOSE\n- Current version: UML 2.5\n- Commercial tools\n    - Rational\n    - Together\n    - Visual Architect\n- Open-source tools\n    - ArgoUML\n    - StarUML\n    - Umbrello\n\n## Modeling with UML\n- You can model 80% of problems using about 20% of UML\n### [[ser216.uml.diagrams.use-case]]\n### Class diagrams\n- Describe the static structure of the system\n- Composed of...\n    - Objects\n    - Attributes\n    - Associations\n### Sequence diagrams\n- Describe the dynamic behavior between objects of the system\n### State-chart diagrams\n- Describe the dynamic behavior of an individual object\n## Activity diagrams\n- Describe the dynamic behavior of a system\n\n## Building Blocks\nThe building blocks of UML are [[ser216.uml.things]], [[ser216.uml.relationships]], and [[ser216.uml.diagrams]].\n","n":0.086}}},{"i":173,"$":{"0":{"v":"Diagrams","n":1}}},{"i":174,"$":{"0":{"v":"Use-Case Diagrams","n":0.707},"1":{"v":"\nDescribe the functional behavior of the system as seen by the user\n- Used during requirements elicitation and analysis to represent external behavior\n- An Actor represents a role\n```mermaid\nsequenceDiagram\n    actor Passenger\n```\n- A use-case represents a class of functionality provided by the system\n- The textual use-case description consists of 6 parts...\n    1. Unique name\n    2. Participating actors\n    3. Entry conditions\n    4. Exit conditions\n    5. Flow of events\n    6. Special Requirements\n## <<extends\\>> relationship\n- Used to extend use-cases\n- ![](/assets/images/2022-01-20-14-29-15.png)\n## <<includes\\>> relationship\n- Represents functionality in more than one use-case\n- ![](/assets/images/2022-01-20-14-30-14.png)","n":0.109}}},{"i":175,"$":{"0":{"v":"State Diagram","n":0.707},"1":{"v":"\nState Diagrams model the behavior of the system in response to external and internal events.\n![](/assets/images/2022-01-25-14-36-27.png)\n## Purpose\n- Show the system's responses to stimuli\n- Show system states\n- Used to represent state machine models\n## Examples\n- [[ser216.uml.diagrams.state.microwave-oven-example]]\n- [[ser216.uml.diagrams.state.phd-candidate-example]]\n- [[ser216.uml.diagrams.state.seminar-search-example]]","n":0.169}}},{"i":176,"$":{"0":{"v":"Seminar Search Example","n":0.577},"1":{"v":"\n![](/assets/images/2022-01-25-14-35-22.png)","n":1}}},{"i":177,"$":{"0":{"v":"Phd Candidate Example","n":0.577},"1":{"v":"\n![](/assets/images/2022-01-25-14-34-55.png)","n":1}}},{"i":178,"$":{"0":{"v":"Microwave Oven Example","n":0.577},"1":{"v":"\n## State diagram of a microwave oven\n![](/assets/images/2022-01-25-14-28-22.png)\n## States for the microwave oven\n| State      | Description                                                                                                                                                                                                                     |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Waiting    | The oven is waiting for input. The display shows the current time.                                                                                                                                                              |\n| Half Power | The oven power is set to 300 watts. The display shows âHalf powerâ.                                                                                                                                                             |\n| Full Power | The oven power is set to 600 watts. The display shows âFull powerâ.                                                                                                                                                             |\n| Set Time   | The cooking time is set to the userâs input value. The display shows the cooking time selected and is updated as the time is set.                                                                                               |\n| Disabled   | Oven operation is disabled for safety. Interior oven light is on. Display shows âNot readyâ.                                                                                                                                    |\n| Enabled    | Oven operation is enabled. Interior oven light is off. Display shows âReady to cookâ.                                                                                                                                           |\n| Operation  | Oven in operation. Interior oven light is on. Display shows the timer countdown. On completion of cooking, the buzzer is sounded for five seconds. Oven light is on. Display shows âCooking completeâ while buzzer is sounding. |\n## Stimuli for the microwave oven\n| Stimulus    | Description                                    |\n| ----------- | ---------------------------------------------- |\n| Half Power  | The user has pressed the half-power button.    |\n| Full Power  | The user has pressed the full-power button.    |\n| Timer       | The user has pressed one of the timer buttons. |\n| Number      | The user has pressed a numeric key.            |\n| Door Open   | The oven door switch is not closed.            |\n| Door Closed | The oven door switch is closed.                |\n| Start       | The user has pressed the Start button.         |\n| Cancel      | The user has pressed the Cancel button.        |\n","n":0.061}}},{"i":179,"$":{"0":{"v":"Class Diagrams","n":0.707},"1":{"v":"\nClass diagrams represent the structure of the system.\n\n## When are Class Diagrams used?\n- During requirements analysis to model application domain concepts\n- During system design to model subsystems\n- During object design to specify the detailed behavior and attributes of classes\n```mermaid\nclassDiagram\n    class TariffSchedule {\n        number zone2price\n        Zone getZones()\n        Price getPrice(Zone zone)\n    }\n    class Trip {\n        Zone zone\n        Price price\n    }\n    TariffSchedule \"*\" -- \"*\" Trip\n```\n## What is a class?\n![[ser216.class#^main]]\n## Associations\n![[ser216.uml.diagrams.class.associations#^overview]]\n## Aggregation\n![[ser216.uml.diagrams.class.aggregation#^main]]\n## Inheritance\n![[ser216.uml.diagrams.class.inheritance#^main]]\n## Packages\n![[ser216.uml.things.grouping#package]]","n":0.119}}},{"i":180,"$":{"0":{"v":"Inheritance","n":1},"1":{"v":"\nAnother special case of an association denoting a \"kind-of\" hierarchy.\n\nSimplifies the analysis model by introducing taxonomy. The children classes inherit the attributes and operations of parent classes.\n\n```mermaid\nclassDiagram\n    Button <|-- CancelButton\n    Button <|-- ZoneButton\n```\n^main","n":0.174}}},{"i":181,"$":{"0":{"v":"Associations","n":1},"1":{"v":"\nAssociations denote relationships between classes.\n\nThe multiplicity of an association end denotes how many objects the instance of a class can legitimately reference.\n\n```mermaid\nclassDiagram\n    class TarifSchedule {\n        enum getZones()\n        Price getPrice()\n    }\n    class TripLeg {\n        Price price\n        Zone zone\n    }\n    TarifSchedule \"*\" -- \"*\" TripLeg\n```\n^overview\n## 1-to-1 Associations\n```mermaid\nclassDiagram\n    class Country {\n        string name\n    }\n    class CapitalCity {\n        string name\n    }\n    Country \"1\" -- \"1\" CapitalCity\n```\n## 1-to-Many Associations\n```mermaid\nclassDiagram\n    class Polygon {\n        void draw()\n    }\n    class Point {\n        number x\n        number y\n    }\n    Polygon -- \"*\" Point\n```\n## Many-to-Many Associations\n```mermaid\nclassDiagram\n    StockExchange \"*\" -- \"*\" Company\n    class Company {\n        string tickerSymbol\n    }\n```","n":0.103}}},{"i":182,"$":{"0":{"v":"Aggregation","n":1},"1":{"v":"\nA special case of association denoting a \"conists-of\" hierarchy.\n\nThe aggregate is the parent class, and the components are children classes\n\n```mermaid\nclassDiagram\n    ExhaustSystem o-- Muffler\n    ExhaustSystem o-- Tailpipe\n    Muffler : number diameter\n    Tailpipe : number diameter\n```\n^main\n## Composition\nA string form of aggregation denoted by a solid diamond.\n\nThe lifetime of component instances are controlled by the aggregate (they cannot exist independently).\n\n```mermaid\nclassDiagram\n    TicketMachine *-- \"3\" ZoneButton\n```","n":0.128}}},{"i":183,"$":{"0":{"v":"Activity Diagrams","n":0.707},"1":{"v":"\nAn activity diagram is a special case of a state chart diagram. The states are activities (\"functions\"). This diagram is useful for depicting the workflow in a system.\n```mermaid\nflowchart LR\n    1(Handle\\nIncident) --> 2(Document\\nIncident)\n    2 --> 3(Archive\\nIncident)\n```\n^main\n## When to use\nA variety of content can be modeled with activity diagrams, including [[ser216.uml.diagrams.activity.decisions]], [[ser216.uml.diagrams.activity.concurrency]], and [[ser216.uml.diagrams.activity.grouping]].\n## Difference between state-chart diagrams\n- State-chart diagrams focus on the set of attributes of a single abstraction (object, system)\n    - ![](/assets/images/2022-01-27-13-46-08.png)\n- Activity diagrams focus on the data flow in a system\n    - ![](/assets/images/2022-01-27-13-46-34.png)","n":0.109}}},{"i":184,"$":{"0":{"v":"Grouping of Activities","n":0.577},"1":{"v":"\nActivities may be grouped into [[swimlanes|ser216.uml.diagrams.activity.grouping.swimlanes]] to denote the object or subsystem that implements the activities.\n![](/assets/images/2022-01-27-13-41-25.png)","n":0.25}}},{"i":185,"$":{"0":{"v":"Swimlanes","n":1},"1":{"v":"\nUsed in process flow diagrams, or flowcharts, that visually distinguishes job sharing and responsibilities for sub-processes of a business process. Swimlanes may be arranged either horizontally or vertically.\n![](/assets/images/2022-01-27-13-43-11.png)","n":0.189}}},{"i":186,"$":{"0":{"v":"Decisions","n":1},"1":{"v":"\n![](/assets/images/2022-01-27-13-39-34.png)","n":1}}},{"i":187,"$":{"0":{"v":"Concurrency","n":1},"1":{"v":"\nActivity diagrams can be used to model the synchronization of multiple activities or splitting the flow of control.\n![](/assets/images/2022-01-27-13-40-23.png)","n":0.236}}},{"i":188,"$":{"0":{"v":"Things","n":1},"1":{"v":"\n'Things' are the most important building block of UML. There are 4 'Things' in UML:\n- [[ser216.uml.things.structural]]\n- [[ser216.uml.things.behavioral]]\n- [[ser216.uml.things.grouping]]\n- [[ser216.uml.things.annotational]]\n","n":0.229}}},{"i":189,"$":{"0":{"v":"Structural","n":1},"1":{"v":"\nStructural things are used to define the static parts of models, representing physical and conceptual elements.\n\n## Class\nRepresents a set of objects having similar responsibilities\n\n|Class|\n|-|\n|Attributes|\n|Operations|\n\n## Interface\nDefines a set of operations which specify the responsiblity of the class\n\n|Interface|\n|-|\n||\n\n## Collaboration\nDefines an interaction between elements.\n```mermaid\nflowchart TD\n    A[window : UserInterface] -->|makeReservation| B[myHotel : Hotel];\n```\n## Use Case\nA set of actions performed by a system for a specific goal.\n```mermaid\nflowchart LR\n    id1([Use case])\n```\n## Component\nA physical part of a system\n```mermaid\nflowchart TD\n    A[Component];\n```\n## Node\nA physical element that exists at run-time\n```mermaid\nflowchart TD\n    A[Node];\n```\nAn edge between two notes denotes a relationship between the corresponding entities.","n":0.104}}},{"i":190,"$":{"0":{"v":"Grouping","n":1},"1":{"v":"\nA mechanism to group UML elements together.\n\n## Package\nThe only thing available to group things.\n- Help you organize UML models to increase readability\n- Can use the UML package mechanism to organize classes into subsystems\n![](/assets/images/2022-01-25-14-13-24.png)","n":0.174}}},{"i":191,"$":{"0":{"v":"Behavioral","n":1},"1":{"v":"\nBehavioral Things are the dynamic parts of UML models.\n## Interaction\nEvents in a state machine, e.g. `EvCapsLockPressed` in the state machine below.\n## State Machine\n```mermaid\nstateDiagram-v2\n    [*] --> CapsLockOff\n    CapsLockOff --> CapsLockOn : EvCapsLockPressed\n    CapsLockOn --> CapsLockOff : EvCapsLockPressed\n```\n","n":0.167}}},{"i":192,"$":{"0":{"v":"Annotational","n":1},"1":{"v":"\nAnnotational things are used to label UML- they act as comments. The only annotational element is a note.\n","n":0.236}}},{"i":193,"$":{"0":{"v":"MAT-266","n":1},"1":{"v":"\nCalculus for Engineers II\n\n[Syllabus](assets/mat266_syllabus.pdf)\n\n| Instructor       | Matthew Isom                                                              |\n| ---------------- | ------------------------------------------------------------------------- |\n| **Office Hours** | Tues. and Thurs. 3:00-4:00 PM on [Zoom](https://asu.zoom.us/j/3082246524) |\n\n## Course Overview\n\n- Integral calculus\n\n(click \"Go to text\" for more information or see the corresponding section in the book available on [Pearson](https://canvas.asu.edu/courses/107500/external_tools/171283))\n\n## [6.1] Velocity, Position, and Displacement\n\n- [[mat266.velocity]]\n- [[mat266.position]]\n- [[mat266.displacement#Finding-the-displacement]]\n- [[mat266.position#Finding-the-future-position]]\n- [[mat266.acceleration#Velocity-from-acceleration]]\n- [[mat266.net-change-and-future-value#Net-change-and-future-value]]\n\n## [6.2] Regions between curves\n\n- [[mat266.regions-between-curves#Area-of-a-region-between-two-curves]]\n\n## [6.3] Volume by slicing\n\n- [[mat266.general-slicing-method]]\n- [[mat266.disk-method]]\n- [[mat266.washer-method]]\n\n## [6.4] Volume by shells\n\n- [[mat266.shell-method#Definition]]\n\n## [6.5] Length of curves\n\n- [[mat266.arc-length]]\n\n## [6.6] Surface area\n\n- [[mat266.surface-area#Definition]]\n\n## [6.7] Physical applications\n\n- [[mat266.mass]]\n- [[mat266.work#Definition]]\n- [[mat266.force-and-pressure]]\n\n## [8.2] Integration by Parts\n\n- [[mat266.integration-by-parts]]\n\n## [8.3] Trigonometric Integrals\n\n- [[mat266.trigonometric-integrals.integrating-powers-of-sin-and-cos]]\n- [[mat266.trigonometric-integrals.integrating-products-of-powers-of-sin-and-cos]]\n- [[mat266.trigonometric-integrals.reduction-formulas]]\n- [[mat266.trigonometric-integrals.integrating-products-of-powers-of-tan-and-sec]]\n\n## [8.4] Trigonometric Substitution\n\n- [[mat266.trigonometric-substitution]]\n\n## [8.5] Partial Fractions\n\n- [[mat266.partial-fractions]]\n\n## [8.6] Integration Strategies\n\n- [[mat266.simsons-rule]]\n\n## [9.1] Differential Equations\n\n- [[mat266.differential-equations]]\n\n## [10.1] Sequences & Infinite Series\n\n- [[mat266.sequences]]\n\n## [10.2] Sequences\n\n- [[mat266.sequences]]\n\n## [10.3] Geometric Series\n\n- [[mat266.geometric-sums]]\n- [[mat266.geometric-series]]\n- [[mat266.alternating-series]]\n\n## [11.2] Types of Series\n\n- [[mat266.power-series]]\n- [[mat266.polynomial-approximation]]\n- [[mat266.taylor-polynomials]]\n\n## [11.3] Taylor Series\n\n- [[mat266.taylor-series]]\n\n## Final Exam\n\n- [[mat266.final-exam]]","n":0.083}}},{"i":194,"$":{"0":{"v":"Trigonometric Integrals","n":0.707}}},{"i":195,"$":{"0":{"v":"Reduction Formulas","n":0.707},"1":{"v":"\n## Reduction formulas\n\nAssume $n$ is a positive integer.\n\n1. $\\int{\\sin^n{x}}\\,dx=-\\frac{\\sin^{n-1}{x}\\cos{x}}{n}+\\frac{n-1}{n}\\int{\\sin^{n-2}{x}}\\,dx$\n2. $\\int{\\cos^n{x}}\\,dx=\\frac{\\cos^{n-1}{x}\\sin{x}}{n}+\\frac{n-1}{n}\\int{\\cos^{n-2}{x}}\\,dx$\n3. $\\int{\\tan^n{x}}\\,dx=\\frac{\\tan^{n-1}{x}}{n-1}-\\int{\\tan^{n-1}{x}}\\,dx$, $n\\neq1$\n4. $\\int{\\sec^n{x}}\\,dx=\\frac{sec^{n-2}{x}\\tan{x}}{n-1}+\\frac{n-2}{n-1}\\int{sec^{n-2}{x}}\\,dx$, $n\\neq1$\n\n## Example\n\nEvaluate $\\int{\\tan^4{x}}\\,dx$.\n\n### Solution\n\nReduction formula 3 gives\n$$\n\\int{tan^4{x}}\\,dx=\\frac13\\tan^3{x}-\\int{tan^2{x}}\\,dx\n$$\n$$\n=\\frac13\\tan^3{x}-(\\tan{x}-\\int{\\tan^0{x}}\\,dx)\n$$\n$$\n=\\frac13\\tan^3{x}-\\tan{x}+x+C\\text.\n$$\n\nAn alternative solution uses the identity $tan^2{x}=sec^2{x}-1$:\n$$\n\\int{\\tan^4{x}}\\,dx=\\int{\\tan^2{x}(\\sec^2{x}-1)}\\,dx\n$$\n$$\n=\\int{\\tan^2{x}(\\sec^2{x}-1)}\\,dx-\\int{\\tan^2{x}}\\,dx\n$$\n\nThe substitution $u=\\tan{x}$, $du=\\sec^2{x}$ is used in the first integral, while the identity $\\tan^2{x}=sec^2{x}-1$ is used in the second integral:\n$$\n\\int{tan^4{x}}\\,dx=\\int{\\tan^2{x}\\sec^2{x}}\\,dx-\\int{\\tan^2{x}}\\,dx\n$$\n$$\n=\\int{u^2}\\,du-\\int{(\\sec^2{x}-1)}\\,dx\n$$\n$$\n=\\frac{u^3}{3}-\\tan{x}+x+C\n$$\n$$\n=\\frac13\\tan^3{x}-\\tan{x}+x+C\\text.\n$$","n":0.149}}},{"i":196,"$":{"0":{"v":"Integrating Products of Powers of Tan and Sec","n":0.354},"1":{"v":"\nIntegrals of the for $\\int{\\tan^m{x}\\sec^n{x}}\\,dx$ are evaluated using methods analogous to those used for $\\int{\\sin^m{x}}\\,dx$.\n\nFor example, if $n$ is an even positive integer, we split off a factor of $\\sec^2{x}$ and write the remaining even power of $\\sec{x}$ in terms of $\\tan{x}$. If $m$ is odd, we split off a factor of $\\sec{x}\\tan{x}$, which prepares the integral for the substitution $u=\\sec{x}$. If $m$ is even and $n$ is odd, the integrand is expressed as a polynomial in $\\sec{x}$, each of whose terms are handled by a [[reduction formula|mat266.trigonometric-integrals.reduction-formulas]].","n":0.107}}},{"i":197,"$":{"0":{"v":"Integrating Products of Powers of Sin and Cos","n":0.354},"1":{"v":"\nNow that we know [[mat266.trigonometric-integrals.integrating-powers-of-sin-and-cos]], we can apply the half-angle formulas to integrate products of powers of sin and cos.\n\n## Example\n\nEvaluate the following integrals:\n\n1. $\\int{\\sin^4{x}\\cos^2{x}}\\,dx$\n2. $\\int{\\sin^3{x}\\cos^{-2}{x}}\\,dx$\n\n### Solution\n\n1. When both powers are even positive integers, the half-angle formulas can be used:\n$$\n\\int{\\sin^4{x}\\cos^2{x}}\\,dx=\\int{(\\frac{1-\\cos{2x}}{2})^2(\\frac{1+\\cos{2x}}{2})^2}\\,dx\n$$\nWhen expanded...\n$$\n=\\frac18\\int{(1-\\cos{2x}-\\cos^2{2x}+\\cos^3{2x})}\\,dx\n$$\nThe third term in the integrand is rewritten with a half angle formula. For the last term, a factor of $\\cos{2x}$ is written in terms of $\\sin{2x}$ to prepare for a $u$-substitution:\n$$\n\\int{\\sin^4{x}\\cos^2{x}}\\,dx=\\frac18\\int{(1-cos{2x}-(\\frac{1+\\cos{4x}}{2})\\,dx}+\\frac18\\int{(1-\\sin^2{2x})\\cos{2x}}\\,dx\n$$\nFinally, the integrals are evaluated, using the substitution $u=\\sin{2x}$ for the second integral. After simplification, we find that\n$$\n\\int{\\sin^4{x}\\cos^2{x}}\\,dx=\\frac{1}{16}x-\\frac{1}{64}\\sin{4}-\\frac{1}{48}\\sin^3{2x}+C\\text.\n$$\n\n2. When at least one power is odd, the following approach works:\n$$\n\\int{\\sin^3{x}\\cos^{-2}{x}}\\,dx=\\int{sin^2{x}\\cos^{-2}{x}\\sin{x}}\\,dx\n$$\n$$\n=\\int{(1-\\cos^2{x})\\cos^{-2}{x}\\sin{x}}\\,dx\n$$\n$$\n=-\\int{(1-u^2)u^{-2}}\\,du\n$$\n$$\n=\\int{(1-u^{-2})}\\,du=u+\\frac1u+C\n$$\n$$\n=\\cos{x}+\\sec{x}+C\\text.\n$$","n":0.1}}},{"i":198,"$":{"0":{"v":"Integrating Powers of sin x and cos x","n":0.354},"1":{"v":"\n## Pythagorean Identities\n\n$$\n\\cos^2{x}+sin^2{x}=1\n$$\n\n$$\n1+\\tan^2{x}=\\sec^2{x}\n$$\n\n$$\n\\cot^2{x}+1=\\csc^2{x}\n$$\n\n## Half-Angle Formulas\n\nWith even powers of $\\sin{x}$ or $\\cos{x}$, we use the half-angle formulas\n\n$$\n\\sin^2{x}=\\frac{1}{2}(1-\\cos{2x})\\text{ and }\\cos^2{x}=\\frac{1}{2}(1+\\sin{2x})\n$$\n\nto reduce the power in the integrand:\n\n$$\n\\int{\\sin^4{x}}\\,dx=\\int{(\\frac{1-\\cos{2x}}{2})^2}\\,dx\n$$\n","n":0.204}}},{"i":199,"$":{"0":{"v":"Work","n":1},"1":{"v":"\nThe change in energy when a force causes a displacement of an object. For example, carrying a refrigerator up a flight of stairs.\n\nIf a *constant* force $F$ displaces an object a distance $d$ in the direction of the force, the work done is $\\text{work}=\\text{force}*\\text{distance}$.\n\nCalculus deals with **variable** forces:\n![](/assets/images/2022-02-08-23-00-37.png)\n\n## Definition\nThe work done by a variable force $F$ in moving an object along a line from $x=a$ to $x=b$ in the direction of the force is\n$$\nW=\\int_a^b{F(x)}{dx}\\text.\n$$\n\n## Lifting problems\n![](/assets/images/2022-02-08-23-02-48.png)\n\nThe work required to lift this chain is\n$$\nW=\\int_0^L{\\rho g(L-y)}{dy}\n$$\n$L$ is the distance to be lifted, $\\rho$ is the [[mat266.mass]] of the object, and $g$ represents gravity.\n\n($g$ being gravity is almost always $9.8$)\n\n## Pumping problems\nSuppose a fluid such as water is pumped out of a tank to a height $h$ above the bottom of the tank. How much work is required, assuming the tank is full of water?\n![](/assets/images/2022-02-08-23-13-55.png)\n### Procedure\n1. Draw a $y$-axis in the vertical direction\n2. For $a\\leq y\\leq b$, find the cross-sectional area $A(y)$ of the horizontal slices and the distance $D(y)$ the slices must be lifted\n3. The work required to lift the water is\n$$\nW=\\int_a^b{\\rho gA(y)D(y)}{dy}\\text.\n$$\n### Example\n![](/assets/images/2022-02-08-23-19-15.png)\n\nThe resulting integral is\n$$\nW=\\int_0^{10}{\\rho gA(y)D(y)}{dy}\n$$\n$$\nA(y)=\\pi r^2=\\pi 5^2=25\\pi\n$$\n$$\nD(y)=15-y\n$$\n$$\nW=\\int_0^{10}{\\rho*(9.8)*(25\\pi)(15-y)*}{dy}\n$$\n$$\n=25\\pi\\rho(9.8)\\int_0^{10}{(15-y)}{dy}\n$$","n":0.073}}},{"i":200,"$":{"0":{"v":"Washer Method","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-22-05-37.png)\n## Definition about the $x$-axis\nLet $f$ and $g$ be continuous functions with $f(x)\\geq g(x)\\geq0$ on $[a,b]$. Let $R$ be the region bounded by the curves $y=f(x)$ and $y=g(x)$, and the lines $x=a$ and $x=b$. When $R$ is revolved about the $x$-axis, the volume of the resulting solid of revolution is\n$$\nV=\\int_a^b{\\pi f(x)^2-\\pi g(x)^2}{dx}\\text.\n$$\n## Definition about the $y$-axis\nLet $p$ and $q$ be continuous functions with $p(y)\\geq q(y)\\geq0$ on $[c,d]$. Let $R$ be the region bounded by the curves $x=p(y)$ and $x=q(y)$, and the lines $y=c$ and $y=d$. When $R$ is revolved about the $y$-axis, the volume of the resulting solid of revolution is\n$$\nV=\\int_a^b{\\pi p(y)^2-\\pi q(y)^2}{dy}\\text.\n$$\n","n":0.099}}},{"i":201,"$":{"0":{"v":"Volume","n":1},"1":{"v":"The amount of space occupied by a 3-dimensional object.\n","n":0.333}}},{"i":202,"$":{"0":{"v":"Velocity","n":1},"1":{"v":"\nThe *velocity* of an object at time $t$ is $v(t)=s\\prime(t)$, $s$ being the [[position|mat266.position]] of the object.","n":0.243}}},{"i":203,"$":{"0":{"v":"U-Substitution","n":1},"1":{"v":"\nLet $u=g(x)$, where $g$ is differentiable on an interval, $I$, and let $f$ be continuous on the range of $g$, then \n$$\n\\int{f(g(c))g\\prime(x)}{dx}=\\int{f(u)}{du}\n$$\n![](/assets/images/2022-02-16-13-48-33.png)","n":0.213}}},{"i":204,"$":{"0":{"v":"Trigonometric Substitution","n":0.707},"1":{"v":"\n## Integrals involving $a^2-x^2$\n\nSuppose you are faced with an integral whose integrand contains the term $a^2-x^2$, where $a$ is a positive constant. Observe what happens when $x$ is replaced with $a\\sin{\\theta}$:\n\n(Replace $x$ with $a\\sin{\\theta}$)\n$$\na^2-x^2=a^2-(a\\sin{\\theta})^2\n$$\n(Simplify)\n$$\n=a^2-a^2\\sin^2{\\theta}\n$$\n(Factor)\n$$\na^2(1-\\sin^2{\\theta})\n$$\n($1-sin^2{\\theta}=\\cos^2{\\theta}$)\n$$\n=a^2\\cos^2{\\theta}\\text.\n$$\n\n### Example: Area of a circle\n\nVerify area of a circle of radius $a$ is $\\pi a^2$.\n\n#### Solution\n\nThe function $f(x)=\\sqrt{a^2-x^2}$ describes the upper half of a circle centered at the origin with radius $a$.\n\n![](/assets/images/2022-03-02-12-57-05.png)\n\nThe region under this curve on the interval $[0,a]$ is a quarter-circle. Therefore, the area of a full circle is\n$$\n4\\int_0^a{\\sqrt{a^2-x^2}}\\,dx\\text.\n$$\n\n### Example: Sine substitution\n\nEvaluate $\\int{\\frac{1}{(16-x^2)^{\\frac32}}\\,dx}$.\n\n#### Solution\n\nThe factor $16-x^2$ has the for $a^2-x^2$ with $a=4$, so we can use the substitution $x=4\\sin{\\theta}$ to evaluate the integral.\n\nIt follows that $dx=4\\cos{\\theta}\\,d\\theta$. We now simplify $(16-x^2)^{\\frac32}$:\n\n(Substitute $x=4\\sin{\\theta}$)\n$$\n(16-x^2)^{\\frac32}=(16-(4\\sin{\\theta})^2)^{\\frac32}\n$$\n(Factor)\n$$\n=(16(1-\\sin^2{\\theta}))^{\\frac32}\n$$\n($1-\\sin^2{\\theta}=\\cos^2{\\theta}$)\n$$\n=(16\\cos^2{\\theta})^{\\frac32}\n$$\n(Simplify)\n$$\n=64\\cos^3{\\theta}\\text.\n$$\n\nReplacing the factors $(16-x^2)^{\\frac32}$ and $dx$ of the original integral with appropriate expressions in $\\theta$ yields:\n\n$$\n\\int{\\frac{dx}{(16-x^2)^{\\frac32}}}=\\int{\\frac{4\\cos{\\theta}}{64\\cos^3{\\theta}}}\\,d\\theta\n$$\n(Simplify)\n$$\n=\\frac{1}{16}\\int{\\sec^2{\\theta}}\\,d\\theta\n$$\n(Evaluate the integral)\n$$\n=\\frac{1}{16}\\tan{\\theta}+C\\text.\n$$\n\nThe final step is to express this result in terms of $x$.\n\nWe can do this using a reference triangle showing the relationship between $x$ and $\\theta$:\n\n![](/assets/images/2022-03-02-13-08-57.png)\n$$\n\\sin{\\theta}=\\frac{x}{4}\n$$\n$$\n\\tan{\\theta}=\\frac{x}{\\sqrt{16-x^2}}\n$$\n\nUsing this triangle, we see that $\\tan{\\theta}=\\frac{x}{\\sqrt{16-x^2}}$. This implies that\n\n$$\n\\int{\\frac{dx}{(16-x^2)^{\\frac32}}}=\\frac{1}{16}\\tan{\\theta}+C=\\frac{x}{16\\sqrt{16-x^2}}+C\n$$\n\n## Integrals involving $a^2+x^2$ or $x^2-a^2$\n\nContains... | Corresponding Substitution | Useful Identity\n--- | --- | ---\n$a^2-x^2$ | $x=a\\sin{\\theta}$, $\\frac{\\pi}{2}\\leq\\theta\\leq\\frac{\\pi}{2}$ | $a^2-a^2\\sin^2{\\theta}=a^2\\cos^2{\\theta}$\n$a^2+x^2$ | $x=a\\tan{\\theta}$, $-\\frac{\\pi}{2}\\leq\\theta\\leq\\frac{\\pi}{2}$ | $a^2+a^2\\tan^2{\\theta}=a^2\\sec^2{\\theta}$\n$x^2-a^2$ | $x=a\\sec{\\theta}$, $\\begin{cases} 0\\leq\\theta\\leq\\frac{\\pi}{2}&\\text{for }x\\geq a\\\\\\frac{\\pi}{2}<\\theta\\leq\\pi&\\text{for }x\\leq-a\\end{cases}$ | $a^2\\sec^2{\\theta}-a^2=a^2\\tan^2{\\theta}$","n":0.07}}},{"i":205,"$":{"0":{"v":"Trigonometric Functions","n":0.707},"1":{"v":"\nThe trigonometric functions are $\\sin{x}$ , $\\cos{x}$ , $\\tan{x}$ , $\\cot{x}$ , $\\sec{x}$ , and $\\csc{x}$ ; they are fundamental to mathematics and many areas of application. Also important are their relatives, the [[mat266.inverse-trigonometric-functions]].\n","n":0.171}}},{"i":206,"$":{"0":{"v":"Transcendental Functions","n":0.707},"1":{"v":"\nTrigonometric, exponential, and logarithmic functions are a few examples of a large family called transcendental functions.\n![](/assets/images/2022-01-14-23-10-21.png)\nThis figure shows the organization of these functions.","n":0.209}}},{"i":207,"$":{"0":{"v":"Taylor Series","n":0.707},"1":{"v":"\nSuppose a function $f$ has the derivatives $f^{(k)}(a)$ of all orders at the point $a$. If we write the [[Taylor polynomial|mat266.taylor-polynomials]] of a degree $n$ for $f$ centered at $a$ and allow $n$ to increase indefinitely, a [[power series|mat266.power-series]] is obtained:\n\n$$\nc_0+c_1(x-a)+c_2(x-a)^n+\\cdots+c_n(x-a)^n+\\cdots=\\sum_{k=0}^\\infty c_k(x-a)^k\\text.\n$$\n\nThe coefficients of the [[Taylor polynomial|mat266.taylor-polynomials]] are given by\n\n$$\nc_k=\\frac{f^{(k)}(a)}{k!}\\text{, for }k=0,1,2,\\dots\\text.\n$$\n\nThese coefficients are also the coefficients of the [[power series|mat266.power-series]], which is called the \"[[Taylor series|mat266.taylor-series]] for $f$ centered at $a$\". The special case of a [[Taylor series|mat266.taylor-series]] centered at $0$ is called a Maclaurin series.\n\n![](/assets/images/2022-04-13-17-19-58.png)\n\n![](/assets/images/![](/assets/images/2022-04-13-17-20-21.png).png)\n\n## Definition\n\nSuppose the function $f$ has the derivatives of all orders on an interval centered at the point $a$. The [[Taylor series|mat266.taylor-series]] for $f$ centered at $a$ is\n\n$$\nT_\\infty=f(a)+f\\prime(a)(x-a)+\\frac{f\\prime\\prime(a)}{2!}(x-a)^2+\\frac{f^{(3)}(a)}{3!}(x-a)^3+\\cdots=\\sum_{k=0}^\\infty \\frac{f^{(k)}(a)}{k!}(x-a)^k\\text.\n$$\n\nTo clarify, $x$ is **not** the point at which the [[Taylor series|mat266.taylor-series]] is centered. Rather, $x$ is the variable to be used in the resulting function $T_n(x)\\approx f(x)$. $a$ is the point at which the Taylor series is centered.\n\nA [[Taylor series|mat266.taylor-series]] centered at $0$ is called a Maclaurin series.","n":0.078}}},{"i":208,"$":{"0":{"v":"Taylor Polynomials","n":0.707},"1":{"v":"\nAssume $f$ and its first $n$ derivatives exist at $a$.\n\nOur goal is to find an $n$th-degree polynomial that approximates the values of $f$ near $a$. The first step is to thse $p_2$ to obtain a cubic polynomial $p_3$ of the form\n\n$$\np_3(x)=p_2(x)+c_3(x-a)^3\n$$\n\nthat satisfies the four matching conditions\n\n$$\np_3(a)=f(a)\\text{, }p_3\\prime(a)=f\\prime(a),p_3\\prime\\prime(a)=f\\prime\\prime(a)\\text{, and }p_3\\prime\\prime\\prime(a)=f\\prime\\prime\\prime(a)\\text.\n$$\n\nBecause $p_3$ is built \"on top of\" $p_2$, the first three conditions are met. The last condition, $p_3\\prime\\prime\\prime(a)=f\\prime\\prime\\prime(a)$, is used to determine $c_3$. A short calculation shows that $p_3\\prime\\prime\\prime(a)=3*2c_3=3!c_3$, and so the last matching condition becomes $p_3\\prime\\prime\\prime(a)=3!c_3=f\\prime\\prime\\prime(a)$. Solving for $c_3$ gives $c_3=\\frac{f\\prime\\prime\\prime(a)}{3!}$. The cubic approximating polynomial is\n\n$$\np_3(x)=f(a)+f\\prime(a)(x-a)+\\frac{f\\prime\\prime(a)}{2!}(x-a)^2+\\frac{f\\prime\\prime\\prime(a)}{3!}(x-a)^3\\text.\n$$","n":0.103}}},{"i":209,"$":{"0":{"v":"Surface Area","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-22-43-35.png)\n![](/assets/images/2022-02-08-22-43-52.png)\n\n## Definition\nLet $f$ be differentiable and positive on the interval $[a,b]$. The area of the surface generated when the graph of $f$ on the interval $[a,b]$ is revolved about the $x$-axis is\n$$\nS=\\int_a^b{2\\pi f(x)\\sqrt{1+f\\prime(x)^2}}{dx}\\text.\n$$\n\n## Surface area of a spherical zone\n![](/assets/images/2022-02-08-22-46-27.png)\n\n$$\nS=\\int_a^b{2\\pi f(x)\\sqrt{1+f\\prime(x)^2}}{dx}\n$$\n(after substituting and simplifying...)\n$$\n=2\\pi\\int_0^h{a}{dx}\n$$","n":0.152}}},{"i":210,"$":{"0":{"v":"Simson's Rule of Integration","n":0.5},"1":{"v":"\nSimson's rule is a numerical method of integration, used to evaluate definite integrals. Usually to evaluate these integrals, the [[mat266.fundamental-theorem]] of calculus is used, however sometimes it can be too difficult to use by hand.\n\n## Formula\n\n$$\n\\int_a^b{f(x)}\\,dx\\approx S(n)=\\frac{n}{3}(f(x_0)+4f(x_1))+2f(x_2)+\\ldots+2f(x_{n-2})+4f(x_{n-1})+f(x_n))\\text,\n$$\n\nwhere $n$ is the width of the interval, and $x_i$ is the $i$th point on the interval.\n\nIf using arrays, the integration can be performed with the following:\n\n| $Y[n]$       | $D[n]$ |\n| ------------ | ------ |\n| $f(x_0)$     | 1      |\n| $f(x_1)$     | 4      |\n| $f(x_2)$     | 2      |\n| $...$        | $...$  |\n| $f(x_{n-2})$ | 2      |\n| $f(x_{n-1})$ | 4      |\n| $f(x_n)$     | 1      |\n\n$n=\\text{length of Y}$\n\n$$\n\\int_a^b{f(x)}\\,dx\\approx S(n)=\\frac{n}{3}\\sum_{i=1}^{n}{(Y[i]*D[i])}\n$$\n\nThis is generally easier when using a calculator, but either formula can be used.\n\n## Example\n\n[YouTube](https://youtu.be/7EqRRuh-5Lk)\n","n":0.093}}},{"i":211,"$":{"0":{"v":"Shell Method","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-22-16-37.png)\n\nWith certain graphs, the washer & disk method are difficult to compute when rotating some regions about the $y$-axis. The shell method allows you to integrate with respect to $x$ rather than $y$, reducing the number of integrals required.\n\n![](/assets/images/2022-02-08-22-19-59.png)\n\n## Definition\nLet $f$ and $g$ be continuous functions with $f(x)\\geq g(x)$ on $[a,b]$. If $R$ is the region bounded by the curves $y=f(x)$ and $y=g(x)$ between the lines $x=a$ and $x=b$, the volume of the solid generated when $R$ is revolved about the **y-axis** is \n$$\nV=\\int_a^b{2\\pi x(f(x)-g(x))}{dx}\\text.\n$$","n":0.108}}},{"i":212,"$":{"0":{"v":"Sequences","n":1},"1":{"v":"\nSequences are denoted in the forms\n\n$$\n{x_1, x_2, \\ldots, x_n}\\text, \\\\\n{x_n}\\text, \\\\\n\\text{and }{x_n}_{n=1}^{\\infty}\\text.\n$$\n\n## Limit of a sequence\n\nIf the terms of a sequence ${x_n}$ approach a unique number $L$ as $n$ increases (if $a_n$ can be made arbitrarily close to $L$), then the limit $\\lim_{n\\to\\infty} x_n$ **converges** to $L$. If the terms *do not* approach a single number as $n$ increases, the sequence has no limit, and it **diverges**.\n\n![](/assets/images/2022-04-06-13-50-03.png)\n\nA **converging** sequence approaching $0$.\n\n![](/assets/images/2022-04-06-13-50-35.png)\n\nA **diverging** sequence (approaching nothing).\n\n\n## Infinite series\n\n![[mat266.infinite-series]]\n\n## Sequence of partial sums\n\n![[mat266.sequence-of-partial-sums]]","n":0.111}}},{"i":213,"$":{"0":{"v":"Sequence of Partial Sums","n":0.5},"1":{"v":"\nThe sequence of partial sums of a sequence ${S_n}$ is defined as\n\n$$\n{S_1, S_2, \\ldots, S_n}\\text,\n$$\n\nwhere\n\n$$\nS_n=x_1+x_2+\\cdots+x_n\\text.\n$$\n\nThis can be used to evaluate the (infinite) series\n\n$$\n\\sum_{k=1}^\\infty{x_k}\n$$\n\nwith the limit\n\n$$\n\\lim_{k\\to\\infty}{x_k}=\\sum_{k=1}^{\\infty}{x_k}\\text.\n$$\n","n":0.2}}},{"i":214,"$":{"0":{"v":"Rules of Differentiation","n":0.577},"1":{"v":"\n## Notation\n- Prime notation\n\t- $f\\prime (x)$\n\t- $y\\prime$\n\t- $f\\prime$ \n\t- Most common\n- Leibniz notation\n\t- $\\frac{dy}{dx}$\n\t- $\\frac{d}{dx} [y]$\n- Dot notation\n\t- $\\dot{y}(t)$\n\t- $y\\prime(t)$\n- Differentials\n\t- $D_x (f(x))$\n## Constant rule\n- Let $f(x)=c$ where $c$ is a real number, then $\\frac{dy}{dx} [c]=0$\n## Identity derivative\n- Let $f(x)=x$, then $\\frac{dy}{dx} [x]=1$\n- (If $f(x)$ equals itself, than the derivative of $x$ is $1$)\n## Power rule\n- Let $f(x)=x^n$, where n is an unsigned (positive) integer, $\\frac{dy}{dx} [x^n ]=nx^{nâ1}$\n## Constant multiple rule\n- Let $f(x)$ be a function and $c$ a constant, then $\\frac{dy}{dx} [câf(x)]=câf\\prime(x)$\n## Sum and difference rule\n- Let $f(x)$ and $g(x)$ be functions, then $\\frac{dy}{dx} [f(x)Â±g(x)]=f^\\prime (x)Â±g^\\prime (x)$\n## Product Rule\n- $\\frac{dy}{dx} [f(x)âg(x)]=f^\\prime (x)g(x)+f(x)g\\prime(x)$\n## Quotient Rule\n- $\\frac{dy}{dx} [\\frac{f(x)}{g(x)} ]=\\frac{f^\\prime (x)g(x)âf(x)g\\prime(x)}{g(x)^2}$\n## Sine Rule\n- $\\frac{dy}{dx} [\\sin{u}]=\\cos{u}âu\\prime$\n## Cosine Rule\n- $\\frac{dy}{dx} [\\cos{u} ]=â\\sin({u})âu^\\prime$\n## Tangent Rule\n- $\\frac{dy}{dx} [\\tan(u) ]=\\sec^2(u)$\n## Secant Rule\n- $\\frac{dy}{dx} [\\sec(x) ]=\\sec(x)\\tan(x)$\n## Cosecant Rule\n- $\\frac{dy}{dx} [\\sec(x) ]=â\\sec(x)\\sec(x)$\n## Cotangent Rule\n- $\\frac{dy}{dx} [\\sec(x) ]=â\\sec^2(x)$\n## Euler's Number Rule\n- $\\frac{dy}{dx} [e^u ]=e^uâu\\prime$\n## Exponent Rule\n- $\\frac{dy}{dx} [f(x)^{g(x)}  ]=g(x)âf(x)^{g(x)â1}âf\\prime(x)$\n- Works w/ radicals too\n## Function Rule (or polynomials)\n- $\\frac{dy}{dx} [f(g(x))]=f^\\prime (g(x))âg^\\prime (x)$\n## Log Rules\n- $\\frac{dy}{dx} [\\ln(x) ]=1/x, x>0$\n- $\\frac{dy}{dx} [\\ln(|x|) ]=1/x, xâ 0$\n- $\\frac{dy}{dx} [\\ln(g(x)) ]=\\frac{1}{g(x)} âg^\\prime (x)=\\frac{g^\\prime (x)}{g(x)}$\n- $\\frac{dy}{dx} [\\ln(câx) ]=1/x$ \n($c$ is a constant)\n- $\\frac{dy}{dx} [\\ln(x^n ) ]=\\frac{n}{x}$\n## General Exponential/Log Rule\n- $\\frac{dy}{dx} [b^x ]=b^xâln(b)$\n- $\\frac{dy}{dx}[\\log_b(x)]=1/(\\ln(b))$\n## Inverse Sine Rule\n- $\\frac{dy}{dx} [sin^{â1}(x) ]=1/\\sqrt{1âx^2 }âx\\prime, â1<x<1$\n## Inverse Cosine Rule\n- $\\frac{dy}{dx} [\\cos^{â1}(x)]=\\frac{1}{\\sqrt{1âx^2}}âx\\prime, â1<x<1$\n## Inverse Tangent Rule\n- $\\frac{dy}{dx} [\\tan^{-1}(x)]=\\frac{1}{1+x^2}âx\\prime$\n## Inverse Secant Rule\n- $\\frac{d}{dx}[sec^{-1}(x)]=\\begin{cases}\n\t\\frac{1}/{x\\sqrt{x^2-1}}*x\\prime &\\text{, } x>1 \\\\\n\t-\\frac{1}{x\\sqrt{x^2-1}}*x\\prime &\\text{, } x<-1\n\\end{cases}$\n- $\\frac{dy}{dx} [sec^{-1}(x) ]=\\frac{1}{|x| \\sqrt{x^2â1}}, |x| > 1$\n## Inverse Cosecant Rule\n- $\\frac{dy}{dx} [\\sec^{-1}(x) ]=â\\frac{1}{|x| \\sqrt{x^2â1}}âx\\prime$\n## Inverse Cotangent Rule\n- $\\frac{dy}{dx} [\\sec^{â1}(x) ]=-\\frac{1}{1+x^2}âx\\prime$\n## General Inverse Trig Derivative\n- $\\frac{dy}{dx} [trig^{â1} (g(x))]=\\frac{1}{\\sqrt{1â(g(x))^2}}âg\\prime(x)$\n## General Inverse Function Derivative\n- $\\frac{dy}{dx} [f^{-1} (x)]=\\frac{1}{f\\prime(f^{-1} (x))}$\n- $(f(x)=y \\land f^{-1} (y)=x) \\rarr \\frac{dy}{dx} [f^{-1} (y)]=\\frac1{(f\\prime(x))}$","n":0.061}}},{"i":215,"$":{"0":{"v":"Regions between Curves","n":0.577},"1":{"v":"![](/assets/images/2022-02-08-12-23-29.png)\n## Area of a region between two curves\nSuppose that $f$ and $g$ are continuous functions with $f(x)\\geq g(x)$ on the interval $[a,b]$. The are of the region bounded by the graphs of $f$ and $g$ on $[a,b]$ is\n$$\nA=\\int_a^b{(f(x)-g(x))}{dx}\\text{.}\n$$\n## Area of a region between two curves with respect to $y$\n![](/assets/images/2022-02-08-21-47-26.png)\nThere are some cases where the area between two curves needs to be found on the $y$ axis.\n\nSuppose that $f$ and $g$ are continuous functions with $f(y)\\geq g(y)$ on the interval $[c,d]$. The area of the region bounded by the graphs $x=f(y)$ and $x=g(x)$ on $[c,d]$ is\n$$\nA=\\int_x^d{(f(y)-g(y))}{dy}\\text{.}\n$$","n":0.103}}},{"i":216,"$":{"0":{"v":"Rational Functions","n":0.707},"1":{"v":"\nRational functions are ratios of the form $f(x)=p(x)/q(x)$ , where p and q are polynomials. Because division by zero is prohibited, the domain of a rational function is the set of all real numbers except those for which the denominator is zero.\n","n":0.154}}},{"i":217,"$":{"0":{"v":"Power Series","n":0.707},"1":{"v":"\nA power series is an [[mat266.infinite-series]] of the form\n\n$$\n\\sum_{k=0}^{\\infty} c_kx^k=c_0+c_1x+c_2x^2+\\cdots+c_nx^n+c_{n+1}x^{n+1}+\\cdots\\text,\n$$\n\nor more generally,\n\n$$\n\\sum_{k=0}^{\\infty} c_k(x-a)^k=c_0+c_1(x-a)+\\cdots+c_n(x-a)^n+c_{n+1}(x-a)^{n+1}+\\cdots\\text,\n$$\n\nwhere the center of the series $a$ and the coefficients $c_k$ are constants. This is called a power series because it consists of powers of $x$ or $(x-a)$.","n":0.158}}},{"i":218,"$":{"0":{"v":"Position","n":1},"1":{"v":"\nThe **position** of an object at time $t$, denoted $s(t)$, is the location of the object relative to the origin.\n^main\n## Finding the future position\nSuppose we know the velocity of an object and its initial position ($s(0)$). The goal is to find the position $s(t)$ for $t>0$. The [[mat266.fundamental-theorem]] gives us the answer directly. Because the position $s$ is an antiderivative of the velocity $v$, we have\n$$\n\\int^t_0{v(x)}{dx}=\\int^t_0{s\\prime(x)}{dx}=s(t)-s(0)\n$$\n","n":0.123}}},{"i":219,"$":{"0":{"v":"Position from Velocity","n":0.577},"1":{"v":"Given the velocity $v$ of an object moving along a line and its initial position $s(0)$, the position function of the object for future times $t\\geq0$ is\n$$\ns(t)=s(0)+\\int^t_0{v(x)}{\\text{ }dx}\\text{.}\n$$\n\nThere are two equivalent ways to determine the position function- antiderivatives and the above theorem, the latter generally being more efficient.\n\n## Example\nA block hangs at rest from a massless spring at the origin $s=0$. At $t=0$, the block is pulled downward $\\frac{1}{4}\\text{m}$ to its initial position $s(0)=-\\frac{1}{4}$ and released.\n![](/assets/images/2022-02-04-11-11-00.png)\nIts velocity in $\\text{m/s}$ is given by $v(t)=\\frac{1}{4}\\sin{t}$, for $t\\geq0$. Assume the upward direction is positive.\n### Find the position of the block, for $t\\geq0$\nThe velocity function is positive for $0<t<\\pi$, which means the block moves in the positive (upward) direction.\n\nAt $t=\\pi$, the block comes to rest momentarily; for $\\pi<t<2\\pi$, the block moves in the negative (downward) direction.\n\nWe let $s(t)$ be the position at time $t\\geq0$ with the initial position $s(0)=-\\frac14\\text{m}$\n\nUsing the theorem (antiderivatives can also be used), we may use the relationship\n$$\ns(t)=s(0)+\\int^t_0{v(x)}{\\text{ }dx}\\text.\n$$\nSubstituting $v(x)=\\frac14\\sin{x}$ and $s(0)=-\\frac14$, the position function is\n$$\ns(t)=-\\frac14+\\int^t_0{\\frac14\\sin{x}}{\\text{ }dx}\n$$\n$$\n=-\\frac14\\cos{t}\\text.\n$$\n![](/assets/images/2022-02-04-11-11-18.png)\n### When does the block moves through the origin for the first time?\nThe block initially moves in the positive $s$ direction, reaching the origin $s=0$ when $s(t)=-\\frac14\\cos{t}=0$.\n\nSo, the block arrives at the origin for the first time when $t=\\frac\\pi2$,\n\nGraphing can help visualize this.\n### When does the block reach its highest point for the first time, and what is the position at that time?\nThe block moves in the positive direction and reaches its high point for the first time when $t=\\pi$ (which is $s(\\pi)=\\frac14\\text{m}$), and this motion repeats every $2\\pi$ seconds.","n":0.063}}},{"i":220,"$":{"0":{"v":"Polynomials","n":1},"1":{"v":"\nPolynomials are functions of the form\n\n$$\nf(x)=a_nx^n+a_{n-1}x^{n-1}+\\cdots+a_1x+a_0\n$$\n\nwhere the [[coefficients|mat266.coefficient]] $a_0$, $a_1$, $...$, $a_n$ are real numbers with $a_n\\ne0$ and the nonnegative integer $n$ is the degree of the polynomial. The domain of any polynomial is the set of all real numbers. An $n$ th-degree polynomial can have as many as $n$ real zeros or rootsâvalues of $x$ at which $f(x)=0$, which correspond to points at which the graph of $f$ intersects the $x$-axis.\n\n**Note:** One version of the Fundamental Theorem of Algebra states that a nonzero polynomial of degree $n$ has exactly $n$ roots (possibly complex), counting each root up to its multiplicity.","n":0.1}}},{"i":221,"$":{"0":{"v":"Polynomial Approximation","n":0.707},"1":{"v":"\nTo evaulate a polynomial (such as $f(x)=x^8-4x^5+\\frac12$), all we need is arithmetic. However, algebraic function such as $f(x)=\\sqrt[3]{x^4-1}$ and the trigonometric, logarithmic, and exponential functions cannot be evaluated with arithmetic. Because of this, it makes sense to approximate these functions.\n\n[[mat266.taylor-polynomials]] are a good way to do this.","n":0.146}}},{"i":222,"$":{"0":{"v":"Piecewise Function","n":0.707},"1":{"v":"\nA function composed of multiple functions. Each row contains the equation and then the condition separated by either a space, comma, or \"if\".\n$$\np(x)=\n\\begin{cases}\n    f(x) & x > a \\\\\n    g(x) & x \\leq a\n\\end{cases}\n$$","n":0.171}}},{"i":223,"$":{"0":{"v":"Partial Fractions","n":0.707},"1":{"v":"\nGiven a function such as\n$$\nf(x)\\frac{1}{x-2}+2{x+4}\\text,\n$$\nit is a straightforward task to find a common denominator and write the equivalent expression\n$$\nf(x)=\\frac{3x}{x^2+2x-8}\\text.\n$$\n\nThe purpose of partial fractions is to reverse this process.\n\nRational Fraction | Partial Fraction Decomposition\n| -- | -- |\n$\\frac{3x}{x^2+2x-8}$ | $\\frac{1}{x-2}+\\frac{2}{x+4}$\n**Difficult to Integrate** | **Easy to Integrate**\n$\\int{\\frac{3x}{x^2+2x-8}}\\,dx$ | $\\int{(\\frac{1}{x-2}+\\frac{2}{x+4})}\\,dx$\n\n## Methods\n\n- [[mat266.partial-fractions.simple-linear-factors]]\n- [[mat266.partial-fractions.repeated-linear-factors]]\n- [[mat266.partial-fractions.irreducible-quadratic-factors]]\n\n## Important When Integrating...\n\nKeep in mind, $C\\ln{(f(x))}=\\int{\\frac{C}{f(x)}}\\,dx$, so\n\n$$\n\\int{\\frac{2}{x+4}+\\frac{1}{x}-\\frac{5}{x}}=2\\ln{(x+4)}+\\ln{(x)}-5\\ln{(x)}\n$$","n":0.131}}},{"i":224,"$":{"0":{"v":"Simple Linear Factors","n":0.577},"1":{"v":"\nSuppose $f(x)=\\frac{p(x)}{q(x)}$, where $p$ and $q$ are polynomials with no common factors and with the degree of $p$ less than the degree of $q$.\n\n## Step 1\n\nFactor the denominator $q$ in the form $(x-r_1)(x-r_2)\\cdots(x-r_n)$, where $r_1,\\cdots,r_n$ are distinct real numbers.\n\n## Step 2\n\nForm the partial fraction decomposition by writing\n$$\n\\frac{p(x)}{q(x)}=\\frac{A_1}{(x-r_1)}+\\frac{A_2}{(x-r_2)}+\\cdots+\\frac{A_n}{(x-r_n)}\n$$\n\n## Step 3\n\nClear denominators by multiplying both sides of the equation in Step 2 by $q(x)=(x-r_1)(x-r_2)\\cdots(x-r_n)$, which produces conditions for $A_1,\\cdots,A_n$.\n\n## Step 4\n\nSolve for coefficients by equating like powers of $x$ in Step 3 to solve for the undetermined coefficients $A_1,\\cdots,A_n$.\n\n## Example\n\n1. Find the partial fraction decomposition for $f(x)=\\frac{3x^2+6x-2}{x^3-x^2-2x}$.\n\n2. Evaluate $\\int{f(x)}\\,dx$.\n\n### Solution\n\nThe partial fraction decomposition is done in five steps...\n\n- Factor the denominator\n$$\nx^3-x^2-2x=x(x+1)(x-2)\n$$\n- Write the partial fraction decomposition\n$$\n\\frac{3x^2+6x-2}{x^3-x^2-2x}=\\frac{A}{x}+\\frac{B}{x+1}+\\frac{C}{x-2}\n$$\n(The goal is to find the undetermined coefficients $A$, $B$, and $C$.)\n- Multiply both sides of the equation by $x(x+1)(x-2)$\n\n$$\n(\\frac{A}{x}+\\frac{B}{x+1}+\\frac{C}{x-2})((x)(x+1)(x-2))\n$$\n$$\n=(A+B+C)x^2-(A+2B-C)x-2A\n$$\n\n$$\n(\\frac{3x^2+6x-2}{x^3-x^2-2x})((x)(x+1)(x-2))\n$$\n$$\n=(3)x^2+(6)x-(2)\n$$\n\nAs you can see, the two sides of the equation can be grouped by the coefficients of $x^2$, $x^1$, and $x^0$.\n\n- Solve for the coefficients of $x^2$, $x^1$, and $x^0$ on both sides of the equation\n    - Equate coefficients of $x^2$: $A+B+C=3$\n    - Equate coefficients of $x^1$: $-A-2B+C=7$\n    - Equate coefficients of $x^0$: $-2A=-2$\n- We can use the coefficients to find the values of $A$, $B$, and $C$ (e.g. $A=1$)\n$$\nf(x)=\\frac{A}{x}+\\frac{B}{x+1}+\\frac{C}{x-2}\n$$\n$$\n=\\frac{1}{x}-\\frac{2}{x+1}+\\frac{4}{x-2}\n$$\n\nNow that we know $f(x)$, we can integrate it more easily.\n\n$$\n\\int{\\frac{3x^2+7x-2}{x^3-x^2-2x}}\\,dx=\\int{(\\frac{1}{x}-\\frac{2}{x+1}+\\frac{4}{x-2})\\,dx}\n$$\n$$\n=\\ln\\frac{|x|(x-2)^4}{(x+1)^2}+C\n$$","n":0.069}}},{"i":225,"$":{"0":{"v":"Repeated Linear Factors","n":0.577},"1":{"v":"\nA *simple* factor is raised to the first power, however a *repeated* factor is raised to a power higher than the first power.\n\nSuppose $(x-r)^m$ appears in the denominator, where $m>1$ is an integer. Then there must be a partial fraction for each power of $(x-r)$ up to and including the $m$th power. For example, if $x^2(x-3)^4$ appears in the denominator, then the partial fraction decomposition includes the 6 terms\n$$\n\\frac{A}{x}+\\frac{B}{x^2}+\\frac{C}{x-3}+\\frac{D}{(x-3)^2}+\\frac{E}{(x-3)^3}+\\frac{F}{(x-3)^4}\\text.\n$$\n\nThe [[rest of the procedure|mat266.partial-fractions.simple-linear-factors]] remains the same, though the amount of work increases with the number of coefficients.\n\n## Procedure\n\nSuppose the repeated linear factor $(x-r)^m$ appears in the denominator of a proper rational function in reduced form.\n\nThe partial fraction decomposition has a partial fraction for each power of $(x-r)$ up to and including the $m$th power; that is, the partial fraction decomposition contains the sum\n$$\n\\frac{A_1}{(x-r)}+\\frac{A_2}{(x-r)^2}+\\frac{A_3}{(x-r)^3}+\\cdots+\\frac{A_m}{(x-r)^m}\\text,\n$$\nwhere $A_1,\\ldots,A_m$ are constants to be determined.","n":0.085}}},{"i":226,"$":{"0":{"v":"Net Change and Future Value","n":0.447},"1":{"v":"\nEverything we have said about velocity, position, and displacement carries over to more general situations. Suppose you are interested in some quantity $Q$ that changes over time; $Q$ may represent the amount of water in a reservoir, the population of a cell culture, or the amount of a resource that is consumed or produced. If you are given the rate $Q'$ at which $Q$ changes, then integration allows you to calculate either the net change in the quantity $Q$ or the future value of $Q$.\n\nWe argue just as we did for [[mat266.velocity]] and [[mat266.position]]: Because $Q(t)$ is an antiderivative of $Q\\prime(t)$, the [[mat266.fundamental-theorem]] tells us that\n$$\n\\int_a^b{Q\\prime(t)}{dt}=Q(b)-Q(a)=\\text{net change in Q over [a,b]}\n$$\nGeometrically, this net change is the net area under the graph of $Q\\prime$ over $[a,b]$. We interpret the product $Q\\prime(t)$ as the change in $Q$ over a small increment of time.\n\nAlternatively, given both the rate of change $Q\\prime$ and the initial value $Q(0)$, integrating over the interval $[0,t]$, where $t\\geq0$, we can use\n$$\n\\int_0^t{Q\\prime(x)}{dx}=Q(t)-Q(0)\n$$\nRearranging this equation, we write the value of $Q$ at any future time $t\\geq0$ as\n$$\nQ(t)=Q(0)+\\int_0^t{Q\\prime(x)}{dx}\n$$\n## Net change and future value\nSuppose a quantity $Q$ changes over time at a known rate $Q\\prime$. Then the **net change** in $Q$ between $t=a$ and $t=b>a$ is\n$$\n\\int_0^t{Q\\prime(x)}{dx}=Q(t)-Q(0)\n$$\nGiven the initial value $Q(0)$, the **future value** of $Q$ at time $t\\geq0$ is\n$$\nQ(t)=Q(0)+\\int_0^t{Q\\prime(x)}{dx}\n$$\nCorrespondences between velocity-displacement problems and more general problems:\n\nVelocity-Displacement Problems | General Problems\n---------|----------\nPosition $s(t)$ | Quantity $Q(t)$ (such as volume or population size)\nVelocity: $s\\prime(t)=v(t)$ | Rate of change: $Q\\prime(t)$\nDisplacement: $s(b)-s(a)=\\int_a^b{v(t)}{dt}$ | Net change: $Q(b)-Q(a)=\\int_a^b{Q\\prime(t)}{dt}$\nFuture Position: $s(t)=s(0)+\\int_0^t{v(x)}{dx}$ | Future value of $Q$: $Q(t)=Q(0)+\\int_0^t{Q\\prime(x)}{dx}$","n":0.062}}},{"i":227,"$":{"0":{"v":"Natural Logarithm","n":0.707},"1":{"v":"\nThe natural logarithm of a number $x>0$ is $\\ln{x}=\\int^x_1{\\frac{1}{t}}{dt}$.\n\n## Properties\n![](/assets/images/2022-02-16-13-29-56.png)\nBecause the natural logarithm is defined as a definite integral, its value is the net area under the curve $y=\\frac1t$ between $t=1$ and $t=x$.\n\nOn $(0,1)$, we have $\\int_1^x{\\frac1t}{dt}=-\\int_x^1{\\frac1t}{dt}$, which implies $\\ln{x}$ is negative.\n\n## Properties of the Natural Logarithm\n1. The domain and range of $\\ln{x}$ are $(0,\\infty)$ and $(-\\infty,\\infty)$, respectively\n2. $\\ln{xy}=\\ln{x}+\\ln{y}$, for $x\\gt0$ and $y\\gt0$\n3. $\\ln{\\frac{x}{y}}=\\ln{x}-\\ln{y}$, for $x\\gt0$ and $y\\gt0$\n4. $\\ln{x^p}=p\\ln{x}$, for $x\\gt0$ and $p$ is a rational number\n^property_4\n5. $\\frac{d}{dx}(\\ln{|x|})=\\frac1x$, for $x\\neq0$\n6. $\\frac{d}{dx}(\\ln{|u(x)|})=\\frac{u\\prime(x)}{u(x)}$, for $u(x)\\neq0$\n7. $\\int{\\frac1x}{dx}=\\ln{|x|}+C$\n## Example\n![](/assets/images/2022-02-16-14-28-08.png)","n":0.108}}},{"i":228,"$":{"0":{"v":"Mean Value Theorem","n":0.577},"1":{"v":"\nIf $$f$$ is continuous over $$[a,b]$$ and $$f$$ is differential over (a,b),\n$$\n\\ni c \\in (a,b) \\ni f(c)=\\frac{f(b)-f(a)}{b-a}\n$$ \n\n## For integrals...\nLet f be continuous on [a,b]. There exists a point c in (a,b) such that\n![](/assets/images/2022-01-10-14-17-54.png)\n\n(c is height of rectangle)","n":0.162}}},{"i":229,"$":{"0":{"v":"Mass","n":1},"1":{"v":"\nMass = [[mat266.density]] * [[mat266.volume]]\n## Mass of a one-dimensional object\nSuppose a thin bar or wire is represented by the interval $a\\leq x\\leq b$ with a density function $\\rho$ (that's called \"rho\" apparently) (with units of mass per length). The **mass** of the object is\n$$\nm=\\int_a^b{\\rho(x)}{dx}\\text.\n$$","n":0.151}}},{"i":230,"$":{"0":{"v":"Inverse Trigonometric Functions","n":0.577},"1":{"v":"\nThe inverse trigonometric functions are $\\sin^ {-1}{x}$ , $\\cos^ {-1}{x}$ , $\\tan^ {-1}{x}$ , $\\cot^ {-1}{x}$ , $\\sec^ {-1}{x}$ , and $\\csc^ {-1}{x}$ ; they are the inverses of the [[mat266.trigonometric-functions]]. These functions are also sometimes represented as $asin\\ x$ , $acos\\ x$ , $atan\\ x$ , $acot\\ x$ , $asec\\ x$ , and $acsc\\ x$.\n","n":0.134}}},{"i":231,"$":{"0":{"v":"Integration by Parts","n":0.577},"1":{"v":"\n## Indefinite Integrals\n\n### Integration by Parts for Indefinite Integrals\n\nSuppose that $u$ and $v$ are differentiable functions. Then\n\n$$\n\\int{u}\\,dv=uv-\\int{v}\\,du\\text.\n$$\n\n## Definite Integrals\n\n### Integration by Parts for Definite Integrals\n\nLet $u$ and $v$ be differentiable. Then\n\n$$\n\\int_a^b{u(x)v\\prime(x)}\\,dx=u(x)v(x)|_a^b-\\int_a^b{v(x)u\\prime(x)}\\,dx\\text.\n$$","n":0.18}}},{"i":232,"$":{"0":{"v":"Infinite Series","n":0.707},"1":{"v":"\nAn infinite series can be viewed as a sum of an infinite set of numbers, with the form\n\n$$\nx_1+x_2+\\cdots+x_n+\\cdots\\text.\n$$\n\nFor instance, the infinite series\n\n$$\nS_\\frac12+\\frac14+\\frac18+\\cdots+\\frac{1}{2^n}=\\frac{2^n-1}{2^n}\n$$\n\napproaches $1$ as $n$ approaches $\\infty$.\n\n$$\n\\lim_{n\\to\\infty}{S_n}=1\n$$\n","n":0.192}}},{"i":233,"$":{"0":{"v":"Homework 1","n":0.707}}},{"i":234,"$":{"0":{"v":"Example 1","n":0.707},"1":{"v":"$v(t)=2t^2-8t+6$ is related to $o \\ge t \\ge 3$\n$$\n\\int_{0}^{3}{2t^2-8t+6} dt\n$$\n???","n":0.316}}},{"i":235,"$":{"0":{"v":"Geometric Sums","n":0.707},"1":{"v":"\nGeometric sums are finite sums in which each term is a constant multiple of the previous term. A geometric sum with $n$ terms has the form\n\n$$\nS_n=a+ar+ar^2+\\cdots+ar^{n-1}=\\sum_{k=0}^{n-1} ar^k\\text,\n$$\n\nwhere $a\\neq0$ and $r$ are real numbers. $r$ is called the ratio of the sum and $a$ is the first term of the series.\n\nFor example, the geometric sum with $r=0.1$, $a=0.9$, and $n=4$ is\n\n$$\n0.9+0.09+0.009+0.0009=0.9(1+0.1+0.00.001)=\\sum_{k=0}^3 0.9(0.1^k)\\text.\n$$\n\n## General formula\n\nAssuming $r\\neq1$ and solving for $S_n$, the general formula for the value of a geometric sum is\n\n$$\nS_n=a\\frac{1-r^n}{1-r}\\text.\n$$\n\nThis is because to find the formula for the value of the geometric sum\n\n$$\nS_n=a+ar+ar^2+\\cdots+ar^{n-1}=\\sum_{k=0}^{n-1} ar^k\\text,\n$$\n\nfor any values of $a\\neq0$, $r$, and the positive integer $n$, we can multiply both sides of the equation by the ratio $r$:\n\n$$\nrS_n=r(a+ar+ar^2+\\cdots+ar^{n-1})=ar+ar^2+ar^3+\\cdots+ar^{n-1}+ar^n\\text.\n$$\n\nSubtracting the two sides leaves us with the general formula for the value of the geometric sum.","n":0.087}}},{"i":236,"$":{"0":{"v":"Geometric Series","n":0.707},"1":{"v":"\nGeometric series are similar to [[mat266.geometric-sums]], but with an $n$ of $\\infty$.\n\n$$\n\\sum_{k=0}^{\\infty} ar^k=\\lim_{n\\to\\infty} \\sum_{k=0}^{n-1} ar^k=\\lim_{n\\to\\infty} a\\frac{1-r^n}{1-r}\\text.\n$$\n\n## Limit\n\nTo compute the limit, we must examine the behavior of $r^n$ as $n\\to\\infty$.  To do this we can use the formula\n\n$$\n\\lim_{n\\to\\infty} r^n=\n\\begin{cases}\n    0, & \\text{if } |r|<1, \\\\\n    1, & \\text{if } |r|=1, \\\\\n    \\text{DNE}, & r\\leq-1\\text{ or } r>1\\text,\n\\end{cases}\n$$\n\nwith $\\text{DNE}$ meaning \"Does not exist\".\n\n### Case 1\n\nIf $|r|<1$, the gemetric series converges to $\\frac{a}{1-r}$.\n\n### Case 2\n\nIf $|r|>1$, the geometric series diverges, so the $\\lim_{n\\to\\infty} r^n$ does not exist.\n\n### Case 3 (Positive)\n\nIf $r=1$, the geometric series is $\\sum_{k=0}^\\infty a=a+a+a+\\cdots$, which diverges.\n\n### Case 3 (Negative)\n\nIf $r=-1$, the gemetric series is $\\sum_{k=0}^\\infty a(-1)^k=a-a+a-\\cdots$, which diverges and the limit does not exist.\n\n## Theorem\n\nLet $a\\neq0$ and $r$ be real numbers. If $|r|<1$, then $\\sum_{k=0}^\\infty ar^k=\\frac{a}{1-r}$. If $|r|\\geq1$, then the series diverges.","n":0.087}}},{"i":237,"$":{"0":{"v":"General Slicing Method","n":0.577},"1":{"v":"\n![](/assets/images/![](/assets/images/2022-02-08-21-57-41.png).png)\n\n## Definition\nSuppose a solid object extends from $x=a$ to $x=b$ and the cross-section of the solid perpendicular to the $x$-axis has an area given by a function $A$ that is integrable on $[a,b]$. The volume of the solid is\n$$\nV=\\int_a^b{A(x)}{dx}\\text.\n$$","n":0.16}}},{"i":238,"$":{"0":{"v":"General Power Rule","n":0.577},"1":{"v":"\n## General Power Rule\n\nFor any real number $p$,\n\n$$\n\\frac{d}{dx}(x^p)=px^{p-1}\\text{ and }\\frac{d}{dx}(u(x)^p)=p(u(x)^{p-1})u\\prime(x)\\text.\n$$\n\n## Example\n\n![](/assets/images/2022-02-23-11-59-57.png)","n":0.302}}},{"i":239,"$":{"0":{"v":"General Logarithmic and Exponential Functions","n":0.447},"1":{"v":"## Exponential Functions with General Bases\n\nLet $b$ be a positive real number with $b\\neq1$. Then for all real $x$,\n\n$$\nb^x=e^{x\\ln{b}}\\text.\n$$\n\nThis definition fills in property 4 of Theorem 7.1 (see below).\n\n![[mat266.natural-logarithm#^property_4]]\n\nWe use the definition of $b^x$ to write\n\n$$\nx^p=e^{p\\ln{x}}\\text{, for }x>0\\text{ and }p\\text{ real.}\n$$\n\nTaking the [[mat266.natural-logarithm]] of both sides and using the iverse relationship betweeen $e^x$ and $\\ln{x}$, we find that\n\n$$\nlnx^p=ln{e^{p\\ln{x}}}=p\\ln{x}\\text{, for }x>0\\text{ and }p\\text{ real.}\n$$\n\n## Derivatives and Integrals with Other Bases\n\nLet $b>0$ and $b\\neq1$. Then\n\n$$\n\\frac{d}{dx}(\\log_b{|u(x)|})=\\frac{1}{\\ln{b}}\\frac{u\\prime(x)}{u(x)}\\text{, for }u(x)\\neq0\\text{ and }\\frac{d}{dx}(b^{u(x)})=(\\ln{b})b^{u(x)}u\\prime(x)\\text.\n$$\n\nFor $b>0$ and $b\\neq1$, $\\int{b^x}{dx}=\\frac{1}{\\ln{b}}b^x+C$\n\n## Example\n\n![](/assets/images/2022-02-23-09-52-13.png)","n":0.11}}},{"i":240,"$":{"0":{"v":"Fundamental Theorem","n":0.707},"1":{"v":"\nIf $g(x)=\\int_a^x{f(t)}{dt}$, then $g^{\\prime}(x)=f(x)$.\n\nThis means that if $g$ is the antiderivative of $f$, then the derivative of $g$ will give you $f$.","n":0.213}}},{"i":241,"$":{"0":{"v":"Functions","n":1},"1":{"v":"\nCalculus is the study of functions.\n\n## Definition\nA function $f$ is a rule that assigns to each value $x$ in a set $D$ a unique value denoted $f(x)$. The set $D$ is the domain of the function. The range is the set of all value of $f(x)$ produced as x varies over the domain.\n![](/assets/images/2022-01-12-13-05-10.png)\n## What is a function?\nA function must assign a unique value of the dependent variable to each value in the domain- demonstrated in the vertical line test.\n![](/assets/images/2022-01-12-13-06-07.png)\n\n## Common notation\n$y=f(x)$, unless told otherwise, can be expressed as \"$y$ is a function of $x$\".","n":0.103}}},{"i":242,"$":{"0":{"v":"Symmetry","n":1},"1":{"v":"\n## Definition\n- A graph is **symmetric with respect to the y-axis** if whenever the point $(x,y)$ is on the graph, the point $(-x,y)$ is also on the graph. \n    - This means that the graph is unchanged when reflected on the y-axis.\n    - A function symmetric across the y-axis is an **even function**.\n    - ![](/assets/images/2022-01-12-15-38-20.png)\n- A graph is **symmetric with respect to the x-axis** if whenever the point $(x,y)$ is on the graph, the point $(x,-y)$ is also on the graph. \n    - This means that the graph is unchanged when reflected on the x-axis.\n    - ![](/assets/images/2022-01-12-15-38-01.png)\n- A graph is **symmetric with respect to the origin** if whenever the point $(x,y)$ is on the graph, the point $(-x,-y)$ is also on the graph. \n    - This means that the graph is unchanged when reflected across the origin (also means the graph is symmetrical across both the x and y axes).\n    - A function symmetric across the origin is an **odd function**.\n    - ![](/assets/images/2022-01-12-15-37-07.png)\n\n## Determining the Symmetry of a Function\n- A function that consists of only even powers is an even function ($x^0$ is considered an even power).\n- A function that consists of both even and odd powers is neither odd nor even.\n- A function that consists of only odd powers is considered an odd function (again, $x^0$ is considered an even power).","n":0.067}}},{"i":243,"$":{"0":{"v":"Secant Lines","n":0.707},"1":{"v":"\nSlopes of lines and curves play a fundamental role in calculus.\n\n## Definition\nA secant line is a line through any two points on a curve. Secant lines are generally denoted as $m_{sec}$.\n$$\nm_{sec}=\\frac{change\\ in\\ y}{change\\ in\\ x}=\\frac{f(x+h)-f(x)}{(x+h)-x}=\\frac{f(x+h)-f(x)}{h}\n$$\n![](/assets/images/2022-01-12-13-22-25.png)\n\nThe slope formula $\\frac{f(x+h)-f(x)}{h}$ is also known as the [[difference quotient|mat266.functions.difference-quotient]].\n\nThe slope of the secant line is the average rate of change of $f$ over the interval $[a,x]$.","n":0.127}}},{"i":244,"$":{"0":{"v":"Difference Quotient","n":0.707},"1":{"v":"\nThe difference quotient is generally expressed using the formula $\\frac{f(x+h)-f(x)}{h}$, however can be expressed serveral ways depening on how the coordinates $P$ and $Q$ are labeled.\n\nGiven the coordinates $P(a,f(a))$ and $Q(x,f(x))$, the difference quotient is\n$$\nm_{sec}=\\frac{f(x)-f(a)}{x-a}\n$$\n![](/assets/images/2022-01-12-13-28-11.png)","n":0.169}}},{"i":245,"$":{"0":{"v":"Composite Functions","n":0.707},"1":{"v":"\nFunctions may be combined using...\n- Sums\n    - $(f+g)$\n- Differences\n    - $(f-g)$\n- Products\n    - $(fg)$\n- Quotients\n    - $(f/g)$\n\n## Definition\nGiven two functions $f$ and $g$, the composite function $f \\circ g$ is defined by $(f \\circ g)(x)=f(g(x))$. It is evaluated in two steps: $y=f(u)$, where $u=g(x)$. The domain of $f \\circ g$ consists of all $x$ in the domain of $g$ such that $u=g(x)$ is in the domain of $f$.","n":0.121}}},{"i":246,"$":{"0":{"v":"Force and Pressure","n":0.577},"1":{"v":"\nPressure is a force per unit area.\n$$\nF=\\text{mass}*\\text{acceleration}=\\text{volume}*\\text{density}*g=Ah\\rho g\n$$\n, where $\\rho$ is the density of the water, and $g$ is acceleration due to gravity.\n\n## Force-on-dam problem\n1. Draw a y-axis on the face of the dam in the vertical direction and choose a convenient origin (usually the base)\n2. Find the width function $w(y)$ for each value of $y$ on the face of the dam\n3. If the base of the dam is at $y=0$ and the top of the dam is at $y=a$, then the total force on the dam is\n$$\nF=\\int_0^a{\\rho g(a-y)w(y)}{dy}\\text.\n$$","n":0.106}}},{"i":247,"$":{"0":{"v":"Final Exam","n":0.707},"1":{"v":"\n## Topics\n\n### Area below/between curves\n\n[[mat266.regions-between-curves]]\n\n### Pressure\n\n[[mat266.force-and-pressure]]\n\n### Differential equations\n\n[[mat266.differential-equations]]\n\n### Derivatives/Anti-derivatives\n\n[[mat266.rules-of-differentiation]]\n\n### U-Substitution\n\n[[mat266.u-substitution]]\n\n### Integration by parts\n\n[[mat266.integration-by-parts]]\n\n### Convergence & divergence\n\n(sorry, nothing on this in particular)\n\n### Trigonometric substitution\n\n[[mat266.trigonometric-substitution]]\n\n### Simpson's rule (no need to memorize the formula)\n\n[[mat266.simsons-rule]]\n\n### Partial fraction decomposition\n\n[[mat266.partial-fractions]]\n\n### Taylor Series\n\n[[mat266.taylor-series]]\n\n## Extra things\n\n### Harmonic Series\n\nThe harmonic series\n\n$$\n\\sum_{n=1}^{\\infty} \\frac1n = \\frac{1}{1} + \\frac{1}{2} + \\frac{1}{3} + \\cdots\n$$\n\nhas the limit `0` as `n` approaches infinity, however it does **not** converge, it diverges.\n\n### Average value\n\nThe average value of $f(x)$ over the range $a$-$b$ is\n\n$$\n\\frac{1}{b-a}\\int_a^b{f(x)}\\,dx\n$$\n\n### Equality\n\n$0.999999999...=1$\n","n":0.114}}},{"i":248,"$":{"0":{"v":"Exponential Functions","n":0.707},"1":{"v":"\nExponential functions have the form $f(x)=b^x$, where the base $b\\ne1$ is a positive real number. Closely associated with exponential functions are logarithmic functions of the form $f(x)=\\log_b{x}$, where $b\\gt0$ and $b\\ne1$. An exponential function has a domain consisting of all real numbers. Logarithmic functions are defined for positive real numbers\n\nThe natural exponential function is $f(x)=e^x$, with base $b=e$, where $e\\approx2.71828â¦$ is one of the fundamental constants of mathematics. Associated with the natural exponential function is the natural logarithm function $f(x)=\\ln{x}$, which also has the base $b=e$.\n\nRadicals are equivalent to exponents, e.g. $16^{\\frac{3}{4}}=(\\sqrt[4]{16})^3$.\n\n## The Number $e$\nThe number $e$ is the real number that satisfies\n$$\n\\ln{e}=\\int_1^e{\\frac{dt}{t}}=1\\text.\n$$\nThe number $e$ has the property that the area of the region bounded by the graph of $y=\\frac1t$ and the $t$-axis on the interval $[1,e]$ is $1$.\n![](/assets/images/2022-02-16-13-46-53.png)\n\n## The Exponential Function\nFor any real number $x$, $y=e^x=exp(x)$, where $x=\\ln{y}$.\n\n## Properties of $e^x$\nThe exponential function $e^x$ satisfies the following properties, all of which follow from the integral definition of $\\ln{x}$. Let $x$ and $y$ be real numbers.\n1. $e^{x+y}=e^xe^y$\n2. $e^{x-y}=\\frac{e^x}{e^y}$\n3. $(e^x)^p=e^{xp}$, where $p$ is a rational number\n4. $\\ln{e^x}=x$\n5. $e^{\\ln{x}}=x$, for $x\\gt0$\n## Derivative and Integral of the Exponential Function\nFor real numbers $x$,\n$$\n\\frac{d}{dx}(e^{u(x)})=e^{u(x)}u\\prime(x)\\text{ and }\\int{e^x}{dx}=e^x+C\n$$\n## Example\n![](/assets/images/2022-02-20-19-07-18.png)","n":0.072}}},{"i":249,"$":{"0":{"v":"Exam 1 Prep","n":0.577},"1":{"v":"(click \"Go to text\" for more information or see the corresponding section in the book available on [Pearson](https://canvas.asu.edu/courses/107500/external_tools/171283))\n## [6.1] Velocity, Position, and Displacement\n[[mat266.velocity]]\n\n[[mat266.position]]\n![[mat266.displacement#Finding-the-displacement]]\n![[mat266.position#Finding-the-future-position]]\n![[mat266.acceleration#Velocity-from-acceleration]]\n![[mat266.net-change-and-future-value#Net-change-and-future-value]]\n## [6.2] Regions between curves\n![[mat266.regions-between-curves#Area-of-a-region-between-two-curves]]\n## [6.3] Volume by slicing\n### Methods\n- [[mat266.general-slicing-method]]\n- [[mat266.disk-method]]\n- [[mat266.washer-method]]\n## [6.4] Volume by shells\n![[mat266.shell-method#Definition]]\n## [6.5] Length of curves\n![[mat266.arc-length]]\n## [6.6] Surface area\n![[mat266.surface-area#Definition]]\n## [6.7] Physical applications\n![[mat266.mass]]\n![[mat266.work#Definition]]\n![[mat266.force-and-pressure]]","n":0.143}}},{"i":250,"$":{"0":{"v":"Domain","n":1},"1":{"v":"\nThe set of all inputs that are defined- usually the x-axis of a graph.\n\nThe domain of a function is all real numbers $(-\\infty, \\infty)$\n\n## Domain issues\n- Division by 0\n- Negatives in the even root function\n    - $\\sqrt{-x}$\n    - Operations that would result in imaginary numbers\n- Negatives (or 0) in a $\\log$ function\n- Any multiple of $\\frac{\\pi}{2}+n$ for $\\tan{x}$\n","n":0.131}}},{"i":251,"$":{"0":{"v":"Displacement","n":1},"1":{"v":"\nSuppose you are driving along a straight highway and your position relative to a reference point is $s(t)$ for times $t\\geq0$. Your *displacement* over a time interval $[a,b]$ is the change in the position $s(b)-s(a)$.\n\nIf $s(b)>s(a)$, then your displacement is positive; when $s(b)<s(a)$, your displacement is negative.\n\n![](/assets/images/2022-02-02-12-37-26.png)\n\nAssuming $v(t)$ is the [[velocity|mat266.velocity]] of the object at a particular time ($t$), it follows that\n\n$$\n\\int^b_a{v(t)}{dt}=\\int^b_a{s\\prime(t)}{dt}=s(b)-s(a)=\\text{displacement}\n$$\n\nTherefore, the **displacement** of an object between $t=a$ and $t=b>a$ is\n\n$$\ns(b)-s(a)=\\int^b_a{v(t)}{dt}\n$$\n\n($v(t)$ being the [[velocity|mat266.velocity]] of the object)\n\n## Finding the displacement\nTo find the displacement of an object, we do not need to know its initial position. Whether an object moves from $s=-20$ to $s=-10$ or from $s=50$ to $s=60$ makes no difference- the displacement is 10 units.","n":0.092}}},{"i":252,"$":{"0":{"v":"Disk Method","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-22-00-52.png)\n\n(filled-in area represents a slice of a 3D object equivalent to the slice rotated around the provided axis)\n## Definition about the $x$-axis\nLet $f$ be continuous with $f(x)\\geq0$ on the interval $[a,b]$. If the region $R$ bounded by the graph of $f$, the $x$-axis, and the lines $x=a$ and $x=b$ is revolved about the $x$-axis, the volume of the resulting solid of revolution is\n$$\nV=\\int_a^b{\\pi f(x)^2}{dx}\\text.\n$$\n## Definition about the $y$-axis\nLet $p$ be continuous with $p(y)\\geq0$ on the interval $[c,d]$. If the region $R$ bounded by the graph of $p$, the $y$-axis, and the lines $y=c$ and $y=d$ is revolved about the $y$-axis, the volume of the resulting solid of revolution is\n$$\nV=\\int_c^d{\\pi p(y)^2}{dy}\\text.\n$$","n":0.095}}},{"i":253,"$":{"0":{"v":"Differential Operator","n":0.707},"1":{"v":"\n$$\n\\frac{d}{dx}\n$$","n":1}}},{"i":254,"$":{"0":{"v":"Differential Equations","n":0.707},"1":{"v":"\nA differential equation involved an unknown function $y$ and its derivatives. The unknown in a differential equation is not a number, but rather a function.\n\nSome examples of differential equations include...\n\n-\n$$\n\\frac{dy}{dx}+4y=\\cos{x}\n$$\n-\n$$\n\\frac{d^2y}{dx^2}+16y=0\n$$\n-\n$$\ny'(t)=0.1y(100-y)\n$$\n\n$x$ ant $t$ are commonly used as the independent variables ($t$ is generally used for time-dependent problems).\n\n## Goal\n\nThe purpose of solving a differential equation is to find the function $y$ that satisfies the differential equation.\n\nFor example, if substituting $y=\\cos{4x}$ and $y''=-16\\cos{4x}=0$ into the second equation above, we get...\n\n$$\n-16\\cos{4x}+16\\cos{4x}=0\\text,\n$$\n\nwith $y=\\cos{4x}$ reflected on the **righthand** side of the $+$ sign and $y''=-16\\cos{4x}$ reflected on the **lefthand** side of the $+$ sign. This implies that $y=\\cos{4x}$ is a solution to the differential equation.\n\n## Terminology\n\nThe general **first-order linear differential equation** has the form\n\n$$\n\\frac{dy}{dt}+p(t)y=q(t)\\text,\n$$\n\nwhere $p$ and $q$ are given functions of $t$. This equation is linear because $y$ and $y'$ appear to the first power and not in products or compositions involving $y$ or $y'$.\n\n### Order\n\nThe order of a differential equation is the highest order that appears on a derivative in the equation.\n\nOf the three examples, the first two are **first order**, and the third is **second order**.\n\n### Linear\n\nA differential equation is linear if the unknown function $y$ and its derivatives appear only to the first power and are not composed with other functions. A linear equation also cannot have products or quotients of $y$ and its derivatives.\n\nOf the examples, the first two are **linear**, and the third is **nonlinear** (because the right side contains $y^2$).\n\nA linear differential equation *cannot* have terms such as $y^2$, $yy'$, or $\\sin{y}$, where $y$ is the unknown function.\n\n## General Solution\n\nDifferential equations can be solved through integration. You must \"undo\" the derivative $y'(t)$ in order to find $y$.\n\nThe most general solution of a first-order differential equation involves **one** arbitrary constant, whereas a second-order differential equation requires **two** arbitrary constants. This carries onto equations of $n$th order, where they have $n$ arbitrary constants.\n\n### Initial Conditions\n\nA differential equation is often accompanied by initial conditions that specify the values of $y$ and possibly $y'$ at the start of the problem.\n\nIn general, a differential equation of the $n$th order requires $n$ initial conditions, which are used to determine the $n$ arbitrary constants in the general solution.\n\nA differential equation with the appropriate initial conditions is called an **initial value problem**. A first-order initial value problem generally has the form\n\n$$\n\\begin{matrix}\ny'(t)=F(t,y)&\\text{Differential equation}\\\\\ny(a)=b\\text,&\\text{Initial condition}\n\\end{matrix}\n$$\n\nwhere $a$ and $b$ are the initial values, and $F$ is a given expression that involves $t$ and/or $y$. A solution to this problem is a function $y(t)$ that satisifies the differential equation on an interval $I$ and whose graph includes the point $(a,b)$. $I$ is called the **domain** of the solution.\n\n### Verifying Solutions\n\nTo verify a solution to a differential equation, we can use substitution to prove that a function $y(t)$ satisfies the differential equation $y'(t)=F(t,y)$.\n\nTo prove $y(t)=Ce^{2.5t}$ is a solution to the equation $y'(t)=2.5y(t)$ (where $C$ is an arbitrary constant), we differentiate $y(t)=Ce^{2.5t}$ to get $y'(t)=2.5Ce^{2.5t}$.\n\n$$\ny'(t)=2.5Ce^{2.5t}=2.5Ce^{2.5t}=2.5y(t)\n$$\n\nThis means that the function $y(t)$ satisfies the equation $y'(t)$ for any value of $C$. From this, we know that $y(t)$ is a family of solutions of the differential equation.\n\n## Solving\n\n[solving-differential-equations.pdf](https://github.com/jheinem1/notes/tree/main/vault/assets/solving-differential-equations.pdf)","n":0.044}}},{"i":255,"$":{"0":{"v":"Derivatives","n":1},"1":{"v":"\nAccelaration -> a(t) = \n$\n\\frac{d}{dt}v(t)\n$\n\nVelocity -> v(t) = \n$\n\\frac{d}{dt}s(t)\n$\n\nPosition -> s(t)\n\n[[mat266.homework-1.example-1]]","n":0.302}}},{"i":256,"$":{"0":{"v":"Derivative anti Derivative Relationship","n":0.5}}},{"i":257,"$":{"0":{"v":"Density","n":1},"1":{"v":"The concentration of mass in an object. Usually measured in units of mass per volume (e.g. $g/\\text{cm}^3$)\n","n":0.243}}},{"i":258,"$":{"0":{"v":"Computing e","n":0.707},"1":{"v":"\n$e$ can be isolated as the limit\n\n$$\ne=\\lim_{h\\rightarrow0}{(1+h)}^{\\frac1h}\\text.\n$$\n\nTherefore, $e$ can be approximated as\n\n$$\ne\\approx2.718281828459045\\text.\n$$","n":0.289}}},{"i":259,"$":{"0":{"v":"Coefficient","n":1},"1":{"v":"\nA coefficient is any of the factors of a product considered in relation to a specific factor.\n\n$5$ is the coefficient of $y$ in the polynomial $5y$.\n","n":0.196}}},{"i":260,"$":{"0":{"v":"Arc Length","n":0.707},"1":{"v":"\n![](/assets/images/2022-02-08-22-32-24.png)\n## Definition for $y=f(x)$\nLet $f$ have a continuous first derivative on the interval $[a,b]$. The length of the curve from $(a,f(a))$ to $(b,f(b))$ is\n$$\nL=\\int_a^b{\\sqrt{q+f\\prime(x)^2}}{dx}\\text.\n$$\n\n## Definition for $x=g(y)$\nLet $x=g(y)$ have a continuous first derivative on the interval $[c,d]$. The length of the curve from $(g(c), c)$ to $(g(d), d)$ is\n$$\nL=\\int_x^d{\\sqrt{1+g\\prime(y)^2}}{dy}\\text.\n$$","n":0.143}}},{"i":261,"$":{"0":{"v":"Alternating Series","n":0.707},"1":{"v":"\nIf $\\sum(-1)^nb_n$ has the property $|b_n|\\geq|b_{n+1}|$, then it is convergent.\n\n$$\n\\sum_{n=1}^\\infty (\\frac{-1}{n})^{n+1}=\\frac11-\\frac12+\\frac13-\\frac14+\\cdots\n$$","n":0.302}}},{"i":262,"$":{"0":{"v":"Algebraic Rules","n":0.707},"1":{"v":"\n## Arithmetic properties\n### Associative property\n$$\na(bc)=(ab)c\n$$\n### Commutative property\n$$\na+b=b+a\n$$\n$$\nab=ba\n$$\n### Distributive/Factoring property\n$$\na(b+c)=ab+ac\n$$\n## Fraction properties\n- Fractions added or subtracted need to share the same deoniminator\n- Multiplication between fractions is straight across\n- Division can be done by multiplying the first fraction by the reciprocal of the second (flip it)\n- Can be broken up by numerator, but **not** denominator\n## Fraction formulas\n### \"Bow-tie\" method\n$$\n\\frac{a}{b}\\plusmn\\frac{c}{d}=\\frac{ad\\plusmn bc}{bd}\n$$\n### Fraction in numerator of fraction\n$$\n\\frac{\\frac{a}{b}}{c}=\\frac{a}{bc}\n$$\n### Fraction in denominator of fraction\n$$\n\\frac{\\frac{a}{b}}{c}=\\frac{ac}{b}\n$$\n## Exponent properties\n- Multiplying two exponents with the same base add the exponents\n    - $a^b+a^c=a^{b+c}$\n- An exponent to one degree raised to another multiplies the exponents\n    - $(a^n)^x=a^{n*x}$\n- Group of numbers raised to the same power can be separated\n    - $(ab)^x=a^xb^x$\n- Negative exponent can/should be moved to the denominator (or numerator)\n    - $a^{-m}=\\frac{1}{a^m}$\n    - $\\frac{1}{a^{-m}}=a^m$\n- Dividing exponents means subtraction\n    - $\\frac{a^n}{a^m}=a^{n-m}$\n- Fractions raised to a power can be split up\n    - $(\\frac{a}{b})^n=\\frac{a^n}{b^n}$\n- Fractions raised to a negative power can be flipped\n    - $\\frac{1}{2}^{-1}=\\frac{2}{1}$\n- Anything to the first degree equals itself\n    - $x^1=x$\n- Anything to the 0 degree equals 1\n    - $x^0=1$\n## Radical properties\n- The $n$th root of any number is equal to the number to the power of 1 over the root\n- The $n$th root of $a$ times $b$ can be split into the $n$th root of $a$ times the $n$th root of $b$\n- The nth root of $a$ over $b$ is equal to the $n$th root of $a$ over the $n$th root of $b$\n- The $n$th root of $a$ to the power of $m$ is equal to $a$ to the power of $m$ over $n$\n- The $n$th root of $a$ to the $n$ power equal $a$ if $n$ is odd\n- The $n$th root of $a$ to the $n$ power is the absolute value of $a$ or plus or minus $a$\n## Important functions\n- Polynomial & linear/constant functions\n    - Construction of power functions\n- Power functions\n    - Like polynomial, but 1 term\n    - $x^a$\n- Rational functions\n    - All polynomials are rational functions\n    - $\\frac{poly}{poly}$\n- Trig functions\n    - $\\sin$/$\\cos$/$\\tan$/etc.\n- Exponential/log functions\n- Piecewise (not as important)","n":0.055}}},{"i":263,"$":{"0":{"v":"Algebraic Functions","n":0.707},"1":{"v":"\nAlgebraic functions are constructed using the operations of algebra: addition, subtraction, multiplication, division, and roots. Examples of algebraic functions are $f(x)=\\sqrt{2x^3+4}$ and $f(x)=x^{\\frac{1}{4}}(x^3+2)$. In general, if an even root (square root, fourth root, and so forth) appears, then the domain does not contain points at which the quantity under the root is negative (and perhaps other points).\n","n":0.132}}},{"i":264,"$":{"0":{"v":"Acceleration","n":1},"1":{"v":"\nBecause the acceleration of an object moving along a line is given by $a(t)=v\\prime(t)$, the relationship between velocity and acceleration is the same as the relationship between position and velocity. Given the acceleration of an object, the change in velocity over an interval $[a,b]$ is\n$$\n\\text{change in velocity}=v(b)-v(a)=\\int_a^b{v\\prime(t)}{dt}=\\int_a^b{a(t)}{dt}\\text{.}\n$$\n## Velocity from Acceleration\nGiven the acceleration $a(t)$ of an object moving along a line and its initial velocity $v(0)$, the velocity of the object for future times $t\\geq0$ is\n$$\nv(t)=v(0)+\\int_0^t{a(x)}{dx}\\text{.}\n$$\nThis is a consequence of the [[mat266.fundamental-theorem]].","n":0.111}}},{"i":265,"$":{"0":{"v":"Luau","n":1}}},{"i":266,"$":{"0":{"v":"Types","n":1}}},{"i":267,"$":{"0":{"v":"Vector","n":1},"1":{"v":"\nA type used specifically for Roblox's [[luau.libraries.roblox.types.vector3]] type. This allows better behavior for situations like table keys. There is no way to get a value of this type in vanilla luau.","n":0.18}}},{"i":268,"$":{"0":{"v":"Thread","n":1},"1":{"v":"\nA representation of a thread used by the [[luau.globals.coroutine]] and [[luau.libraries.roblox.globals.task]] library for asynchronous code.","n":0.258}}},{"i":269,"$":{"0":{"v":"Table","n":1},"1":{"v":"\nA generic data structure with an array and hashmap portion. Can store any datatype in Luau as either a value or key. In addition to basic syntax, the [[luau.globals.table]] library is used to manipulate tables, and [[luau.globals.pairs]] and [[luau.globals.ipairs]] are used to iterate over tables. Arrays in Luau start at `1` instead of `0`.\n\nTo get a value from a table that has non-string keys, the syntax `t[k]` is used. Similar syntax is used for assignment (`t[k] = v`). Luau offers a cleaner way to get string keys that conform to variable syntax; `t.k` and `t.k = v` respectively.\n\nTo get the length of the array portion of a table, the `#` operator is used- `#t`, and will return an integer.\n\nMost of the functionality of tables can be overloaded through the use of [[luau.metamethods]].\n\n## Examples\n### Array\n```Lua\nlocal t = {1, 2, 3, 4, 5}\nprint(t[1]) --> 1\nprint(t[5]) --> 5\n```\n### Dictionary/Object\n```Lua\nlocal obj = {\n    Key = 13,\n    [true] = 14,\n    [3] = function() print(\"Hello World!\") end\n}\n-- These two are both methods of accessing string keys\nprint(obj.Key) --> 13\nprint(obj[\"Key\"]) --> 13\n-- Any type can be used as a key in Luau\nprint(obj[true]) --> 14\n-- Any type can be used as a value in Luau\nobj[3]() --> \"Hello World!\"\n```\n### Hybrid\n```Lua\nlocal t = {\n    [1] = 1,\n    [2] = 2,\n    [\"Hello World!\"] = false\n}\nprint(#t) --> 2\nprint(t[2]) --> 2\nprint(t[\"Hello World!\"]) --> false\n```","n":0.067}}},{"i":270,"$":{"0":{"v":"String","n":1},"1":{"v":"\nAn immutable array of characters with a max size of `1<<30`.\n\n## Manipulation\n\n- `..`: Concatenate two strings.\n\nFor further string manipulation, see [[luau.globals.string]].","n":0.218}}},{"i":271,"$":{"0":{"v":"Number","n":1},"1":{"v":"\nA luau number can be either a `float` or an `integer`, but both are represented by the same type. Luau uses both 32-bit and 64-bit numbers depending on the origin of the number.\n\n## Manipulation\n\n- `+`: Addition\n- `-`: Subtraction\n- `*`: Multiplication\n- `/`: Division\n- `%`: Modulo\n- `^`: Exponentiation\n\nFor bitwise operations, see [[luau.globals.bit32]].","n":0.141}}},{"i":272,"$":{"0":{"v":"Boolean","n":1},"1":{"v":"\nA boolean in luau is a simple binary value that is either `true` or `false`. Booleans are not to be confused with truthy or falsy values, which are used in luau for conditionals.\n\n## Manipulating booleans\n\n- `not bool`: inverts the boolean\n- `bool and bool`: returns `true` if both booleans are `true`\n- `bool or bool`: returns `true` if either boolean is `true`\n\nThese operations also work with other types, but the result is often a truthy or falsy value rather than a boolean (with the exception of `not`).\n\n\n```lua\nlocal a = true\nlocal b = false\nlocal c = \"hello\n\nprint(not a) -- false\nprint(not b) -- true\nprint(not c) -- false\nprint(a and b) -- false\nprint(a or b) -- true\nprint(a and c) -- \"hello\"\nprint(c or a) -- \"hello\"\nprint(c and a) -- true\n```","n":0.09}}},{"i":273,"$":{"0":{"v":"Metamethods","n":1},"1":{"v":"\n## Metatables\n\nA metatable is a table full of metamethods which overload the functionality of existing types in Luau. Under the hood, every operator in Luau is essentially a function call. Metatables are primarily used to add functionality to [[luau.types.userdata]], which can easily be implemented in C++.\n\n## Metamethods\n\nMetamethods are functions within metatables such as [[luau.metamethods.index]] and [[luau.metamethods.add]] that define the behavior of operators in Luau acting on a given type.\n\n## Interaction\n\n[[luau.globals.setmetatable]] and [[luau.globals.getmetatable]] are primarily used to interact with metatables.","n":0.113}}},{"i":274,"$":{"0":{"v":"__unm","n":1},"1":{"v":"\n```Lua\n__unm<T>(self: T): unknown\n```\nFires when the unary â operator is used on the table.","n":0.277}}},{"i":275,"$":{"0":{"v":"__tostring","n":1},"1":{"v":"\n```Lua\n__tostring<T>(self: T): string\n```\nFired when `tostring` is called on the table. Also fired when encoding tables to JSON (something to note because table keys can have objects with custom metatables.","n":0.186}}},{"i":276,"$":{"0":{"v":"__sub","n":1},"1":{"v":"\n```Lua\n__sub<T>(self: T, value: unknown): unknown\n```\nThe `â` subtraction operator.","n":0.354}}},{"i":277,"$":{"0":{"v":"__newindex","n":1},"1":{"v":"\n```Lua\n__newindex<T>(self: T, key: unknown, value: unknown): nil\n```\nOR\n```Lua\n__newindex: table\n```\nFires when `table[index]` tries to be set (`table[index] = value`), if `table[index]` is `nil`. Can also be set to a table, in which case that table will be indexed.","n":0.167}}},{"i":278,"$":{"0":{"v":"__namecall","n":1},"1":{"v":"\n```Lua\n__namecall<T>(self: T, ...args): unknown\n```\nFired when methods are called on Roblox userdata. Cannot be implemented in Luau and not included in the base language. The method name is passed separately.","n":0.186}}},{"i":279,"$":{"0":{"v":"__mul","n":1},"1":{"v":"\n```Lua\n__mul<T>(self: T, value: unknown): unknown\n```\nThe `*` multiplication operator.","n":0.354}}},{"i":280,"$":{"0":{"v":"__mode","n":1},"1":{"v":"\n```Lua\n__mode: \"k\" | \"v\" | \"kv\" | nil\n```\nDeclare references in keys/values as either weak or strong.\n\n- `k`: weak keys\n- `v`: weak values\n- `kv`: weak keys and values\n- `nil`: strong keys and values","n":0.177}}},{"i":281,"$":{"0":{"v":"__mod","n":1},"1":{"v":"\n```Lua\n__mod<T>(self: T, value: unknown): unknown\n```\nThe `%` modulus operator.","n":0.354}}},{"i":282,"$":{"0":{"v":"Metatable","n":1},"1":{"v":"\n```Lua\n__metatable: unknown | nil\n```\nIf present, locks the metatable so getmetatable will return this instead of the metatable and setmetatable will error. Non-function value.","n":0.209}}},{"i":283,"$":{"0":{"v":"__lt","n":1},"1":{"v":"\n```Lua\n__lt<T>(self: T, value: T): boolean\n```\nThe `<` less than operator; **NOTE**: Using the `>=` greater than or equal to operator will invoke this metamethod and return the opposite of what this returns, as greater than or equal to is the same as not less than. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.118}}},{"i":284,"$":{"0":{"v":"__len","n":1},"1":{"v":"\n```Lua\n__len<T>(self: T): number\n```\nFired when the # length operator is used on the Object. NOTE: Only userdatas actually respect the __len() metamethod in Lua 5.1.","n":0.204}}},{"i":285,"$":{"0":{"v":"__le","n":1},"1":{"v":"\n```Lua\n__le<T>(self: T, value: T): boolean\n```\nThe `<=` operator; NOTE: Using the `>` greater than operator will invoke this metamethod and return the opposite of what this returns, as greater than is the same as not less than or equal to. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.122}}},{"i":286,"$":{"0":{"v":"__index","n":1},"1":{"v":"\n```Lua\n__index<T>(self: T, key: unknown): typeof T[key]\n```\nOR\n```Lua\n__index: table\n```\nFires when `self[key]` is indexed, if `self[key]` is nil. Can also be set to a table, in which case that table will be indexed.","n":0.183}}},{"i":287,"$":{"0":{"v":"__gc","n":1},"1":{"v":"\n```Lua\n__gc<T>(self: T): unknown\n```\nFired when the table is garbage-collected. NOTE: In Roblox, this metamethod is disabled.","n":0.258}}},{"i":288,"$":{"0":{"v":"__eq","n":1},"1":{"v":"\n```Lua\n__eq<T>(self: T, value: T): boolean\n```\nThe `==` equal to operator. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.164}}},{"i":289,"$":{"0":{"v":"__div","n":1},"1":{"v":"\n```Lua\n__div<T>(self: T, value: unknown): unknown\n```\nThe `/` division operator.","n":0.354}}},{"i":290,"$":{"0":{"v":"__concat","n":1},"1":{"v":"\n```Lua\n__concat<T>(self: T, value: unknown): unknown\n```\nFires when the `..` concatenation operator is used on the table.","n":0.258}}},{"i":291,"$":{"0":{"v":"__call","n":1},"1":{"v":"\n```Lua\n__call<T>(self: T, ...unknown): unknown\n```\nFires when the table is called like a function, `...` is the arguments that were passed.","n":0.229}}},{"i":292,"$":{"0":{"v":"__add","n":1},"1":{"v":"\n```Lua\n__add<T>(self: T, value: unknown): unknown\n```\nThe + addition operator.","n":0.354}}},{"i":293,"$":{"0":{"v":"Libraries","n":1}}},{"i":294,"$":{"0":{"v":"Roblox","n":1},"1":{"v":"\nThe Roblox API is unique in that luau was created specifically for it.","n":0.277}}},{"i":295,"$":{"0":{"v":"Types","n":1}}},{"i":296,"$":{"0":{"v":"Globals","n":1}}},{"i":297,"$":{"0":{"v":"Table","n":1},"1":{"v":"\nLibrary of functions used for table manipulation.","n":0.378}}},{"i":298,"$":{"0":{"v":"table.unpack","n":1},"1":{"v":"\n```lua\ntable.unpack<T>(table: Array<T>, (i: number)=1, j: number?): LuaTuple<T>\n```\n\nDoes not include the dictionary keys in the returned tuple.","n":0.25}}},{"i":299,"$":{"0":{"v":"table.sort","n":1},"1":{"v":"\n```lua\ntable.sort(t: Array, cmp: ((a: unknown, b: unknown) => boolean)?)\n```\n\nIf no `cmp` function is provided, sorts an array of numbers using the equivalent of\n\n```lua\nfunction(a, b)\n    return a < b\nend\n```\n\n. If `cmp` is provided, it is used to compare the elements.","n":0.16}}},{"i":300,"$":{"0":{"v":"table.remove","n":1},"1":{"v":"\n```lua\ntable.remove(t: table, pos: unknown): unknown\n```\n\nRemoves the element at the position `pos` from the table `t`. If `pos` is in the array portion of the table, all elements after `pos` are shifted down. If `pos` is in the hash portion of the table, the key-value pair is","n":0.147}}},{"i":301,"$":{"0":{"v":"table.pack","n":1},"1":{"v":"\n```lua\ntable.pack(...): Array<unknown>\n```\n\nPacks all values in the vararg list into an array. This is the equivalent of `{...}`.","n":0.243}}},{"i":302,"$":{"0":{"v":"Move","n":1},"1":{"v":"\n```lua\ntable.move<T extends Array>(a1: Array, f: number, e: number: t: number, (a2: T)=a1): T\n```\n\nMoves elements `f` to `e` in `a1` to the position `t` in `a2`.","n":0.2}}},{"i":303,"$":{"0":{"v":"table.isfrozen","n":1},"1":{"v":"\n```lua\ntable.isfrozen(t: table): boolean\n```\n\nReturns `true` if the table is frozen. Tables can be frozen using [[luau.globals.table.freeze]].","n":0.258}}},{"i":304,"$":{"0":{"v":"table.insert","n":1},"1":{"v":"\n```lua\ntable.insert(t: table, pos: unknown, value: unknown)\n```\n\nInserts the value `value` into the table `t` at the index or key `pos`. If `pos` is an index in the array portion of the table, all values at and after `pos` are shifted by one index to the right. If `pos` is a key in the table, the value at that key is overwritten.","n":0.129}}},{"i":305,"$":{"0":{"v":"table.getn","n":1},"1":{"v":"\n```lua\ntable.getn(t: table): number\n```\n\nReturns the number of elements in the table.","n":0.316}}},{"i":306,"$":{"0":{"v":"table.freeze","n":1},"1":{"v":"\n```lua\ntable.freeze(t: table)\n```\n\nMakes the table read-only. Attempting to modify a frozen table will throw an error, though this is shallow.","n":0.229}}},{"i":307,"$":{"0":{"v":"table.foreachi","n":1},"1":{"v":"\n```lua\ntable.foreachi(t: table, f: (key: unknown, value: unknown) => void)\n```\n\nA deprecated method for iterating over a mixed table.","n":0.243}}},{"i":308,"$":{"0":{"v":"table.foreach","n":1},"1":{"v":"\n```lua\ntable.foreach(t: Array, f: (key: number, value: unknown) => void)\n```\n\nA deprecated method for iterating over an array.","n":0.25}}},{"i":309,"$":{"0":{"v":"table.find","n":1},"1":{"v":"\n```lua\ntable.find<T extends table>(haystack: T, needle: unknown, init: number): T extends Array ? number : unknown\n```\n\nWithin the given array-like table haystack, find the first occurrence of value needle, starting from index `init` or the beginning if not provided. If the value is not found, `nil` is returned.\n\nA linear search algorithm is performed.\n\n## Examples\n```Lua\nlocal t = {\"a\", \"b\", \"c\", \"d\", \"e\"}\nprint(table.find(t, \"d\")) --> 4\nprint(table.find(t, \"z\")) --> nil, because z is not in the table\nprint(table.find(t, \"b\", 3)) --> nil, because b appears before index 3\n```","n":0.11}}},{"i":310,"$":{"0":{"v":"Create","n":1},"1":{"v":"\n```Lua\ntable.create<T>(count: number, value: T): Array<T>\n```\n\nGiven an array where all elements are strings or numbers, returns the string `t[i] â¦ sep â¦ t[i+1] â¦ sep â¦ t[j]`. The default value for sep is an empty string, the default for `i` is `1`, and the default for `j` is `#t`. If `i` is greater than `j`, returns the empty string.","n":0.131}}},{"i":311,"$":{"0":{"v":"table.concat","n":1},"1":{"v":"\n```Lua\ntable.concat(t: Array, sep: string, (i: number)=1, j: number?): string\n```\n\nConcatenates the provided table into a string using the given separator.","n":0.229}}},{"i":312,"$":{"0":{"v":"table.clear","n":1},"1":{"v":"\n```Lua\ntable.clear(table: table)\n```\n\nSets the value for all keys within the given table to nil. This causes the # operator to return 0 for the given table. The allocated capacity of the tableâs array portion is maintained, which allows for efficient re-use of the space.\n\nThis function does not delete/destroy the table provided to it. This function is meant to be used specifically for tables that are to be re-used.\n\n## Examples\n```Lua\nlocal grades = {95, 82, 71, 92, 100, 60}\nprint(grades[4], #grades) --> 92, 6\ntable.clear(grades)\nprint(grades[4], #grades) --> nil, 0\n-- If grades is filled again with the same number of entries,\n-- no potentially expensive array resizing will occur\n-- because the capacity was maintained by table.clear.\n```\n","n":0.096}}},{"i":313,"$":{"0":{"v":"Newproxy","n":1},"1":{"v":"\n```Lua\nnewproxy(addMetatable=false): userdata\n```\nCreates and returns a new userdata with or without a metatable. If created with a metatable it can be readily modified with [[lang.luau.globals.getmetatable]], and if not, will have to be created using [[lang.luau.globals.setmetatable]].\n\n## Example\n```Lua\nlocal myUserdata = newproxy(true)\ngetmetatable(myUserdata).__index = {1, 2, 3}\nprint(type(myUserdata)) --> \"userdata\"\nprint(myUserdata[1]) --> 1\n```\n","n":0.147}}}]}
