{"pageProps":{"note":{"id":"7s8q8psy1ipw6qirqgnjt5e","title":"Justification","desc":"","updated":1647886480501,"created":1647884346610,"custom":{},"fname":"ser222.algorithms.adj.justification","type":"note","vault":{"fsPath":"vault"},"contentHash":"dbe0f6e61beb73b6c9a0af306c085298","links":[{"from":{"fname":"ser222.algorithms.adj","vaultName":"vault"},"type":"backlink","position":{"start":{"line":3,"column":97,"offset":335},"end":{"line":3,"column":150,"offset":388},"indent":[]},"value":"ser222.algorithms.adj.justification","alias":"justification"},{"from":{"fname":"ser222.algorithms.adj","vaultName":"vault"},"type":"backlink","position":{"start":{"line":11,"column":3,"offset":718},"end":{"line":11,"column":56,"offset":771},"indent":[]},"value":"ser222.algorithms.adj.justification","alias":"Justification"}],"anchors":{"proof-of-termination":{"type":"header","text":"Proof of termination","value":"proof-of-termination","line":8,"column":0,"depth":2},"example---proving-swim-terminates":{"type":"header","text":"Example - Proving 'swim' terminates","value":"example---proving-swim-terminates","line":15,"column":0,"depth":3},"proof-of-correctness":{"type":"header","text":"Proof of correctness","value":"proof-of-correctness","line":27,"column":0,"depth":2},"example---proving-swim-is-correct":{"type":"header","text":"Example - Proving 'swim' is correct","value":"example---proving-swim-is-correct","line":34,"column":0,"depth":3},"metric-1":{"type":"header","text":"Metric 1","value":"metric-1","line":46,"column":0,"depth":3},"case-1":{"type":"header","text":"Case 1","value":"case-1","line":52,"column":0,"depth":4},"case-2":{"type":"header","text":"Case 2","value":"case-2","line":59,"column":0,"depth":4},"proof-of-efficiency":{"type":"header","text":"Proof of efficiency","value":"proof-of-efficiency","line":66,"column":0,"depth":2},"metric-2":{"type":"header","text":"Metric 2","value":"metric-2","line":75,"column":0,"depth":3}},"children":[],"parent":"cbwqvn7mgvc262hvxs5m3r6","data":{}},"body":"<h1 id=\"justification\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#justification\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Justification</h1>\n<h2 id=\"proof-of-termination\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#proof-of-termination\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Proof of termination</h2>\n<ul>\n<li>Shows that an algorithm always terminates</li>\n<li>First step towards producing something useful\n<ul>\n<li>Otherwise program could be infinite loop</li>\n</ul>\n</li>\n<li>Typically performed by determining a progress metric, then showing an algorithm \"moves along\" the metric</li>\n</ul>\n<h3 id=\"example---proving-swim-terminates\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#example---proving-swim-terminates\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Example - Proving 'swim' terminates</h3>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">:=</span> k <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> k<span class=\"token punctuation\">)</span>\n        exch<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>We can infer that the only place where the algorithm could not terminate is when the <code>while</code> loop is entered.</p>\n<p>Because <code>k</code> is constantly being set to <code>parent</code>, the loop can terminate as the value of <code>parent</code> will eventually reach either <code>1</code>, or less than <code>1</code> since <code>parent</code> is set to <code>k / 2</code> each iteration. Additionally, since <code>k</code> and <code>parent</code> are both integers, <code>1 / 2</code> will round down to <code>0</code> rather than up to <code>1</code>.</p>\n<h2 id=\"proof-of-correctness\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#proof-of-correctness\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Proof of correctness</h2>\n<ul>\n<li>Shows that an algorithm always performs in a certain way, or acts according to certain constraints</li>\n<li>If we have proof of correctess, that assets the algorithm is correct\n<ul>\n<li>The remaining question would be, \"is the algorithm fast enough?\"</li>\n</ul>\n</li>\n<li>Typically performed by analyzing the way the algorithm transforms data to argue the output will always have certain properties</li>\n</ul>\n<h3 id=\"example---proving-swim-is-correct\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#example---proving-swim-is-correct\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Example - Proving 'swim' is correct</h3>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">:=</span> k <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> k<span class=\"token punctuation\">)</span>\n        exch<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">:=</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>Let <code>k</code> be the node that will be swim'ed. If <code>k</code> is a node already in its proper position then <code>less(parent(k), k)</code> will always be <code>False</code>, and no code will be run.</p>\n</blockquote>\n<p>From this, we can infer that the result is correct because we know that <code>parent(k)</code> should always be less than <code>k</code> in an ordered max heap.</p>\n<h3 id=\"metric-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#metric-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Metric 1</h3>\n<p>Using the metric defined earlier...</p>\n<blockquote>\n<p>The ability of the algorithm to process a heap-sorted array with at most one node which violates the heap rule and produce a heap-sorted array with no violations of the maximum heap rule. The array must contain a complete tree at all times.</p>\n</blockquote>\n<h4 id=\"case-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#case-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Case 1</h4>\n<ul>\n<li>Tree does not contain node with value</li>\n<li>In step 1, we loop over tan element and check its contents</li>\n<li>No changes are made to <code>N</code>, <code>keys</code>, or <code>value</code>, so after that step, the data will be heap-ordered</li>\n<li>If there is no node to update, the algorithm will terminate</li>\n</ul>\n<h4 id=\"case-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#case-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Case 2</h4>\n<ul>\n<li>Tree contains node with value</li>\n<li>We defer to the mechanisms for <code>swim</code> and <code>sink</code> which are already known to result in a heap-ordered array</li>\n<li>Both functions will terminate if there is no work to do</li>\n<li>The <code>if</code>-statements evaluate the case of being out of order with <code>parent</code> or <code>children,</code> and follows the formula as defined</li>\n</ul>\n<h2 id=\"proof-of-efficiency\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#proof-of-efficiency\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Proof of efficiency</h2>\n<ul>\n<li>The metric we defined earlier was</li>\n</ul>\n<blockquote>\n<p>M1\nFor a cost metric, we will use the number of lines run as a measure of computational time needed for particular design.</p>\n</blockquote>\n<ul>\n<li>Since we are working with an algorithm, we want to show that our algorithm is at least as fast as any other</li>\n</ul>\n<h3 id=\"metric-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#metric-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Metric 2</h3>\n<ul>\n<li>Per <code>K</code>, insert takes <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<ul>\n<li>Thus, the best we can get is <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/notes/cbwqvn7mgvc262hvxs5m3r6\">ADJ for Algorithms</a></li>\n</ul>","noteIndex":{"id":"6YxiIDvTOeKoHyAaqqzY9","title":"Notes","desc":"","updated":1655764869385,"created":1641245237998,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fc07e211d902512814feeef3187746c9","links":[{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"typescript","alias":"typescript","position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":17,"offset":36},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"typescript"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"luau","alias":"luau","position":{"start":{"line":5,"column":3,"offset":39},"end":{"line":5,"column":11,"offset":47},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"luau"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser222","alias":"SER 222 - Data Structures & Algorithms","position":{"start":{"line":9,"column":3,"offset":67},"end":{"line":9,"column":52,"offset":116},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser216","alias":"SER 216 - \"Software Enterprise\" aka Intro to Software Design","position":{"start":{"line":10,"column":3,"offset":119},"end":{"line":10,"column":74,"offset":190},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser216"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"mat266","alias":"MAT 266 - Calc For Engineers II","position":{"start":{"line":11,"column":3,"offset":193},"end":{"line":11,"column":45,"offset":235},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"mat266"}}],"anchors":{"personal-notes":{"type":"header","text":"Personal Notes","value":"personal-notes","line":8,"column":0,"depth":2},"spring-2022":{"type":"header","text":"Spring 2022","value":"spring-2022","line":13,"column":0,"depth":2}},"children":["fuqi18m0n2cda123o2f3003","cCj8dvgLOLu6CEaNoWdD6","T2ptecH0AHZvseJr1aUvN","TzkCyXooADlBmPWjKo0ds","jwgm1vmw3r5kati1c6uw5pr"],"parent":null,"data":{},"body":"\n## Personal Notes\n\n- [[typescript]]\n- [[luau]]\n\n## Spring 2022\n\n- [[SER 222 - Data Structures & Algorithms|ser222]]\n- [[SER 216 - \"Software Enterprise\" aka Intro to Software Design|ser216]]\n- [[MAT 266 - Calc For Engineers II|mat266]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"James' Class Notes","description":"Fun SWE Stuffs","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteUrl":"https://jheinem1.github.io/notes","assetsPrefix":"/notes","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"enableSmartRefs":true,"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true}}},"__N_SSG":true}