{"pageProps":{"note":{"id":"zvzpumsq3jiyu593dxba2xx","title":"Merge Sort","desc":"","updated":1646072941790,"created":1645637339936,"custom":{},"fname":"ser222.sorting.merge-sort","type":"note","vault":{"fsPath":"vault"},"contentHash":"10924c4efda07fde61d0d75beb2c0686","links":[{"type":"wiki","from":{"fname":"ser222.sorting.merge-sort","id":"zvzpumsq3jiyu593dxba2xx","vaultName":"vault"},"value":"ser222.sorting.selection-sort","alias":"ser222.sorting.selection-sort","position":{"start":{"line":4,"column":52,"offset":70},"end":{"line":4,"column":85,"offset":103},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.sorting.selection-sort"}},{"type":"wiki","from":{"fname":"ser222.sorting.merge-sort","id":"zvzpumsq3jiyu593dxba2xx","vaultName":"vault"},"value":"ser222.sorting.insertion-sort","alias":"ser222.sorting.insertion-sort","position":{"start":{"line":5,"column":3,"offset":124},"end":{"line":5,"column":36,"offset":157},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.sorting.insertion-sort"}},{"type":"wiki","from":{"fname":"ser222.sorting.merge-sort","id":"zvzpumsq3jiyu593dxba2xx","vaultName":"vault"},"value":"ser222.sorting.insertion-sort","alias":"ser222.sorting.insertion-sort","position":{"start":{"line":81,"column":16,"offset":2286},"end":{"line":81,"column":49,"offset":2319},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.sorting.insertion-sort"}},{"type":"wiki","from":{"fname":"ser222.sorting.merge-sort","id":"zvzpumsq3jiyu593dxba2xx","vaultName":"vault"},"value":"ser222.sorting","alias":"ser222.sorting","position":{"start":{"line":129,"column":7,"offset":3549},"end":{"line":129,"column":40,"offset":3582},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.sorting","anchorHeader":"Decision-trees"}},{"from":{"fname":"ser222","vaultName":"vault"},"type":"backlink","position":{"start":{"line":43,"column":3,"offset":2988},"end":{"line":43,"column":38,"offset":3023},"indent":[]},"value":"ser222.sorting.merge-sort","alias":"Notes"}],"anchors":{"the-algorithm":{"type":"header","text":"The algorithm","value":"the-algorithm","line":8,"column":0,"depth":2},"divide-and-conquer-algorithms":{"type":"header","text":"Divide-and-conquer algorithms","value":"divide-and-conquer-algorithms","line":13,"column":0,"depth":3},"the-concept":{"type":"header","text":"The concept","value":"the-concept","line":18,"column":0,"depth":2},"implementation":{"type":"header","text":"Implementation","value":"implementation","line":26,"column":0,"depth":2},"compared-to-ser222sortinginsertion-sort":{"type":"header","text":"Compared to ser222.sorting.insertion-sort","value":"compared-to-ser222sortinginsertion-sort","line":87,"column":0,"depth":2},"insertion-sort":{"type":"header","text":"Insertion sort","value":"insertion-sort","line":91,"column":0,"depth":3},"merge-sort":{"type":"header","text":"Merge sort","value":"merge-sort","line":98,"column":0,"depth":3},"proving-claim":{"type":"header","text":"Proving claim","value":"proving-claim","line":105,"column":0,"depth":2},"proof-formulation":{"type":"header","text":"Proof formulation","value":"proof-formulation","line":112,"column":0,"depth":3},"conclusion":{"type":"header","text":"Conclusion","value":"conclusion","line":133,"column":0,"depth":2}},"children":[],"parent":"H4F7XnqFDxFSpMKPmz29Q","data":{}},"body":"<h1 id=\"merge-sort\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#merge-sort\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Merge Sort</h1>\n<h2 id=\"the-algorithm\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#the-algorithm\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>The algorithm</h2>\n<ul>\n<li>Realistically, you would not use algorithms like <a href=\"/notes/notes/Llhr6wIMEJybJ4f1ncfwG\">Selection Sort</a> or other <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></li>\n<li><a href=\"/notes/notes/iwVAJyCH4RCIjwzhj9WT1\">Insertion Sort</a> still has some benefits, but is not widely used</li>\n</ul>\n<h3 id=\"divide-and-conquer-algorithms\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#divide-and-conquer-algorithms\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Divide-and-conquer algorithms</h3>\n<ul>\n<li>In a divide-and-conquer, an algorithm is designed to divide a problem into a set of sub-problems, repeating until a trivial problem emerges, and then combine the results of the sub-problems to give a solution to the original problem</li>\n<li>This often gives an algorithm's complexity <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>‚Å°</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span></span></span>- this represents the performing a reduction on the input size</li>\n</ul>\n<h2 id=\"the-concept\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#the-concept\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>The concept</h2>\n<ul>\n<li>Take an array, then split it into halves</li>\n<li>Sort each of the halves (using recursion (though you don't have to))</li>\n<li>Combine the sorted halves to form a sorted whole</li>\n</ul>\n<p><img src=\"/notes/assets/images/2022-02-23-10-47-37.png\"></p>\n<h2 id=\"implementation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementation</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> aux <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> comparable<span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">assert</span> <span class=\"token function\">isSorted</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> aux<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hi <span class=\"token operator\">&#x3C;=</span> lo<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> lo <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> aux<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token function\">isSorted</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token function\">isSorted</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// pointer for 'array'</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> lo<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// pointer for 'aux'</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// copy both sections of 'array' to 'aux'</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> lo<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&#x3C;=</span> hi<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        aux<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// combine &#x26; sort the two sections</span>\n    <span class=\"token comment\">/*\n       if (section1[i] &#x3C; section2[j]) {\n           combined.push(section2[j])\n           j++\n       } else {\n           combined.push(section1[i])\n           i++\n       }\n       (rest of checks to ensure 'i' and 'j' are\n       within the bounds of the arrays)\n    */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> lo<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&#x3C;=</span> hi<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> mid<span class=\"token punctuation\">)</span>\n            array<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> aux<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> hi<span class=\"token punctuation\">)</span>\n            array<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> aux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">less</span><span class=\"token punctuation\">(</span>aux<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> aux<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            array<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> aux<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            array<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> aux<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">assert</span> <span class=\"token function\">isSorted</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"compared-to-insertion-sort\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#compared-to-insertion-sort\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Compared to <a href=\"/notes/notes/iwVAJyCH4RCIjwzhj9WT1\">Insertion Sort</a></h2>\n<p>(measurements are not representative of real-world performance, just to provide a sense of scale, insertion sort in particular isn't nearly that bad on modern hardware)</p>\n<h3 id=\"insertion-sort\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#insertion-sort\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Insertion sort</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>computer</th><th>thousand</th><th>million</th><th>billion</th></tr></thead><tbody><tr><td>home</td><td>instant</td><td>2.8 hours</td><td>317 years</td></tr><tr><td>super</td><td>instant</td><td>1 second</td><td>1 week</td></tr></tbody></table>\n<h3 id=\"merge-sort-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#merge-sort-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Merge sort</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>computer</th><th>thousand</th><th>million</th><th>billion</th></tr></thead><tbody><tr><td>home</td><td>instant</td><td>1 second</td><td>18 min</td></tr><tr><td>super</td><td>instant</td><td>instant</td><td>instant</td></tr></tbody></table>\n<h2 id=\"proving-claim\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#proving-claim\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Proving claim</h2>\n<blockquote>\n<p>\"Top-down mergesort uses between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac12n\\log(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n\\log{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span></span></span> compares to sort any array of length <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span>\"</p>\n</blockquote>\n<ul>\n<li>Proof via direct construction:\n<ul>\n<li>Let <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> represent the number of comparisons for an input of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> elements</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"proof-formulation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#proof-formulation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Proof formulation</h3>\n<ul>\n<li>Write recurrence for <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">C(0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span> (loop in merge doesn't run)</li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">C(1)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span> (2nd branch only in merge)</li>\n<li>Our recurrence is then</li>\n</ul>\n</li>\n</ul>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if¬†</mtext><mi>n</mi><mo>=</mo><mn>0</mn><mtext>¬†or¬†</mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">‚à£</mi><mfrac><mi>n</mi><mn>2</mn></mfrac><mi mathvariant=\"normal\">‚à£</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">‚à£</mi><mfrac><mi>n</mi><mn>2</mn></mfrac><mi mathvariant=\"normal\">‚à£</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">C(n) = \\begin{cases} 0 &#x26;\\text{if }n=0\\text{ or }n=1 \\\\ C(|\\frac{n}{2}|)+C(|\\frac{n}{2}|)+n \\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">‚à£</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">‚à£</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">‚à£</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">‚à£</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if¬†</span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\">¬†or¬†</span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<ul>\n<li>Let <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> look like a power of two\n<ul>\n<li>Since <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n=2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\log{n}=k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span>...</li>\n</ul>\n</li>\n</ul>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">C(n)=n\\log{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span></span></span></div>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#conclusion\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Conclusion</h2>\n<p>Using <a href=\"/notes/notes/H4F7XnqFDxFSpMKPmz29Q#Decision-trees\">Sorting</a>, we can prove that merge sort is an asymptotically optimal algorithm for sorting. As long as compares are the optimal way to sort, one cannot build any computer or write any algorithm to do general sorting in less than <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>log</mi><mo>‚Å°</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n\\log{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span></span></span> time.</p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/notes/TzkCyXooADlBmPWjKo0ds\">SER-222</a></li>\n</ul>","noteIndex":{"id":"6YxiIDvTOeKoHyAaqqzY9","title":"Notes","desc":"","updated":1655764869385,"created":1641245237998,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fc07e211d902512814feeef3187746c9","links":[{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"typescript","alias":"typescript","position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":17,"offset":36},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"typescript"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"luau","alias":"luau","position":{"start":{"line":5,"column":3,"offset":39},"end":{"line":5,"column":11,"offset":47},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"luau"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser222","alias":"SER 222 - Data Structures & Algorithms","position":{"start":{"line":9,"column":3,"offset":67},"end":{"line":9,"column":52,"offset":116},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser216","alias":"SER 216 - \"Software Enterprise\" aka Intro to Software Design","position":{"start":{"line":10,"column":3,"offset":119},"end":{"line":10,"column":74,"offset":190},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser216"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"mat266","alias":"MAT 266 - Calc For Engineers II","position":{"start":{"line":11,"column":3,"offset":193},"end":{"line":11,"column":45,"offset":235},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"mat266"}}],"anchors":{"personal-notes":{"type":"header","text":"Personal Notes","value":"personal-notes","line":8,"column":0,"depth":2},"spring-2022":{"type":"header","text":"Spring 2022","value":"spring-2022","line":13,"column":0,"depth":2}},"children":["fuqi18m0n2cda123o2f3003","cCj8dvgLOLu6CEaNoWdD6","T2ptecH0AHZvseJr1aUvN","TzkCyXooADlBmPWjKo0ds","jwgm1vmw3r5kati1c6uw5pr"],"parent":null,"data":{},"body":"\n## Personal Notes\n\n- [[typescript]]\n- [[luau]]\n\n## Spring 2022\n\n- [[SER 222 - Data Structures & Algorithms|ser222]]\n- [[SER 216 - \"Software Enterprise\" aka Intro to Software Design|ser216]]\n- [[MAT 266 - Calc For Engineers II|mat266]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"James' Class Notes","description":"Fun SWE Stuffs","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteUrl":"https://jheinem1.github.io/notes","assetsPrefix":"/notes","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"enableSmartRefs":true,"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true}}},"__N_SSG":true}