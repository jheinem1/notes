{"pageProps":{"note":{"id":"7bk68men4djnecox52poe2l","title":"Undirected Graphs","desc":"","updated":1650324118622,"created":1649698546987,"custom":{},"fname":"ser222.undirected-graphs","type":"note","vault":{"fsPath":"vault"},"contentHash":"175e74e629c108ad4fe238fe08dc9f38","links":[{"type":"wiki","from":{"fname":"ser222.undirected-graphs","id":"7bk68men4djnecox52poe2l","vaultName":"vault"},"value":"ser222.directed-graphs","alias":"Directed","position":{"start":{"line":5,"column":5,"offset":30},"end":{"line":5,"column":40,"offset":65},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.directed-graphs"}},{"type":"wiki","from":{"fname":"ser222.undirected-graphs","id":"7bk68men4djnecox52poe2l","vaultName":"vault"},"value":"ser222.undirected-graphs","alias":"undirected","position":{"start":{"line":5,"column":44,"offset":69},"end":{"line":5,"column":83,"offset":108},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.undirected-graphs"}},{"from":{"fname":"ser222","vaultName":"vault"},"type":"backlink","position":{"start":{"line":62,"column":3,"offset":3994},"end":{"line":62,"column":37,"offset":4028},"indent":[]},"value":"ser222.undirected-graphs","alias":"Notes"},{"from":{"fname":"ser222.directed-graphs","vaultName":"vault"},"type":"backlink","position":{"start":{"line":2,"column":15,"offset":15},"end":{"line":2,"column":43,"offset":43},"indent":[]},"value":"ser222.undirected-graphs","alias":"ser222.undirected-graphs"},{"from":{"fname":"ser222.undirected-graphs","vaultName":"vault"},"type":"backlink","position":{"start":{"line":5,"column":44,"offset":69},"end":{"line":5,"column":83,"offset":108},"indent":[]},"value":"ser222.undirected-graphs","alias":"undirected"},{"from":{"fname":"ser222.directed-graphs.problems.directed-cycle","vaultName":"vault"},"type":"backlink","position":{"start":{"line":10,"column":26,"offset":250},"end":{"line":10,"column":54,"offset":278},"indent":[]},"value":"ser222.undirected-graphs","alias":"ser222.undirected-graphs"}],"anchors":{"terminology":{"type":"header","text":"Terminology","value":"terminology","line":8,"column":0,"depth":2},"basic-idea":{"type":"header","text":"Basic idea","value":"basic-idea","line":19,"column":0,"depth":2},"graph-api":{"type":"header","text":"Graph API","value":"graph-api","line":30,"column":0,"depth":2},"compute-the-degree-of-a-vertex":{"type":"header","text":"Compute the degree of a vertex","value":"compute-the-degree-of-a-vertex","line":45,"column":0,"depth":3},"count-number-of-self-loops":{"type":"header","text":"Count number of self-loops","value":"count-number-of-self-loops","line":56,"column":0,"depth":3},"implementing-the-graph-adt":{"type":"header","text":"Implementing the graph ADT","value":"implementing-the-graph-adt","line":69,"column":0,"depth":2},"adjacency-matrix":{"type":"header","text":"Adjacency matrix","value":"adjacency-matrix","line":82,"column":0,"depth":3},"adjacency-list":{"type":"header","text":"Adjacency list","value":"adjacency-list","line":108,"column":0,"depth":3},"searching":{"type":"header","text":"Searching","value":"searching","line":130,"column":0,"depth":2},"depth-first-search":{"type":"header","text":"Depth-first search","value":"depth-first-search","line":164,"column":0,"depth":3},"implementation":{"type":"header","text":"Implementation","value":"implementation","line":180,"column":0,"depth":3},"pathing":{"type":"header","text":"Pathing","value":"pathing","line":204,"column":0,"depth":2},"using-dfs":{"type":"header","text":"Using DFS","value":"using-dfs","line":242,"column":0,"depth":3},"breadth-first-search":{"type":"header","text":"Breadth-first search","value":"breadth-first-search","line":261,"column":0,"depth":3},"implementation-1":{"type":"header","text":"Implementation","value":"implementation-1","line":288,"column":0,"depth":3},"example":{"type":"header","text":"Example","value":"example","line":321,"column":0,"depth":3},"start":{"type":"header","text":"Start:","value":"start","line":335,"column":0,"depth":4},"loop-1":{"type":"header","text":"Loop 1:","value":"loop-1","line":343,"column":0,"depth":4},"loop-2":{"type":"header","text":"Loop 2:","value":"loop-2","line":352,"column":0,"depth":4},"loop-3":{"type":"header","text":"Loop 3:","value":"loop-3","line":357,"column":0,"depth":4},"loop-4":{"type":"header","text":"Loop 4:","value":"loop-4","line":364,"column":0,"depth":4},"loop-5":{"type":"header","text":"Loop 5:","value":"loop-5","line":373,"column":0,"depth":4},"loop-6":{"type":"header","text":"Loop 6:","value":"loop-6","line":380,"column":0,"depth":4},"loop-7":{"type":"header","text":"Loop 7:","value":"loop-7","line":385,"column":0,"depth":4},"bfs-vs-dfs":{"type":"header","text":"BFS vs DFS","value":"bfs-vs-dfs","line":390,"column":0,"depth":3},"theoretic-applications":{"type":"header","text":"Theoretic applications","value":"theoretic-applications","line":398,"column":0,"depth":2},"connected-components":{"type":"header","text":"Connected components","value":"connected-components","line":400,"column":0,"depth":3},"detecting-cycles":{"type":"header","text":"Detecting cycles","value":"detecting-cycles","line":414,"column":0,"depth":3},"k-coloring":{"type":"header","text":"k-Coloring","value":"k-coloring","line":419,"column":0,"depth":3}},"children":[],"parent":"TzkCyXooADlBmPWjKo0ds","data":{}},"body":"<h1 id=\"undirected-graphs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#undirected-graphs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Undirected Graphs</h1>\n<h2 id=\"terminology\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#terminology\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Terminology</h2>\n<ul>\n<li>Graphs\n<ul>\n<li><a href=\"/notes/notes/uo2hl3yfhn58g5fuzj90q2r\">Directed</a> vs <a href=\"/notes/notes/7bk68men4djnecox52poe2l\">undirected</a></li>\n<li>Vertices (angular points, adjacent)</li>\n<li>Edges (lines, incident)</li>\n</ul>\n</li>\n<li>Self-looping nodes\n<ul>\n<li>Nodes that are connected in such a way that a \"loop\" exists when the node is traversed</li>\n</ul>\n</li>\n<li>Parallel edges\n<ul>\n<li>Edges that are incident to the same node</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"basic-idea\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#basic-idea\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Basic idea</h2>\n<ul>\n<li>Graphs are similar to linked lists and trees, but they have no defined order</li>\n</ul>\n<div class=\"mermaid\">\n  flowchart LR\n    A &#x3C;--> B\n    B &#x3C;--> C\n    C &#x3C;--> A\n</div>\n<h2 id=\"graph-api\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#graph-api\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Graph API</h2>\n<div class=\"mermaid\">\n  classDiagram\n    class Graph {\n        Graph(int V)\n        Graph(In in)\n        V() int\n        E() int\n        addEdge(int v, int w)\n        adj(int v) Iterable\n        toString() String\n    }\n</div>\n<h3 id=\"compute-the-degree-of-a-vertex\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#compute-the-degree-of-a-vertex\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Compute the degree of a vertex</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> degree <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">:</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        degree<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> degree<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"count-number-of-self-loops\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#count-number-of-self-loops\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Count number of self-loops</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfSelfLoops</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&#x3C;</span> <span class=\"token class-name\"><span class=\"token namespace\">g<span class=\"token punctuation\">.</span></span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">:</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> w<span class=\"token punctuation\">)</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> count <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"implementing-the-graph-adt\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementing-the-graph-adt\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementing the graph ADT</h2>\n<ul>\n<li>Ideally we want\n<ul>\n<li>Low space usage: linear</li>\n<li>Fast to add edges: constant</li>\n<li>Fast to find edge on vertex: linear</li>\n</ul>\n</li>\n<li>We also want to support\n<ul>\n<li>Self-loops</li>\n<li>Parallel edges</li>\n</ul>\n</li>\n<li>Possible implementations\n<ul>\n<li>Adjacency matrix</li>\n<li>Adjacency list</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"adjacency-matrix\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#adjacency-matrix\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Adjacency matrix</h3>\n<p>For a graph of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span> vertices, make a <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span> by <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span> matrix, where each index corresponds directly to an edge</p>\n<div class=\"mermaid\">\n  flowchart LR\n    0 --- 1\n    1 --- 2\n    1 --- 4\n    2 --- 4\n    1 --- 3\n    4 --- 3\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td></td><td>T</td><td></td><td></td><td></td></tr><tr><td>1</td><td>T</td><td></td><td>T</td><td>T</td><td>T</td></tr><tr><td>2</td><td></td><td>T</td><td></td><td></td><td>T</td></tr><tr><td>3</td><td></td><td>T</td><td></td><td></td><td>T</td></tr><tr><td>4</td><td></td><td>T</td><td>T</td><td>T</td><td></td></tr></tbody></table>\n<ul>\n<li>Requires <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">V^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> space</li>\n<li>Supports self-loops</li>\n<li>Supports parallel edges</li>\n</ul>\n<h3 id=\"adjacency-list\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#adjacency-list\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Adjacency list</h3>\n<p>For a graph of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span> vertices, mane an array of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span> linked lists, where each index corresponds to a list of vertices that are connected to that index.</p>\n<div class=\"mermaid\">\n  flowchart LR\n    0 --- 1\n    1 --- 2\n    1 --- 4\n    2 --- 4\n    1 --- 3\n    4 --- 3\n</div>\n<p><img src=\"/notes/assets/images/2022-04-13-10-45-56.png\"></p>\n<ul>\n<li>Requires <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>+</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">V+E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span> space</li>\n<li>Supports self-loops</li>\n<li>Supports parallel edges</li>\n<li>Difficult to check if nodes are connected in constant time</li>\n<li>Uses significantly less space than a matrix</li>\n</ul>\n<h2 id=\"searching\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#searching\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Searching</h2>\n<ul>\n<li>Given an undirected graph, are two vertices connected?</li>\n</ul>\n<div class=\"mermaid\">\n  classDiagram\n    class Search {\n        Search(Graph G, int s)\n        marked(int v) boolean\n        count() int\n    }\n</div>\n<ul>\n<li>This API is a little overboard for solving the problem, but it makes for a better UML diagram</li>\n</ul>\n<div class=\"mermaid\">\n  flowchart LR\n    0 --- 1\n    2\n    1 --- 3\n    3 --- 4\n    1 --- 4\n</div>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> search <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Search</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">marked</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">marked</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<ul>\n<li>In other languages, this would probably be more easily implemented as a function\n<ul>\n<li>Or, <code>Graph</code> could implement the <code>Search</code> interface</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"depth-first-search\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#depth-first-search\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Depth-first search</h3>\n<ol>\n<li>Start at some node</li>\n<li>Mark it as visited</li>\n<li>Recursively visit each of its neighbors if they are not marked</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    marked<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">:</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>marked<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"implementation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementation</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DepthFirstSearch</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Search</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> marked<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DepthFirstSearch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        marked <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> marked<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"pathing\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pathing\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pathing</h2>\n<ul>\n<li>Given an undirected graph, are two vertices connected?</li>\n</ul>\n<div class=\"mermaid\">\n  classDiagram\n    class Paths {\n        Paths(Graph G, int s)\n        hasPathTo(int v) boolean\n        pathTo(int v) Iterable\n    }\n</div>\n<ul>\n<li>DFS can easily be extended to find all paths\n<ul>\n<li>However, it may not be the ideal solution</li>\n<li>DFS may find <em>a</em> path, but not necessarily the shortest</li>\n</ul>\n</li>\n</ul>\n<div class=\"mermaid\">\n  flowchart LR\n    0 --- 1\n    1 --- 3\n    3 --- 4\n    1 --- 4\n    2\n</div>\n<ul>\n<li>When used on the above nodes, DFS might find the path <code>0 -> 1 -> 3 -> 4</code>\n<ul>\n<li>This is <strong>not</strong> the shortest path</li>\n</ul>\n</li>\n<li>BFS, although slower, would observe <em>all</em> possible paths, and would always find the shortest path; <code>0 -> 1 -> 4</code></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> paths <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>paths<span class=\"token punctuation\">.</span><span class=\"token function\">hasPathTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>paths<span class=\"token punctuation\">.</span><span class=\"token function\">hasPathTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> v <span class=\"token operator\">:</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">pathTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 4 (DFS could fail to find this)</span>\n</code></pre>\n<h3 id=\"using-dfs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#using-dfs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Using DFS</h3>\n<ul>\n<li>New variable is `edgeTo\n<ul>\n<li>Gets updated for each call in <code>dfs</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    marked<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">:</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>marked<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            edgeTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>This is <strong>not</strong> the shortest path!</li>\n</ul>\n<h3 id=\"breadth-first-search\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#breadth-first-search\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Breadth-first search</h3>\n<ol>\n<li>Start at some node</li>\n<li>Mark it as visited</li>\n<li>Add its neighbors to a queue if they are not marked</li>\n<li>Remove the first node from the queue and mark it as visited</li>\n<li>Add its neighbors to the queue if they are not marked</li>\n<li>Repeat step 4 until the queue is empty</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    marked<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">:</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>marked<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                edgeTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n                marked<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"implementation-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementation-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementation</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BreadthFirstPaths</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Paths</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> marked<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edgeTo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BreadthFirstPaths</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        marked <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        edgeTo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasPathTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> marked<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pathTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasPathTo</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span> x <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">;</span> x <span class=\"token operator\">=</span> edgeTo<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"example\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#example\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Example</h3>\n<div class=\"mermaid\">\n  flowchart LR\n    1 --- 4\n    6 --- 1\n    4 --- 6\n    5 --- 3\n    0 --- 2\n    2 --- 3\n    5 --- 6\n    0 --- 5\n</div>\n<h4 id=\"start\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#start\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Start:</h4>\n<ul>\n<li><code>M</code> represents an array of marked vertices</li>\n<li><code>Q</code> represents the queue of vertices to visit</li>\n<li><code>V</code> represents the current vertex</li>\n<li><code>M[4] = T</code></li>\n<li><code>Q = [4]</code></li>\n</ul>\n<h4 id=\"loop-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 1:</h4>\n<ul>\n<li><code>V = 4</code></li>\n<li><code>ET[1] = 4</code></li>\n<li><code>M[1] = T</code></li>\n<li><code>ET[6] = 4</code></li>\n<li><code>M[6] = T</code></li>\n<li><code>Q = [6, 1]</code></li>\n</ul>\n<h4 id=\"loop-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 2:</h4>\n<ul>\n<li><code>V = 1</code></li>\n<li><code>Q = [6]</code></li>\n</ul>\n<h4 id=\"loop-3\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-3\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 3:</h4>\n<ul>\n<li><code>V = 6</code></li>\n<li><code>ET[5] = 6</code></li>\n<li><code>M[5] = T</code></li>\n<li><code>Q = [5]</code></li>\n</ul>\n<h4 id=\"loop-4\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-4\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 4:</h4>\n<ul>\n<li><code>V = 5</code></li>\n<li><code>ET[0] = 5</code></li>\n<li><code>M[0] = T</code></li>\n<li><code>ET[3] = 5</code></li>\n<li><code>M[3] = T</code></li>\n<li><code>Q = [3, 0]</code></li>\n</ul>\n<h4 id=\"loop-5\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-5\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 5:</h4>\n<ul>\n<li><code>V = 0</code></li>\n<li><code>ET[2] = 5</code></li>\n<li><code>M[2] = T</code></li>\n<li><code>Q = [2, 3]</code></li>\n</ul>\n<h4 id=\"loop-6\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-6\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 6:</h4>\n<ul>\n<li><code>V = 3</code></li>\n<li><code>Q = [2]</code></li>\n</ul>\n<h4 id=\"loop-7\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#loop-7\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Loop 7:</h4>\n<ul>\n<li><code>V = 2</code></li>\n<li><code>Q = []</code></li>\n</ul>\n<h3 id=\"bfs-vs-dfs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bfs-vs-dfs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>BFS vs DFS</h3>\n<ul>\n<li>Both algorithms solve the same problem</li>\n<li>DFS extends the current path using the newest node</li>\n<li>BFS looks at the oldest node first</li>\n<li>BFS is safer for graphs with an unknown or potentially near-infinite number of nodes</li>\n<li>DFS is better for traversing small graphs with a known number of nodes</li>\n</ul>\n<h2 id=\"theoretic-applications\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#theoretic-applications\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Theoretic applications</h2>\n<h3 id=\"connected-components\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#connected-components\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Connected components</h3>\n<ul>\n<li>A connected component is a set of a graph where every pair of vertices are connected by some path</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConnectedComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>This is really just DFS with a loop to get all connected components</li>\n</ul>\n<h3 id=\"detecting-cycles\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#detecting-cycles\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Detecting cycles</h3>\n<ul>\n<li>A cycle is a path where the first and last nodes are the same</li>\n<li>The <code>marked</code> array in both DFS and BFS can be used to detect cycles</li>\n</ul>\n<h3 id=\"k-coloring\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#k-coloring\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>k-Coloring</h3>\n<ul>\n<li>Can the vertices of a graph be colored with <code>k</code> different colors in a way that no adjacent nodes have the same color?</li>\n<li>All you need to do is label each node as the graph is traversed, alternating color (unless you have a cycle)</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/notes/TzkCyXooADlBmPWjKo0ds\">SER-222</a></li>\n<li><a href=\"/notes/notes/uo2hl3yfhn58g5fuzj90q2r\">Directed Graphs</a></li>\n<li><a href=\"/notes/notes/7bk68men4djnecox52poe2l\">Undirected Graphs</a></li>\n<li><a href=\"/notes/notes/c040vmtw22mec28ra78pf7i\">Directed Cycle</a></li>\n</ul>","noteIndex":{"id":"6YxiIDvTOeKoHyAaqqzY9","title":"Notes","desc":"","updated":1655764869385,"created":1641245237998,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fc07e211d902512814feeef3187746c9","links":[{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"typescript","alias":"typescript","position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":17,"offset":36},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"typescript"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"luau","alias":"luau","position":{"start":{"line":5,"column":3,"offset":39},"end":{"line":5,"column":11,"offset":47},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"luau"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser222","alias":"SER 222 - Data Structures & Algorithms","position":{"start":{"line":9,"column":3,"offset":67},"end":{"line":9,"column":52,"offset":116},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser216","alias":"SER 216 - \"Software Enterprise\" aka Intro to Software Design","position":{"start":{"line":10,"column":3,"offset":119},"end":{"line":10,"column":74,"offset":190},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser216"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"mat266","alias":"MAT 266 - Calc For Engineers II","position":{"start":{"line":11,"column":3,"offset":193},"end":{"line":11,"column":45,"offset":235},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"mat266"}}],"anchors":{"personal-notes":{"type":"header","text":"Personal Notes","value":"personal-notes","line":8,"column":0,"depth":2},"spring-2022":{"type":"header","text":"Spring 2022","value":"spring-2022","line":13,"column":0,"depth":2}},"children":["fuqi18m0n2cda123o2f3003","cCj8dvgLOLu6CEaNoWdD6","T2ptecH0AHZvseJr1aUvN","TzkCyXooADlBmPWjKo0ds","jwgm1vmw3r5kati1c6uw5pr"],"parent":null,"data":{},"body":"\n## Personal Notes\n\n- [[typescript]]\n- [[luau]]\n\n## Spring 2022\n\n- [[SER 222 - Data Structures & Algorithms|ser222]]\n- [[SER 216 - \"Software Enterprise\" aka Intro to Software Design|ser216]]\n- [[MAT 266 - Calc For Engineers II|mat266]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"James' Class Notes","description":"Fun SWE Stuffs","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteUrl":"https://jheinem1.github.io/notes","assetsPrefix":"/notes","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"enableSmartRefs":true,"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true}}},"__N_SSG":true}