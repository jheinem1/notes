{"pageProps":{"note":{"id":"n8v9ra9di5cmdpq870z0vrp","title":"Heap","desc":"","updated":1647454247185,"created":1646244282314,"custom":{},"fname":"ser222.heap","type":"note","vault":{"fsPath":"vault"},"contentHash":"0802d837a5f99f56ac61c88b55fa24da","links":[{"type":"wiki","from":{"fname":"ser222.heap","id":"n8v9ra9di5cmdpq870z0vrp","vaultName":"vault"},"value":"ser222.binary-tree","alias":"ser222.binary-tree","position":{"start":{"line":2,"column":49,"offset":49},"end":{"line":2,"column":71,"offset":71},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.binary-tree"}},{"from":{"fname":"ser222.binary-search-tree","vaultName":"vault"},"type":"backlink","position":{"start":{"line":4,"column":50,"offset":72},"end":{"line":4,"column":71,"offset":93},"indent":[]},"value":"ser222.heap","alias":"heaps"},{"from":{"fname":"ser222.sorting.priority-queue","vaultName":"vault"},"type":"backlink","position":{"start":{"line":78,"column":53,"offset":2941},"end":{"line":78,"column":68,"offset":2956},"indent":[]},"value":"ser222.heap","alias":"ser222.heap"},{"from":{"fname":"ser222.sorting.priority-queue","vaultName":"vault"},"type":"backlink","position":{"start":{"line":86,"column":14,"offset":3353},"end":{"line":86,"column":39,"offset":3378},"indent":[]},"value":"ser222.heap","alias":"Sink"},{"from":{"fname":"ser222.sorting.priority-queue","vaultName":"vault"},"type":"backlink","position":{"start":{"line":86,"column":44,"offset":3383},"end":{"line":86,"column":69,"offset":3408},"indent":[]},"value":"ser222.heap","alias":"Swim"},{"from":{"fname":"ser222.algorithms.adj.analysis","vaultName":"vault"},"type":"backlink","position":{"start":{"line":47,"column":4,"offset":1140},"end":{"line":47,"column":19,"offset":1155},"indent":[]},"value":"ser222.heap","alias":"ser222.heap"}],"anchors":{"array-mapping":{"type":"header","text":"Array mapping","value":"array-mapping","line":15,"column":0,"depth":2},"heap-operations":{"type":"header","text":"Heap operations","value":"heap-operations","line":22,"column":0,"depth":2},"swim":{"type":"header","text":"Swim","value":"swim","line":24,"column":0,"depth":3},"sink":{"type":"header","text":"Sink","value":"sink","line":39,"column":0,"depth":3}},"children":[],"parent":"TzkCyXooADlBmPWjKo0ds","data":{}},"body":"<h1 id=\"heap\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#heap\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Heap</h1>\n<ul>\n<li>A heap is a data structure that is a complete <a href=\"/notes/notes/pswkhuweiczpfii3orp1cji\">Binary Tree</a></li>\n<li>A binary tree is <em>heap-ordered</em> if each node is larger than or equal to the keys in its left and right subtrees</li>\n<li>This means the largest element is always at the root of the tree in a max heap\n<ul>\n<li>This can be reversed for a min heap</li>\n</ul>\n</li>\n</ul>\n<p><strong>This assumes that the heap is a max heap.</strong></p>\n<h2 id=\"array-mapping\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#array-mapping\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Array mapping</h2>\n<ul>\n<li>Although the tree could be represented as a linked structure, we can use an array to represent the tree\n<ul>\n<li>This makes it easier to implement the heap operations</li>\n</ul>\n</li>\n<li>A complete binary tree is one where every level is full except for the last level</li>\n<li>This will make accessing other nodes fast</li>\n</ul>\n<h2 id=\"heap-operations\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#heap-operations\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Heap operations</h2>\n<h3 id=\"swim\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#swim\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Swim</h3>\n<ul>\n<li>Suppose we insert a new element <code>k</code> into the heap\n<ul>\n<li>This element could be larger than its parent</li>\n</ul>\n</li>\n<li>We need to \"swim\" the element up to its correct position</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">less</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">exch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> k <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">=</span> k <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"sink\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#sink\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Sink</h3>\n<ul>\n<li>Suppose we insert a new element 'k' into the heap\n<ul>\n<li>This element could be smaller than its children</li>\n</ul>\n</li>\n<li>We need to \"sink\" the element down to its correct position</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> k <span class=\"token operator\">&#x3C;=</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&#x3C;</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">less</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">less</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        k <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/notes/6qkeo055xhvi09f68l050au\">Binary Search Tree</a></li>\n<li><a href=\"/notes/notes/rm3v8zh3u4s8ccf2tdk0grn\">Priority Queue</a></li>\n<li><a href=\"/notes/notes/ck1jy0xrmrn7rioctj6uwal\">ADJ for Algorithms: Analysis</a></li>\n</ul>","noteIndex":{"id":"6YxiIDvTOeKoHyAaqqzY9","title":"Notes","desc":"","updated":1655764869385,"created":1641245237998,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fc07e211d902512814feeef3187746c9","links":[{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"typescript","alias":"typescript","position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":17,"offset":36},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"typescript"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"luau","alias":"luau","position":{"start":{"line":5,"column":3,"offset":39},"end":{"line":5,"column":11,"offset":47},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"luau"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser222","alias":"SER 222 - Data Structures & Algorithms","position":{"start":{"line":9,"column":3,"offset":67},"end":{"line":9,"column":52,"offset":116},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser216","alias":"SER 216 - \"Software Enterprise\" aka Intro to Software Design","position":{"start":{"line":10,"column":3,"offset":119},"end":{"line":10,"column":74,"offset":190},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser216"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"mat266","alias":"MAT 266 - Calc For Engineers II","position":{"start":{"line":11,"column":3,"offset":193},"end":{"line":11,"column":45,"offset":235},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"mat266"}}],"anchors":{"personal-notes":{"type":"header","text":"Personal Notes","value":"personal-notes","line":8,"column":0,"depth":2},"spring-2022":{"type":"header","text":"Spring 2022","value":"spring-2022","line":13,"column":0,"depth":2}},"children":["fuqi18m0n2cda123o2f3003","cCj8dvgLOLu6CEaNoWdD6","T2ptecH0AHZvseJr1aUvN","TzkCyXooADlBmPWjKo0ds","jwgm1vmw3r5kati1c6uw5pr"],"parent":null,"data":{},"body":"\n## Personal Notes\n\n- [[typescript]]\n- [[luau]]\n\n## Spring 2022\n\n- [[SER 222 - Data Structures & Algorithms|ser222]]\n- [[SER 216 - \"Software Enterprise\" aka Intro to Software Design|ser216]]\n- [[MAT 266 - Calc For Engineers II|mat266]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"James' Class Notes","description":"Fun SWE Stuffs","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteUrl":"https://jheinem1.github.io/notes","assetsPrefix":"/notes","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"enableSmartRefs":true,"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true}}},"__N_SSG":true}