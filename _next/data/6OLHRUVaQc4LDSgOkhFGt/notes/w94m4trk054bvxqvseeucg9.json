{"pageProps":{"note":{"id":"w94m4trk054bvxqvseeucg9","title":"Weighted Graphs","desc":"","updated":1651082545458,"created":1650911280155,"custom":{},"fname":"ser222.weighted-graphs","type":"note","vault":{"fsPath":"vault"},"contentHash":"9f416502add9f1db79616d930df7f026","links":[{"type":"wiki","from":{"fname":"ser222.weighted-graphs","id":"w94m4trk054bvxqvseeucg9","vaultName":"vault"},"value":"ser222.directed-graphs","alias":"Directed Graph","position":{"start":{"line":40,"column":45,"offset":828},"end":{"line":40,"column":86,"offset":869},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222.directed-graphs"}},{"from":{"fname":"ser222","vaultName":"vault"},"type":"backlink","position":{"start":{"line":71,"column":7,"offset":4341},"end":{"line":71,"column":57,"offset":4391},"indent":[]},"value":"ser222.weighted-graphs","alias":"Notes - Weighted Graphs"}],"anchors":{"edges-with-attributes":{"type":"header","text":"Edges with attributes","value":"edges-with-attributes","line":10,"column":0,"depth":2},"revisiting-directed-graph-adt":{"type":"header","text":"Revisiting directed graph ADT","value":"revisiting-directed-graph-adt","line":44,"column":0,"depth":2},"shortest-path":{"type":"header","text":"Shortest path","value":"shortest-path","line":59,"column":0,"depth":2},"relaxation":{"type":"header","text":"Relaxation","value":"relaxation","line":63,"column":0,"depth":3},"dijkstras-algorithm":{"type":"header","text":"Dijkstra's algorithm","value":"dijkstras-algorithm","line":92,"column":0,"depth":3}},"children":[],"parent":"TzkCyXooADlBmPWjKo0ds","data":{}},"body":"<h1 id=\"weighted-graphs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#weighted-graphs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Weighted Graphs</h1>\n<p>Weighted graphs assign a weight to each edge rather than just a boolean value. This takes up more space, but allows for more realistic graphs.</p>\n<h2 id=\"edges-with-attributes\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#edges-with-attributes\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Edges with attributes</h2>\n<ul>\n<li>We will create a simple class to hold the attributes of each edge</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectedEdge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectedEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> w<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d->%d %.2f\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"revisiting-directed-graph-adt\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#revisiting-directed-graph-adt\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Revisiting directed graph ADT</h2>\n<ul>\n<li>There are some small modifications to the <a href=\"/notes/notes/uo2hl3yfhn58g5fuzj90q2r\">Directed Graph</a> that we will make to make it work with weighted edges</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EdgeWeightedGraph</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number of vertices</span>\n    <span class=\"token keyword\">int</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number of edges</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DirectedEdge</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add edge v->w</span>\n    <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">DirectedEdge</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">adj</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// vertices connected to v from edges v->x</span>\n    <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">DirectedEdge</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">edges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all edges</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string representation of graph</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"shortest-path\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#shortest-path\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Shortest path</h2>\n<ul>\n<li>A path between two nodes is the shortest if there is no other path with a smaller weight</li>\n</ul>\n<h3 id=\"relaxation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#relaxation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Relaxation</h3>\n<ul>\n<li>Pick a node</li>\n<li>If it provides a shorter way to reach its neighbors, then update the neighbors</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EdgeWeightedDigraph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DirectedEdge</span> e <span class=\"token operator\">:</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> distTo<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            distTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distTo<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            edgeTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"mermaid\">\n  flowchart LR\n    0 -->|1| 1\n    0 -->|3| 2\n    1 -->|2| 3\n    3 -->|1| 4\n    2 -->|4| 4\n    1 -->|1| 2\n</div>\n<p>Example of situation where relaxing would be needed to find the shortest path.</p>\n<h3 id=\"dijkstras-algorithm\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#dijkstras-algorithm\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Dijkstra's algorithm</h3>\n<ul>\n<li>We need to relax each node in a graph\n<ul>\n<li>The issue is that we need them to relax them in an order that gives us the shortest path</li>\n</ul>\n</li>\n<li>Idea:\n<ul>\n<li>Maintain a list of nodes that we have not yet relaxed</li>\n<li>Pick out the node with the smallest distance</li>\n<li>Relax it</li>\n<li>Remove it from the list</li>\n<li>Repeat until all nodes have been relaxed</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dijikstra</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EdgeWeightedDigraph</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    distTo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    edgeTo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectedEdge</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&#x3C;</span> <span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        distTo<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span>POSITIVE_INFINITY<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    distTo<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n    pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexMinPQ</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">G<span class=\"token punctuation\">.</span>V</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pq<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> distTo<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">delMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DirectedEdge</span> e <span class=\"token operator\">:</span> <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> distTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> distTo<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                distTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distTo<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                edgeTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">decreaseKey</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> distTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> distTo<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/notes/TzkCyXooADlBmPWjKo0ds\">SER-222</a></li>\n</ul>","noteIndex":{"id":"6YxiIDvTOeKoHyAaqqzY9","title":"Notes","desc":"","updated":1655764869385,"created":1641245237998,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"fc07e211d902512814feeef3187746c9","links":[{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"typescript","alias":"typescript","position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":17,"offset":36},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"typescript"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"luau","alias":"luau","position":{"start":{"line":5,"column":3,"offset":39},"end":{"line":5,"column":11,"offset":47},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"luau"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser222","alias":"SER 222 - Data Structures & Algorithms","position":{"start":{"line":9,"column":3,"offset":67},"end":{"line":9,"column":52,"offset":116},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser222"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"ser216","alias":"SER 216 - \"Software Enterprise\" aka Intro to Software Design","position":{"start":{"line":10,"column":3,"offset":119},"end":{"line":10,"column":74,"offset":190},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ser216"}},{"type":"wiki","from":{"fname":"root","id":"6YxiIDvTOeKoHyAaqqzY9","vaultName":"vault"},"value":"mat266","alias":"MAT 266 - Calc For Engineers II","position":{"start":{"line":11,"column":3,"offset":193},"end":{"line":11,"column":45,"offset":235},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"mat266"}}],"anchors":{"personal-notes":{"type":"header","text":"Personal Notes","value":"personal-notes","line":8,"column":0,"depth":2},"spring-2022":{"type":"header","text":"Spring 2022","value":"spring-2022","line":13,"column":0,"depth":2}},"children":["fuqi18m0n2cda123o2f3003","cCj8dvgLOLu6CEaNoWdD6","T2ptecH0AHZvseJr1aUvN","TzkCyXooADlBmPWjKo0ds","jwgm1vmw3r5kati1c6uw5pr"],"parent":null,"data":{},"body":"\n## Personal Notes\n\n- [[typescript]]\n- [[luau]]\n\n## Spring 2022\n\n- [[SER 222 - Data Structures & Algorithms|ser222]]\n- [[SER 216 - \"Software Enterprise\" aka Intro to Software Design|ser216]]\n- [[MAT 266 - Calc For Engineers II|mat266]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"James' Class Notes","description":"Fun SWE Stuffs","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteUrl":"https://jheinem1.github.io/notes","assetsPrefix":"/notes","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"enableSmartRefs":true,"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableHandlebarTemplates":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true}}},"__N_SSG":true}